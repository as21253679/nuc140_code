; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\v6mdebug.o --depend=.\obj\v6mdebug.d --feedback=.\obj\Smpl_HID_IO.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\obj\v6mdebug.crf V6MDebug.c]
                          THUMB

                          AREA ||i.LED_off||, CODE, READONLY, ALIGN=2

                  LED_off PROC
;;;121    
;;;122    uint32_t LED_off(const uint8_t *pu8Buffer, uint32_t u32Len, uint8_t u8LedNum)
000000  b5f0              PUSH     {r4-r7,lr}
;;;123    {
000002  b091              SUB      sp,sp,#0x44
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
;;;124        uint8_t i, au32Data[62] = {0};
000008  2140              MOVS     r1,#0x40
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;125        uint32_t u32Errno = 0;
000010  2600              MOVS     r6,#0
;;;126    
;;;127        clr_all_pannal();  //clear all pannel
000012  f7fffffe          BL       clr_all_pannal
;;;128        print_lcd(0, "PC Send command");
000016  a123              ADR      r1,|L1.164|
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       print_lcd
;;;129    
;;;130        if (u8LedNum == 5)
00001e  2c05              CMP      r4,#5
000020  d104              BNE      |L1.44|
;;;131            print_lcd(1, "LED 5 off  	 ");
000022  a124              ADR      r1,|L1.180|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       print_lcd
00002a  e018              B        |L1.94|
                  |L1.44|
;;;132        else if (u8LedNum == 6)
00002c  2c06              CMP      r4,#6
00002e  d104              BNE      |L1.58|
;;;133            print_lcd(1, "LED 6 off  	 ");
000030  a124              ADR      r1,|L1.196|
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       print_lcd
000038  e011              B        |L1.94|
                  |L1.58|
;;;134        else if (u8LedNum == 7)
00003a  2c07              CMP      r4,#7
00003c  d104              BNE      |L1.72|
;;;135            print_lcd(1, "LED 7 off   	 ");
00003e  a125              ADR      r1,|L1.212|
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       print_lcd
000046  e00a              B        |L1.94|
                  |L1.72|
;;;136        else if (u8LedNum == 8)
000048  2c08              CMP      r4,#8
00004a  d104              BNE      |L1.86|
;;;137            print_lcd(1, "LED 8 off   	 ");
00004c  a125              ADR      r1,|L1.228|
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       print_lcd
000054  e003              B        |L1.94|
                  |L1.86|
;;;138        else
;;;139            print_lcd(1, "LED All off  	 ");
000056  a127              ADR      r1,|L1.244|
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       print_lcd
                  |L1.94|
;;;140    
;;;141    	if(u8LedNum != 15)
00005e  2c0f              CMP      r4,#0xf
000060  d009              BEQ      |L1.118|
;;;142    	{
;;;143    		//LED5~LED8 are defined GPC12~GPC15
;;;144    	    DrvGPIO_Open(E_GPC, u8LedNum + 7, E_IO_OUTPUT);
000062  2201              MOVS     r2,#1
000064  1de1              ADDS     r1,r4,#7
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       DrvGPIO_Open
;;;145    	    DrvGPIO_SetBit(E_GPC, u8LedNum + 7);
00006c  1de1              ADDS     r1,r4,#7
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       DrvGPIO_SetBit
000074  e00e              B        |L1.148|
                  |L1.118|
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		for(i=12;i<16;i++)
000076  250c              MOVS     r5,#0xc
000078  e00a              B        |L1.144|
                  |L1.122|
;;;150    		{
;;;151    		    DrvGPIO_Open(E_GPC, i, E_IO_OUTPUT);
00007a  2201              MOVS     r2,#1
00007c  4629              MOV      r1,r5
00007e  2002              MOVS     r0,#2
000080  f7fffffe          BL       DrvGPIO_Open
;;;152    		    DrvGPIO_SetBit(E_GPC, i);
000084  4629              MOV      r1,r5
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       DrvGPIO_SetBit
00008c  1c68              ADDS     r0,r5,#1              ;149
00008e  b2c5              UXTB     r5,r0                 ;149
                  |L1.144|
000090  2d10              CMP      r5,#0x10              ;149
000092  dbf2              BLT      |L1.122|
                  |L1.148|
;;;153    		}
;;;154    	}
;;;155    
;;;156        VCMD_AckCommand(u32Errno, (const uint8_t *)&au32Data, 62);
000094  223e              MOVS     r2,#0x3e
000096  a901              ADD      r1,sp,#4
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       VCMD_AckCommand
;;;157        return 0;
00009e  2000              MOVS     r0,#0
;;;158    }
0000a0  b011              ADD      sp,sp,#0x44
0000a2  bdf0              POP      {r4-r7,pc}
;;;159    
                          ENDP

                  |L1.164|
0000a4  50432053          DCB      "PC Send command",0
0000a8  656e6420
0000ac  636f6d6d
0000b0  616e6400
                  |L1.180|
0000b4  4c454420          DCB      "LED 5 off  \t ",0
0000b8  35206f66
0000bc  66202009
0000c0  2000    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L1.196|
0000c4  4c454420          DCB      "LED 6 off  \t ",0
0000c8  36206f66
0000cc  66202009
0000d0  2000    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L1.212|
0000d4  4c454420          DCB      "LED 7 off   \t ",0
0000d8  37206f66
0000dc  66202020
0000e0  092000  
0000e3  00                DCB      0
                  |L1.228|
0000e4  4c454420          DCB      "LED 8 off   \t ",0
0000e8  38206f66
0000ec  66202020
0000f0  092000  
0000f3  00                DCB      0
                  |L1.244|
0000f4  4c454420          DCB      "LED All off  \t ",0
0000f8  416c6c20
0000fc  6f666620
000100  20092000

                          AREA ||i.LED_on||, CODE, READONLY, ALIGN=2

                  LED_on PROC
;;;83     
;;;84     uint32_t LED_on(const uint8_t *pu8Buffer, uint32_t u32Len, uint8_t u8LedNum)
000000  b5f0              PUSH     {r4-r7,lr}
;;;85     {
000002  b091              SUB      sp,sp,#0x44
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
;;;86         uint8_t i, au32Data[62] = {0};
000008  2140              MOVS     r1,#0x40
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;87         uint32_t u32Errno = 0;
000010  2600              MOVS     r6,#0
;;;88     
;;;89         clr_all_pannal();  //clear all pannel
000012  f7fffffe          BL       clr_all_pannal
;;;90         print_lcd(0, "PC Send command");
000016  a123              ADR      r1,|L2.164|
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       print_lcd
;;;91     
;;;92         if (u8LedNum == 5)
00001e  2c05              CMP      r4,#5
000020  d104              BNE      |L2.44|
;;;93             print_lcd(1, "LED 5 on     ");
000022  a124              ADR      r1,|L2.180|
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       print_lcd
00002a  e018              B        |L2.94|
                  |L2.44|
;;;94         else if (u8LedNum == 6)
00002c  2c06              CMP      r4,#6
00002e  d104              BNE      |L2.58|
;;;95             print_lcd(1, "LED 6 on     ");
000030  a124              ADR      r1,|L2.196|
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       print_lcd
000038  e011              B        |L2.94|
                  |L2.58|
;;;96         else if (u8LedNum == 7)
00003a  2c07              CMP      r4,#7
00003c  d104              BNE      |L2.72|
;;;97             print_lcd(1, "LED 7 on     ");
00003e  a125              ADR      r1,|L2.212|
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       print_lcd
000046  e00a              B        |L2.94|
                  |L2.72|
;;;98         else if (u8LedNum == 8)
000048  2c08              CMP      r4,#8
00004a  d104              BNE      |L2.86|
;;;99             print_lcd(1, "LED 8 on     ");
00004c  a125              ADR      r1,|L2.228|
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       print_lcd
000054  e003              B        |L2.94|
                  |L2.86|
;;;100        else
;;;101            print_lcd(1, "LED All on   ");
000056  a127              ADR      r1,|L2.244|
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       print_lcd
                  |L2.94|
;;;102    
;;;103    	if(u8LedNum != 15)
00005e  2c0f              CMP      r4,#0xf
000060  d009              BEQ      |L2.118|
;;;104    	{
;;;105    	    //LED5~LED8 are defined GPC12~GPC15
;;;106    	    DrvGPIO_Open(E_GPC, u8LedNum + 7, E_IO_OUTPUT);
000062  2201              MOVS     r2,#1
000064  1de1              ADDS     r1,r4,#7
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       DrvGPIO_Open
;;;107    	    DrvGPIO_ClrBit(E_GPC, u8LedNum + 7);
00006c  1de1              ADDS     r1,r4,#7
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       DrvGPIO_ClrBit
000074  e00e              B        |L2.148|
                  |L2.118|
;;;108    	}
;;;109    	else
;;;110    	{
;;;111    	   for(i=12;i<16;i++)
000076  250c              MOVS     r5,#0xc
000078  e00a              B        |L2.144|
                  |L2.122|
;;;112    	   {
;;;113    	    DrvGPIO_Open(E_GPC, i, E_IO_OUTPUT);
00007a  2201              MOVS     r2,#1
00007c  4629              MOV      r1,r5
00007e  2002              MOVS     r0,#2
000080  f7fffffe          BL       DrvGPIO_Open
;;;114    	    DrvGPIO_ClrBit(E_GPC, i);
000084  4629              MOV      r1,r5
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       DrvGPIO_ClrBit
00008c  1c68              ADDS     r0,r5,#1              ;111
00008e  b2c5              UXTB     r5,r0                 ;111
                  |L2.144|
000090  2d10              CMP      r5,#0x10              ;111
000092  dbf2              BLT      |L2.122|
                  |L2.148|
;;;115    	   }
;;;116    	}
;;;117    
;;;118        VCMD_AckCommand(u32Errno, (const uint8_t *)&au32Data, 62);
000094  223e              MOVS     r2,#0x3e
000096  a901              ADD      r1,sp,#4
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       VCMD_AckCommand
;;;119        return 0;
00009e  2000              MOVS     r0,#0
;;;120    }
0000a0  b011              ADD      sp,sp,#0x44
0000a2  bdf0              POP      {r4-r7,pc}
;;;121    
                          ENDP

                  |L2.164|
0000a4  50432053          DCB      "PC Send command",0
0000a8  656e6420
0000ac  636f6d6d
0000b0  616e6400
                  |L2.180|
0000b4  4c454420          DCB      "LED 5 on     ",0
0000b8  35206f6e
0000bc  20202020
0000c0  2000    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L2.196|
0000c4  4c454420          DCB      "LED 6 on     ",0
0000c8  36206f6e
0000cc  20202020
0000d0  2000    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L2.212|
0000d4  4c454420          DCB      "LED 7 on     ",0
0000d8  37206f6e
0000dc  20202020
0000e0  2000    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L2.228|
0000e4  4c454420          DCB      "LED 8 on     ",0
0000e8  38206f6e
0000ec  20202020
0000f0  2000    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L2.244|
0000f4  4c454420          DCB      "LED All on   ",0
0000f8  416c6c20
0000fc  6f6e2020
000100  2000    
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.V6M_ProcessCommand||, CODE, READONLY, ALIGN=2

                  V6M_ProcessCommand PROC
;;;71     
;;;72     void V6M_ProcessCommand(const uint8_t *pu8Buffer, uint32_t u32Len)
000000  b570              PUSH     {r4-r6,lr}
;;;73     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;74     
;;;75         static uint8_t au8CmdBuffer[V6M_MAX_COMMAND_LENGTH];
;;;76         static uint32_t u32BufferLen = 0;
;;;77     
;;;78         memcpy(au8CmdBuffer, pu8Buffer, 62);
000006  223e              MOVS     r2,#0x3e
000008  4621              MOV      r1,r4
00000a  4804              LDR      r0,|L3.28|
00000c  f7fffffe          BL       __aeabi_memcpy
;;;79     
;;;80         V6M_ProcessOneCommand(au8CmdBuffer, u32BufferLen);
000010  4803              LDR      r0,|L3.32|
000012  6801              LDR      r1,[r0,#0]  ; u32BufferLen
000014  4801              LDR      r0,|L3.28|
000016  f7fffffe          BL       V6M_ProcessOneCommand
;;;81     
;;;82     }
00001a  bd70              POP      {r4-r6,pc}
;;;83     
                          ENDP

                  |L3.28|
                          DCD      au8CmdBuffer
                  |L3.32|
                          DCD      u32BufferLen

                          AREA ||i.V6M_ProcessOneCommand||, CODE, READONLY, ALIGN=1

                  V6M_ProcessOneCommand PROC
;;;23     
;;;24     static uint32_t V6M_ProcessOneCommand(const uint8_t *pu8Buffer, uint32_t u32Len)
000000  b538              PUSH     {r3-r5,lr}
;;;25     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;26         uint32_t u32Cmd;
;;;27     
;;;28         memcpy(&u32Cmd, pu8Buffer, sizeof(u32Cmd));
000006  2204              MOVS     r2,#4
000008  4621              MOV      r1,r4
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy
;;;29         switch (u32Cmd)
000010  9800              LDR      r0,[sp,#0]
000012  28bf              CMP      r0,#0xbf
000014  d01a              BEQ      |L4.76|
000016  dc0c              BGT      |L4.50|
000018  28b6              CMP      r0,#0xb6
00001a  d023              BEQ      |L4.100|
00001c  dc04              BGT      |L4.40|
00001e  1c40              ADDS     r0,r0,#1
000020  d050              BEQ      |L4.196|
000022  28b6              CMP      r0,#0xb6
000024  d153              BNE      |L4.206|
000026  e017              B        |L4.88|
                  |L4.40|
000028  28b7              CMP      r0,#0xb7
00002a  d021              BEQ      |L4.112|
00002c  28b8              CMP      r0,#0xb8
00002e  d14e              BNE      |L4.206|
000030  e024              B        |L4.124|
                  |L4.50|
000032  28c7              CMP      r0,#0xc7
000034  d03a              BEQ      |L4.172|
000036  dc04              BGT      |L4.66|
000038  28c5              CMP      r0,#0xc5
00003a  d02b              BEQ      |L4.148|
00003c  28c6              CMP      r0,#0xc6
00003e  d146              BNE      |L4.206|
000040  e02e              B        |L4.160|
                  |L4.66|
000042  28c8              CMP      r0,#0xc8
000044  d038              BEQ      |L4.184|
000046  28cf              CMP      r0,#0xcf
000048  d141              BNE      |L4.206|
00004a  e01d              B        |L4.136|
                  |L4.76|
;;;30         {
;;;31         case V6M_CMD_LED_ON:
;;;32             return LED_on(pu8Buffer, u32Len, 15);
00004c  220f              MOVS     r2,#0xf
00004e  4629              MOV      r1,r5
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       LED_on
                  |L4.86|
;;;33     
;;;34         case V6M_CMD_LED5_ON:
;;;35             return LED_on(pu8Buffer, u32Len, 5);
;;;36     
;;;37         case V6M_CMD_LED6_ON:
;;;38             return LED_on(pu8Buffer, u32Len, 6);
;;;39     
;;;40         case V6M_CMD_LED7_ON:
;;;41             return LED_on(pu8Buffer, u32Len, 7);
;;;42     
;;;43         case V6M_CMD_LED8_ON:
;;;44             return LED_on(pu8Buffer, u32Len, 8);
;;;45     
;;;46         case V6M_CMD_LED_OFF:
;;;47             return LED_off(pu8Buffer, u32Len, 15);
;;;48     
;;;49         case V6M_CMD_LED5_OFF:
;;;50             return LED_off(pu8Buffer, u32Len, 5);
;;;51     
;;;52         case V6M_CMD_LED6_OFF:
;;;53             return LED_off(pu8Buffer, u32Len, 6);
;;;54     
;;;55         case V6M_CMD_LED7_OFF:
;;;56             return LED_off(pu8Buffer, u32Len, 7);
;;;57     
;;;58         case V6M_CMD_LED8_OFF:
;;;59             return LED_off(pu8Buffer, u32Len, 8);
;;;60     
;;;61         case V6M_CMD_RESET_CMD_SRIAL:
;;;62             return VCMD_WillResetCommandSerial(pu8Buffer, u32Len);
;;;63     
;;;64         default:
;;;65             //DrvSIO_printf("Unknown cmd: %02x\n", u32Cmd);
;;;66     
;;;67             return 1;
;;;68         }
;;;69     }
000056  bd38              POP      {r3-r5,pc}
                  |L4.88|
000058  2205              MOVS     r2,#5                 ;35
00005a  4629              MOV      r1,r5                 ;35
00005c  4620              MOV      r0,r4                 ;35
00005e  f7fffffe          BL       LED_on
000062  e7f8              B        |L4.86|
                  |L4.100|
000064  2206              MOVS     r2,#6                 ;38
000066  4629              MOV      r1,r5                 ;38
000068  4620              MOV      r0,r4                 ;38
00006a  f7fffffe          BL       LED_on
00006e  e7f2              B        |L4.86|
                  |L4.112|
000070  2207              MOVS     r2,#7                 ;41
000072  4629              MOV      r1,r5                 ;41
000074  4620              MOV      r0,r4                 ;41
000076  f7fffffe          BL       LED_on
00007a  e7ec              B        |L4.86|
                  |L4.124|
00007c  2208              MOVS     r2,#8                 ;44
00007e  4629              MOV      r1,r5                 ;44
000080  4620              MOV      r0,r4                 ;44
000082  f7fffffe          BL       LED_on
000086  e7e6              B        |L4.86|
                  |L4.136|
000088  220f              MOVS     r2,#0xf               ;47
00008a  4629              MOV      r1,r5                 ;47
00008c  4620              MOV      r0,r4                 ;47
00008e  f7fffffe          BL       LED_off
000092  e7e0              B        |L4.86|
                  |L4.148|
000094  2205              MOVS     r2,#5                 ;50
000096  4629              MOV      r1,r5                 ;50
000098  4620              MOV      r0,r4                 ;50
00009a  f7fffffe          BL       LED_off
00009e  e7da              B        |L4.86|
                  |L4.160|
0000a0  2206              MOVS     r2,#6                 ;53
0000a2  4629              MOV      r1,r5                 ;53
0000a4  4620              MOV      r0,r4                 ;53
0000a6  f7fffffe          BL       LED_off
0000aa  e7d4              B        |L4.86|
                  |L4.172|
0000ac  2207              MOVS     r2,#7                 ;56
0000ae  4629              MOV      r1,r5                 ;56
0000b0  4620              MOV      r0,r4                 ;56
0000b2  f7fffffe          BL       LED_off
0000b6  e7ce              B        |L4.86|
                  |L4.184|
0000b8  2208              MOVS     r2,#8                 ;59
0000ba  4629              MOV      r1,r5                 ;59
0000bc  4620              MOV      r0,r4                 ;59
0000be  f7fffffe          BL       LED_off
0000c2  e7c8              B        |L4.86|
                  |L4.196|
0000c4  4629              MOV      r1,r5                 ;62
0000c6  4620              MOV      r0,r4                 ;62
0000c8  f7fffffe          BL       VCMD_WillResetCommandSerial
0000cc  e7c3              B        |L4.86|
                  |L4.206|
0000ce  2001              MOVS     r0,#1                 ;67
0000d0  e7c1              B        |L4.86|
;;;70     
                          ENDP


                          AREA ||i.VCMD_AckCommand||, CODE, READONLY, ALIGN=1

                  VCMD_AckCommand PROC
;;;13     
;;;14     static void VCMD_AckCommand(uint32_t u32Errno, const uint8_t *pu8Buffer, uint32_t u32Len)
000000  b570              PUSH     {r4-r6,lr}
;;;15     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;16         USB_SendBackData((u32Errno == 0 ? FALSE : TRUE), pu8Buffer, u32Len);
000008  2c00              CMP      r4,#0
00000a  d001              BEQ      |L5.16|
00000c  2101              MOVS     r1,#1
00000e  e000              B        |L5.18|
                  |L5.16|
000010  2100              MOVS     r1,#0
                  |L5.18|
000012  b2c8              UXTB     r0,r1
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  f7fffffe          BL       USB_SendBackData
;;;17     }
00001c  bd70              POP      {r4-r6,pc}
;;;18     
                          ENDP


                          AREA ||i.VCMD_WillResetCommandSerial||, CODE, READONLY, ALIGN=1

                  VCMD_WillResetCommandSerial PROC
;;;18     
;;;19     static uint32_t VCMD_WillResetCommandSerial(const uint8_t *pu8Buffer, uint32_t u32Len)
000000  4602              MOV      r2,r0
;;;20     {
;;;21         return 0;	//Reset in V6M_ProcessCommand
000002  2000              MOVS     r0,#0
;;;22     }
000004  4770              BX       lr
;;;23     
                          ENDP


                          AREA ||i._HID_CLR_CTRL_READY||, CODE, READONLY, ALIGN=2

                  _HID_CLR_CTRL_READY PROC
;;;94     
;;;95     static void _HID_CLR_CTRL_READY()
000000  4806              LDR      r0,|L7.28|
;;;96     {
;;;97     	_DRVUSB_CLEAR_EP_READY(0);
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2101              MOVS     r1,#1
000006  4308              ORRS     r0,r0,r1
000008  4904              LDR      r1,|L7.28|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;98     	_DRVUSB_CLEAR_EP_READY(1);
00000c  4608              MOV      r0,r1
00000e  6bc0              LDR      r0,[r0,#0x3c]
000010  2101              MOVS     r1,#1
000012  4308              ORRS     r0,r0,r1
000014  4901              LDR      r1,|L7.28|
000016  63c8              STR      r0,[r1,#0x3c]
;;;99     }
000018  4770              BX       lr
;;;100    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40060000

                          AREA ||i._HID_CLR_CTRL_READY_AND_TRIG_STALL||, CODE, READONLY, ALIGN=2

                  _HID_CLR_CTRL_READY_AND_TRIG_STALL PROC
;;;88     
;;;89     static void _HID_CLR_CTRL_READY_AND_TRIG_STALL()
000000  4806              LDR      r0,|L8.28|
;;;90     {
;;;91     	_DRVUSB_CLEAR_EP_READY_AND_TRIG_STALL(0);
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2103              MOVS     r1,#3
000006  4308              ORRS     r0,r0,r1
000008  4904              LDR      r1,|L8.28|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;92     	_DRVUSB_CLEAR_EP_READY_AND_TRIG_STALL(1);
00000c  4608              MOV      r0,r1
00000e  6bc0              LDR      r0,[r0,#0x3c]
000010  2103              MOVS     r1,#3
000012  4308              ORRS     r0,r0,r1
000014  4901              LDR      r1,|L8.28|
000016  63c8              STR      r0,[r1,#0x3c]
;;;93     }
000018  4770              BX       lr
;;;94     
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40060000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  au8CmdBuffer
                          %        62

                          AREA ||.data||, DATA, ALIGN=2

                  u32BufferLen
                          DCD      0x00000000
