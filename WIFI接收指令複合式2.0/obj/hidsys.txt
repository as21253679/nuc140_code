; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\hidsys.o --depend=.\obj\hidsys.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\hidsys.crf HIDSys.c]
                          THUMB

                          AREA ||i.HID_Close||, CODE, READONLY, ALIGN=1

                  HID_Close PROC
;;;145    
;;;146    void HID_Close(void)
000000  4770              BX       lr
;;;147    {
;;;148    
;;;149    }
;;;150    
                          ENDP


                          AREA ||i.HID_CtrlGetDescriptorIn||, CODE, READONLY, ALIGN=2

                  HID_CtrlGetDescriptorIn PROC
;;;579    
;;;580    void HID_CtrlGetDescriptorIn(void * pVoid)
000000  b570              PUSH     {r4-r6,lr}
;;;581    {
000002  4605              MOV      r5,r0
;;;582        uint32_t u32Len;
;;;583    
;;;584    
;;;585        DBG_PRINTF(" >>> 0x%08x %d size.\n", gpu8UsbBuf, gu32BytesInUsbBuf);
;;;586        
;;;587        if(gpu8UsbBuf)
000004  481e              LDR      r0,|L2.128|
000006  6800              LDR      r0,[r0,#0]  ; gpu8UsbBuf
000008  2800              CMP      r0,#0
00000a  d034              BEQ      |L2.118|
;;;588        {
;;;589    
;;;590            if(gu32BytesInUsbBuf == 0)
00000c  481d              LDR      r0,|L2.132|
00000e  6800              LDR      r0,[r0,#0]  ; gu32BytesInUsbBuf
000010  2800              CMP      r0,#0
000012  d109              BNE      |L2.40|
;;;591            {
;;;592                /* Zero packet */
;;;593                DrvUSB_DataIn(0, gpu8UsbBuf, 0);
000014  2200              MOVS     r2,#0
000016  481a              LDR      r0,|L2.128|
000018  6801              LDR      r1,[r0,#0]  ; gpu8UsbBuf
00001a  4610              MOV      r0,r2
00001c  f7fffffe          BL       DrvUSB_DataIn
;;;594                gpu8UsbBuf = 0;
000020  2000              MOVS     r0,#0
000022  4917              LDR      r1,|L2.128|
000024  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
000026  e029              B        |L2.124|
                  |L2.40|
;;;595            }
;;;596            else
;;;597            {
;;;598                u32Len = Minimum(gu32BytesInUsbBuf, HID_MAX_PACKET_SIZE_CTRL);
000028  4916              LDR      r1,|L2.132|
00002a  6809              LDR      r1,[r1,#0]  ; gu32BytesInUsbBuf
00002c  b288              UXTH     r0,r1
00002e  2108              MOVS     r1,#8
000030  f7fffffe          BL       Minimum
000034  4604              MOV      r4,r0
;;;599                DrvUSB_DataIn(0, gpu8UsbBuf, u32Len);
000036  4622              MOV      r2,r4
000038  4811              LDR      r0,|L2.128|
00003a  6801              LDR      r1,[r0,#0]  ; gpu8UsbBuf
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       DrvUSB_DataIn
;;;600                gpu8UsbBuf += u32Len;
000042  480f              LDR      r0,|L2.128|
000044  6800              LDR      r0,[r0,#0]  ; gpu8UsbBuf
000046  1900              ADDS     r0,r0,r4
000048  490d              LDR      r1,|L2.128|
00004a  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
;;;601                gu32BytesInUsbBuf -= u32Len;
00004c  480d              LDR      r0,|L2.132|
00004e  6800              LDR      r0,[r0,#0]  ; gu32BytesInUsbBuf
000050  1b00              SUBS     r0,r0,r4
000052  490c              LDR      r1,|L2.132|
000054  6008              STR      r0,[r1,#0]  ; gu32BytesInUsbBuf
;;;602                
;;;603                if(gu32BytesInUsbBuf == 0)
000056  4608              MOV      r0,r1
000058  6800              LDR      r0,[r0,#0]  ; gu32BytesInUsbBuf
00005a  2800              CMP      r0,#0
00005c  d10e              BNE      |L2.124|
;;;604                {
;;;605                    if(u32Len < HID_MAX_PACKET_SIZE_CTRL)
00005e  2c08              CMP      r4,#8
000060  d202              BCS      |L2.104|
;;;606                    {
;;;607                        /* This should be last IN packet due to it is less than UAC_MAX_PACKET_SIZE_EP0 */
;;;608                        gpu8UsbBuf = 0;
000062  4907              LDR      r1,|L2.128|
000064  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
000066  e009              B        |L2.124|
                  |L2.104|
;;;609                    }
;;;610                    else
;;;611                    {
;;;612                        if(!gIsOverRequest)
000068  4807              LDR      r0,|L2.136|
00006a  7800              LDRB     r0,[r0,#0]  ; gIsOverRequest
00006c  2800              CMP      r0,#0
00006e  d105              BNE      |L2.124|
;;;613                        {
;;;614                            /* This should be the last IN packet because there is no more data to 
;;;615                               transfer and it is not over request transfer */
;;;616                            gpu8UsbBuf = 0;
000070  4903              LDR      r1,|L2.128|
000072  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
000074  e002              B        |L2.124|
                  |L2.118|
;;;617                        }
;;;618                     }
;;;619                }
;;;620                
;;;621            }
;;;622        }
;;;623        else
;;;624        {
;;;625            /* The EP id 1 should always be used as control (OUT) endpoint */
;;;626            _DRVUSB_TRIG_EP(1,0x00);
000076  2000              MOVS     r0,#0
000078  4904              LDR      r1,|L2.140|
00007a  6348              STR      r0,[r1,#0x34]
                  |L2.124|
;;;627        }
;;;628    }
00007c  bd70              POP      {r4-r6,pc}
;;;629    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      gpu8UsbBuf
                  |L2.132|
                          DCD      gu32BytesInUsbBuf
                  |L2.136|
                          DCD      gIsOverRequest
                  |L2.140|
                          DCD      0x40060000

                          AREA ||i.HID_CtrlGetDescriptorOut||, CODE, READONLY, ALIGN=2

                  HID_CtrlGetDescriptorOut PROC
;;;572    
;;;573    void HID_CtrlGetDescriptorOut(void * pVoid)
000000  2100              MOVS     r1,#0
;;;574    {
;;;575        gu32BytesInUsbBuf = 0;
000002  4a03              LDR      r2,|L3.16|
000004  6011              STR      r1,[r2,#0]  ; gu32BytesInUsbBuf
;;;576        gpu8UsbBuf = 0;
000006  4a03              LDR      r2,|L3.20|
000008  6011              STR      r1,[r2,#0]  ; gpu8UsbBuf
;;;577        gIsOverRequest = 0;
00000a  4a03              LDR      r2,|L3.24|
00000c  7011              STRB     r1,[r2,#0]
;;;578    }
00000e  4770              BX       lr
;;;579    
                          ENDP

                  |L3.16|
                          DCD      gu32BytesInUsbBuf
                  |L3.20|
                          DCD      gpu8UsbBuf
                  |L3.24|
                          DCD      gIsOverRequest

                          AREA ||i.HID_CtrlSetupDataOutReport||, CODE, READONLY, ALIGN=1

                  HID_CtrlSetupDataOutReport PROC
;;;435    
;;;436    void HID_CtrlSetupDataOutReport(void * pVoid)
000000  b538              PUSH     {r3-r5,lr}
;;;437    {
000002  4605              MOV      r5,r0
;;;438    	uint8_t *pu8EpBuf;
;;;439    	uint32_t size;
;;;440    
;;;441    	pu8EpBuf = DrvUSB_GetOutData(CTRL_EP_NUM, &size);
000004  4669              MOV      r1,sp
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       DrvUSB_GetOutData
00000c  4604              MOV      r4,r0
;;;442    	
;;;443    	/* CAPS Lock LED On/Off */
;;;444    	if(pu8EpBuf[0] == 0x01){
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d10c              BNE      |L4.46|
;;;445    		if(pu8EpBuf[1] & 0x02){
000014  7860              LDRB     r0,[r4,#1]
000016  2102              MOVS     r1,#2
000018  4208              TST      r0,r1
00001a  d004              BEQ      |L4.38|
;;;446    			/* Turn On CapsLock LED */
;;;447    			DrvGPIO_ClrBit(E_GPB, 4);
00001c  2104              MOVS     r1,#4
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       DrvGPIO_ClrBit
000024  e003              B        |L4.46|
                  |L4.38|
;;;448    		}else{
;;;449    			/* Turn Off CapsLock LED */
;;;450    			DrvGPIO_SetBit(E_GPB, 4);
000026  2104              MOVS     r1,#4
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       DrvGPIO_SetBit
                  |L4.46|
;;;451    		}
;;;452    	}	
;;;453    	
;;;454    	DrvUSB_DataIn(0, NULL, 0);			   
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  4610              MOV      r0,r2
000034  f7fffffe          BL       DrvUSB_DataIn
;;;455    	
;;;456    }
000038  bd38              POP      {r3-r5,pc}
;;;457    
                          ENDP


                          AREA ||i.HID_CtrlSetupGetDescriptor||, CODE, READONLY, ALIGN=2

                  HID_CtrlSetupGetDescriptor PROC
;;;646    /*************************************************************************/
;;;647    void HID_CtrlSetupGetDescriptor(void * pVoid)
000000  b5f8              PUSH     {r3-r7,lr}
;;;648    {
000002  4605              MOV      r5,r0
;;;649        S_HID_DEVICE *psDevice = (S_HID_DEVICE *) pVoid;
000004  462f              MOV      r7,r5
;;;650        S_DRVUSB_DEVICE *pUsbDevice = (S_DRVUSB_DEVICE *)psDevice->device;
000006  6c3c              LDR      r4,[r7,#0x40]
;;;651        uint16_t u16Len;
;;;652    
;;;653        u16Len = 0;
000008  2600              MOVS     r6,#0
;;;654        u16Len = pUsbDevice->au8Setup[7];
00000a  2093              MOVS     r0,#0x93
00000c  5d06              LDRB     r6,[r0,r4]
;;;655        u16Len <<= 8;
00000e  0236              LSLS     r6,r6,#8
;;;656        u16Len += pUsbDevice->au8Setup[6];
000010  2092              MOVS     r0,#0x92
000012  5d00              LDRB     r0,[r0,r4]
000014  1980              ADDS     r0,r0,r6
000016  b286              UXTH     r6,r0
;;;657        
;;;658        gIsOverRequest = 0;
000018  2000              MOVS     r0,#0
00001a  4940              LDR      r1,|L5.284|
00001c  7008              STRB     r0,[r1,#0]
;;;659        gu32BytesInUsbBuf = 0;
00001e  4940              LDR      r1,|L5.288|
000020  6008              STR      r0,[r1,#0]  ; gu32BytesInUsbBuf
;;;660        gpu8UsbBuf = 0;
000022  4940              LDR      r1,|L5.292|
000024  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
;;;661        switch (pUsbDevice->au8Setup[3])
000026  208f              MOVS     r0,#0x8f
000028  5d00              LDRB     r0,[r0,r4]
00002a  2803              CMP      r0,#3
00002c  d03d              BEQ      |L5.170|
00002e  dc04              BGT      |L5.58|
000030  2801              CMP      r0,#1
000032  d007              BEQ      |L5.68|
000034  2802              CMP      r0,#2
000036  d16c              BNE      |L5.274|
000038  e00f              B        |L5.90|
                  |L5.58|
00003a  2821              CMP      r0,#0x21
00003c  d016              BEQ      |L5.108|
00003e  2822              CMP      r0,#0x22
000040  d167              BNE      |L5.274|
000042  e01b              B        |L5.124|
                  |L5.68|
;;;662        {
;;;663            // Get Device Descriptor
;;;664        case DESC_DEVICE:
;;;665        {
;;;666            HID_PrepareDescriptors(g_HID_sDevice.au8DeviceDescriptor, LEN_DEVICE, u16Len, HID_MAX_PACKET_SIZE_CTRL);
000044  4938              LDR      r1,|L5.296|
000046  2308              MOVS     r3,#8
000048  4632              MOV      r2,r6
00004a  68c8              LDR      r0,[r1,#0xc]  ; g_HID_sDevice
00004c  2112              MOVS     r1,#0x12
00004e  f7fffffe          BL       HID_PrepareDescriptors
;;;667    
;;;668            /* Prepare the OUT to avoid HOST stop data phase without all data transfered. */
;;;669            _DRVUSB_TRIG_EP(1,0x00);
000052  2000              MOVS     r0,#0
000054  4935              LDR      r1,|L5.300|
000056  6348              STR      r0,[r1,#0x34]
;;;670    
;;;671            break;
000058  e05e              B        |L5.280|
                  |L5.90|
;;;672        }
;;;673    
;;;674        // Get Configuration Descriptor
;;;675        case DESC_CONFIG:
;;;676        {   
;;;677            HID_PrepareDescriptors(g_HID_sDevice.au8ConfigDescriptor, g_HID_au8ConfigDescriptor[2], u16Len, HID_MAX_PACKET_SIZE_CTRL);
00005a  4a35              LDR      r2,|L5.304|
00005c  7891              LDRB     r1,[r2,#2]  ; g_HID_au8ConfigDescriptor
00005e  4a32              LDR      r2,|L5.296|
000060  2308              MOVS     r3,#8
000062  6910              LDR      r0,[r2,#0x10]  ; g_HID_sDevice
000064  4632              MOV      r2,r6
000066  f7fffffe          BL       HID_PrepareDescriptors
;;;678            break;
00006a  e055              B        |L5.280|
                  |L5.108|
;;;679        }
;;;680            // Get HID Descriptor
;;;681        case DESC_HID:
;;;682        {
;;;683            HID_PrepareDescriptors(g_HID_sDevice.pu8HIDDescriptor, LEN_HID, u16Len, HID_MAX_PACKET_SIZE_CTRL);
00006c  492e              LDR      r1,|L5.296|
00006e  2308              MOVS     r3,#8
000070  4632              MOV      r2,r6
000072  6a88              LDR      r0,[r1,#0x28]  ; g_HID_sDevice
000074  2109              MOVS     r1,#9
000076  f7fffffe          BL       HID_PrepareDescriptors
;;;684            break;
00007a  e04d              B        |L5.280|
                  |L5.124|
;;;685        }
;;;686            // Get Report Descriptor
;;;687        case DESC_HID_RPT:
;;;688        {
;;;689            if (pUsbDevice->au8Setup[4] == 0x0)     /* mouse */
00007c  2090              MOVS     r0,#0x90
00007e  5d00              LDRB     r0,[r0,r4]
000080  2800              CMP      r0,#0
000082  d106              BNE      |L5.146|
;;;690    					HID_PrepareDescriptors(g_HID_sDevice.pu8ReportDescriptor_MS, g_HID_sDevice.u32ReportDescriptorSize_MS, u16Len, HID_MAX_PACKET_SIZE_CTRL);
000084  4a28              LDR      r2,|L5.296|
000086  69d1              LDR      r1,[r2,#0x1c]  ; g_HID_sDevice
000088  2308              MOVS     r3,#8
00008a  6990              LDR      r0,[r2,#0x18]  ; g_HID_sDevice
00008c  4632              MOV      r2,r6
00008e  f7fffffe          BL       HID_PrepareDescriptors
                  |L5.146|
;;;691    				if (pUsbDevice->au8Setup[4] == 0x1)     /* keyboard */
000092  2090              MOVS     r0,#0x90
000094  5d00              LDRB     r0,[r0,r4]
000096  2801              CMP      r0,#1
000098  d106              BNE      |L5.168|
;;;692    					HID_PrepareDescriptors(g_HID_sDevice.pu8ReportDescriptor_KB, g_HID_sDevice.u32ReportDescriptorSize_KB, u16Len, HID_MAX_PACKET_SIZE_CTRL);
00009a  4a23              LDR      r2,|L5.296|
00009c  6a51              LDR      r1,[r2,#0x24]  ; g_HID_sDevice
00009e  2308              MOVS     r3,#8
0000a0  6a10              LDR      r0,[r2,#0x20]  ; g_HID_sDevice
0000a2  4632              MOV      r2,r6
0000a4  f7fffffe          BL       HID_PrepareDescriptors
                  |L5.168|
;;;693            break;
0000a8  e036              B        |L5.280|
                  |L5.170|
;;;694        }
;;;695            // Get String Descriptor
;;;696        case DESC_STRING:
;;;697        {
;;;698            // Get Language
;;;699            if (pUsbDevice->au8Setup[2] == 0)
0000aa  208e              MOVS     r0,#0x8e
0000ac  5d00              LDRB     r0,[r0,r4]
0000ae  2800              CMP      r0,#0
0000b0  d106              BNE      |L5.192|
;;;700            {
;;;701                HID_PrepareDescriptors(g_HID_au8StringLang, 4, u16Len, HID_MAX_PACKET_SIZE_CTRL);
0000b2  2308              MOVS     r3,#8
0000b4  4632              MOV      r2,r6
0000b6  2104              MOVS     r1,#4
0000b8  481e              LDR      r0,|L5.308|
0000ba  f7fffffe          BL       HID_PrepareDescriptors
0000be  e027              B        |L5.272|
                  |L5.192|
;;;702            }
;;;703            else
;;;704            {
;;;705                // Get String Descriptor
;;;706                switch (pUsbDevice->au8Setup[2])
0000c0  208e              MOVS     r0,#0x8e
0000c2  5d00              LDRB     r0,[r0,r4]
0000c4  2801              CMP      r0,#1
0000c6  d004              BEQ      |L5.210|
0000c8  2802              CMP      r0,#2
0000ca  d00c              BEQ      |L5.230|
0000cc  2803              CMP      r0,#3
0000ce  d11b              BNE      |L5.264|
0000d0  e013              B        |L5.250|
                  |L5.210|
;;;707                {
;;;708                case 1:
;;;709                    HID_PrepareDescriptors((const uint8_t *)g_HID_sDevice.sVendorInfo.psVendorStringDesc, g_HID_sDevice.sVendorInfo.psVendorStringDesc->byLength, u16Len, HID_MAX_PACKET_SIZE_CTRL);
0000d2  4a15              LDR      r2,|L5.296|
0000d4  6852              LDR      r2,[r2,#4]  ; g_HID_sDevice
0000d6  7811              LDRB     r1,[r2,#0]
0000d8  4a13              LDR      r2,|L5.296|
0000da  2308              MOVS     r3,#8
0000dc  6850              LDR      r0,[r2,#4]  ; g_HID_sDevice
0000de  4632              MOV      r2,r6
0000e0  f7fffffe          BL       HID_PrepareDescriptors
;;;710                    break;
0000e4  e013              B        |L5.270|
                  |L5.230|
;;;711    
;;;712                case 2:
;;;713                    HID_PrepareDescriptors((const uint8_t *)g_HID_sDevice.sVendorInfo.psProductStringDesc, g_HID_sDevice.sVendorInfo.psProductStringDesc->byLength, u16Len, HID_MAX_PACKET_SIZE_CTRL);
0000e6  4a10              LDR      r2,|L5.296|
0000e8  6892              LDR      r2,[r2,#8]  ; g_HID_sDevice
0000ea  7811              LDRB     r1,[r2,#0]
0000ec  4a0e              LDR      r2,|L5.296|
0000ee  2308              MOVS     r3,#8
0000f0  6890              LDR      r0,[r2,#8]  ; g_HID_sDevice
0000f2  4632              MOV      r2,r6
0000f4  f7fffffe          BL       HID_PrepareDescriptors
;;;714                   
;;;715                    break;
0000f8  e009              B        |L5.270|
                  |L5.250|
;;;716    
;;;717                case 3:
;;;718                    HID_PrepareDescriptors(g_HID_au8StringSerial, g_HID_au8StringSerial[0], u16Len, HID_MAX_PACKET_SIZE_CTRL);
0000fa  480f              LDR      r0,|L5.312|
0000fc  7801              LDRB     r1,[r0,#0]  ; g_HID_au8StringSerial
0000fe  2308              MOVS     r3,#8
000100  4632              MOV      r2,r6
000102  f7fffffe          BL       HID_PrepareDescriptors
;;;719                    break;
000106  e002              B        |L5.270|
                  |L5.264|
;;;720    
;;;721                default:
;;;722                    /* Not support. Reply STALL. */
;;;723                    DrvUSB_ClrCtrlReadyAndTrigStall();
000108  f7fffffe          BL       DrvUSB_ClrCtrlReadyAndTrigStall
00010c  bf00              NOP                            ;706
                  |L5.270|
00010e  bf00              NOP                            ;710
                  |L5.272|
;;;724                }
;;;725            }
;;;726    
;;;727            break;
000110  e002              B        |L5.280|
                  |L5.274|
;;;728        }
;;;729        default:
;;;730            /* Not support. Reply STALL. */
;;;731            DrvUSB_ClrCtrlReadyAndTrigStall();
000112  f7fffffe          BL       DrvUSB_ClrCtrlReadyAndTrigStall
000116  bf00              NOP                            ;661
                  |L5.280|
000118  bf00              NOP                            ;671
;;;732        }
;;;733    }
00011a  bdf8              POP      {r3-r7,pc}
;;;734    
                          ENDP

                  |L5.284|
                          DCD      gIsOverRequest
                  |L5.288|
                          DCD      gu32BytesInUsbBuf
                  |L5.292|
                          DCD      gpu8UsbBuf
                  |L5.296|
                          DCD      g_HID_sDevice
                  |L5.300|
                          DCD      0x40060000
                  |L5.304|
                          DCD      g_HID_au8ConfigDescriptor
                  |L5.308|
                          DCD      g_HID_au8StringLang
                  |L5.312|
                          DCD      g_HID_au8StringSerial

                          AREA ||i.HID_CtrlSetupGetProtocol||, CODE, READONLY, ALIGN=1

                  HID_CtrlSetupGetProtocol PROC
;;;525    /*************************************************************************/
;;;526    void HID_CtrlSetupGetProtocol(void * pVoid)
000000  b570              PUSH     {r4-r6,lr}
;;;527    {
000002  4604              MOV      r4,r0
;;;528        S_HID_DEVICE *psDevice = (S_HID_DEVICE *) pVoid;
000004  4625              MOV      r5,r4
;;;529        
;;;530        DrvUSB_DataIn(0, (const uint8_t *)&psDevice->isReportProtocol, 1);
000006  2201              MOVS     r2,#1
000008  4629              MOV      r1,r5
00000a  313e              ADDS     r1,r1,#0x3e
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       DrvUSB_DataIn
;;;531    }
000012  bd70              POP      {r4-r6,pc}
;;;532    
                          ENDP


                          AREA ||i.HID_CtrlSetupSetIdle||, CODE, READONLY, ALIGN=2

                  HID_CtrlSetupSetIdle PROC
;;;474    /*************************************************************************/
;;;475    void HID_CtrlSetupSetIdle(void * pVoid)
000000  4904              LDR      r1,|L7.20|
;;;476    {
;;;477        _DRVUSB_SET_EP_TOG_BIT(0, 0);
000002  6a89              LDR      r1,[r1,#0x28]
000004  2280              MOVS     r2,#0x80
000006  4311              ORRS     r1,r1,r2
000008  4a02              LDR      r2,|L7.20|
00000a  6291              STR      r1,[r2,#0x28]
;;;478        _DRVUSB_TRIG_EP(0,0x00);
00000c  2100              MOVS     r1,#0
00000e  6251              STR      r1,[r2,#0x24]
;;;479        
;;;480        //DBG_PRINTF("Set idle\n");
;;;481    }
000010  4770              BX       lr
;;;482    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40060000

                          AREA ||i.HID_CtrlSetupSetProtocol||, CODE, READONLY, ALIGN=2

                  HID_CtrlSetupSetProtocol PROC
;;;497    /*************************************************************************/
;;;498    void HID_CtrlSetupSetProtocol(void * pVoid)
000000  b510              PUSH     {r4,lr}
;;;499    {
;;;500        S_HID_DEVICE *psDevice = (S_HID_DEVICE *) pVoid;
000002  4601              MOV      r1,r0
;;;501        S_DRVUSB_DEVICE *pUsbDevice = (S_DRVUSB_DEVICE *)psDevice->device;
000004  6c0a              LDR      r2,[r1,#0x40]
;;;502        
;;;503        psDevice->isReportProtocol = pUsbDevice->au8Setup[2];
000006  238e              MOVS     r3,#0x8e
000008  5c9b              LDRB     r3,[r3,r2]
00000a  b25c              SXTB     r4,r3
00000c  233e              MOVS     r3,#0x3e
00000e  545c              STRB     r4,[r3,r1]
;;;504    
;;;505        _DRVUSB_SET_EP_TOG_BIT(0,0);
000010  4b04              LDR      r3,|L8.36|
000012  6a9b              LDR      r3,[r3,#0x28]
000014  2480              MOVS     r4,#0x80
000016  4323              ORRS     r3,r3,r4
000018  4c02              LDR      r4,|L8.36|
00001a  62a3              STR      r3,[r4,#0x28]
;;;506        _DRVUSB_TRIG_EP(0,0x00);
00001c  2300              MOVS     r3,#0
00001e  6263              STR      r3,[r4,#0x24]
;;;507    }
000020  bd10              POP      {r4,pc}
;;;508    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40060000

                          AREA ||i.HID_CtrlSetupSetReport||, CODE, READONLY, ALIGN=2

                  HID_CtrlSetupSetReport PROC
;;;395    /*************************************************************************/
;;;396    void HID_CtrlSetupSetReport(void * pVoid)
000000  b570              PUSH     {r4-r6,lr}
;;;397    {
000002  4605              MOV      r5,r0
;;;398        S_DRVUSB_DEVICE *psDevice = (S_DRVUSB_DEVICE *)((S_HID_DEVICE *)pVoid)->device;
000004  6c2c              LDR      r4,[r5,#0x40]
;;;399    
;;;400        //DBG_PRINTF("HID - Set Report");
;;;401        if(psDevice->au8Setup[3] == 1)
000006  208f              MOVS     r0,#0x8f
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d108              BNE      |L9.32|
;;;402        {
;;;403            /* Report Type = input */
;;;404    
;;;405            // Trigger next Control Out DATA1 Transaction.
;;;406            _DRVUSB_SET_EP_TOG_BIT(1,0);
00000e  4819              LDR      r0,|L9.116|
000010  6b80              LDR      r0,[r0,#0x38]
000012  2180              MOVS     r1,#0x80
000014  4308              ORRS     r0,r0,r1
000016  4917              LDR      r1,|L9.116|
000018  6388              STR      r0,[r1,#0x38]
;;;407            _DRVUSB_TRIG_EP(1, 0);
00001a  2000              MOVS     r0,#0
00001c  6348              STR      r0,[r1,#0x34]
00001e  e027              B        |L9.112|
                  |L9.32|
;;;408    
;;;409            //DBG_PRINTF(" - Input\n");
;;;410        }
;;;411        else if (psDevice->au8Setup[3] == 2)
000020  208f              MOVS     r0,#0x8f
000022  5d00              LDRB     r0,[r0,r4]
000024  2802              CMP      r0,#2
000026  d104              BNE      |L9.50|
;;;412        {
;;;413            //_DRVUSB_SET_EP_TOG_BIT(1, 0);
;;;414            //_DRVUSB_TRIG_EP(1, 0x00);
;;;415    				DrvUSB_DataOutTrigger(CTRL_EP_NUM, HID_MAX_PACKET_SIZE_CTRL);
000028  2108              MOVS     r1,#8
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       DrvUSB_DataOutTrigger
000030  e01e              B        |L9.112|
                  |L9.50|
;;;416    
;;;417            //DBG_PRINTF(" - Output\n");
;;;418        }
;;;419        else if (psDevice->au8Setup[3] == 3)
000032  208f              MOVS     r0,#0x8f
000034  5d00              LDRB     r0,[r0,r4]
000036  2803              CMP      r0,#3
000038  d10b              BNE      |L9.82|
;;;420        {
;;;421            /* Request Type = Feature */
;;;422            _DRVUSB_SET_EP_TOG_BIT(1,0);
00003a  480e              LDR      r0,|L9.116|
00003c  6b80              LDR      r0,[r0,#0x38]
00003e  2180              MOVS     r1,#0x80
000040  4308              ORRS     r0,r0,r1
000042  490c              LDR      r1,|L9.116|
000044  6388              STR      r0,[r1,#0x38]
;;;423            _DRVUSB_TRIG_EP(1,0x00);
000046  2000              MOVS     r0,#0
000048  6348              STR      r0,[r1,#0x34]
;;;424    				DrvUSB_DataOutTrigger(CTRL_EP_NUM, HID_MAX_PACKET_SIZE_CTRL);
00004a  2108              MOVS     r1,#8
00004c  f7fffffe          BL       DrvUSB_DataOutTrigger
000050  e00e              B        |L9.112|
                  |L9.82|
;;;425    
;;;426            //DBG_PRINTF(" - Feature\n");
;;;427        }
;;;428        else
;;;429        {
;;;430            // Not support. Reply STALL.
;;;431            //DBG_PRINTF(" - Unknown\n");
;;;432            _HID_CLR_CTRL_READY_AND_TRIG_STALL();
000052  bf00              NOP      
000054  4807              LDR      r0,|L9.116|
000056  6ac0              LDR      r0,[r0,#0x2c]
000058  2103              MOVS     r1,#3
00005a  4308              ORRS     r0,r0,r1
00005c  4905              LDR      r1,|L9.116|
00005e  62c8              STR      r0,[r1,#0x2c]
000060  4608              MOV      r0,r1
000062  6bc0              LDR      r0,[r0,#0x3c]
000064  2103              MOVS     r1,#3
000066  4308              ORRS     r0,r0,r1
000068  4902              LDR      r1,|L9.116|
00006a  63c8              STR      r0,[r1,#0x3c]
00006c  bf00              NOP      
00006e  bf00              NOP      
                  |L9.112|
;;;433        }
;;;434    }
000070  bd70              POP      {r4-r6,pc}
;;;435    
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
                          DCD      0x40060000

                          AREA ||i.HID_GetVendorInfo||, CODE, READONLY, ALIGN=2

                  HID_GetVendorInfo PROC
;;;207    
;;;208    int32_t HID_GetVendorInfo(S_VENDOR_INFO *psVendorInfo)
000000  4601              MOV      r1,r0
;;;209    {
;;;210        if (! psVendorInfo)
000002  2900              CMP      r1,#0
000004  d101              BNE      |L10.10|
;;;211        {
;;;212            //return (E_HID_NULL_POINTER);
;;;213            return -1;
000006  1e40              SUBS     r0,r0,#1
                  |L10.8|
;;;214        }
;;;215    
;;;216        psVendorInfo->u16VendorId = g_HID_sDevice.sVendorInfo.u16VendorId;
;;;217        psVendorInfo->u16ProductId = g_HID_sDevice.sVendorInfo.u16ProductId;
;;;218        psVendorInfo->psVendorStringDesc = g_HID_sDevice.sVendorInfo.psVendorStringDesc;
;;;219        psVendorInfo->psProductStringDesc = g_HID_sDevice.sVendorInfo.psProductStringDesc;
;;;220        
;;;221        return 0;
;;;222    }
000008  4770              BX       lr
                  |L10.10|
00000a  4807              LDR      r0,|L10.40|
00000c  8800              LDRH     r0,[r0,#0]            ;216  ; g_HID_sDevice
00000e  8008              STRH     r0,[r1,#0]            ;216
000010  4805              LDR      r0,|L10.40|
000012  8840              LDRH     r0,[r0,#2]            ;217  ; g_HID_sDevice
000014  8048              STRH     r0,[r1,#2]            ;217
000016  4804              LDR      r0,|L10.40|
000018  6840              LDR      r0,[r0,#4]            ;218  ; g_HID_sDevice
00001a  6048              STR      r0,[r1,#4]            ;218
00001c  4802              LDR      r0,|L10.40|
00001e  6880              LDR      r0,[r0,#8]            ;219  ; g_HID_sDevice
000020  6088              STR      r0,[r1,#8]            ;219
000022  2000              MOVS     r0,#0                 ;221
000024  e7f0              B        |L10.8|
;;;223    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_IntInCallback_KB||, CODE, READONLY, ALIGN=1

                  HID_IntInCallback_KB PROC
;;;200    
;;;201    void HID_IntInCallback_KB(void * pVoid)
000000  4601              MOV      r1,r0
;;;202    {
;;;203        S_HID_DEVICE* psDevice = (S_HID_DEVICE*) pVoid;
;;;204        
;;;205        psDevice->isReportReady_KB = 0;
000002  2300              MOVS     r3,#0
000004  223d              MOVS     r2,#0x3d
000006  5453              STRB     r3,[r2,r1]
;;;206    }
000008  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.HID_IntInCallback_MS||, CODE, READONLY, ALIGN=1

                  HID_IntInCallback_MS PROC
;;;193    /*************************************************************************/
;;;194    void HID_IntInCallback_MS(void * pVoid)
000000  4601              MOV      r1,r0
;;;195    {
;;;196        S_HID_DEVICE* psDevice = (S_HID_DEVICE*) pVoid;
;;;197        
;;;198        psDevice->isReportReady_MS = 0;
000002  2300              MOVS     r3,#0
000004  223c              MOVS     r2,#0x3c
000006  5453              STRB     r3,[r2,r1]
;;;199    }
000008  4770              BX       lr
;;;200    
                          ENDP


                          AREA ||i.HID_IsConfigureValue||, CODE, READONLY, ALIGN=2

                  HID_IsConfigureValue PROC
;;;373    /*************************************************************************/
;;;374    static int32_t HID_IsConfigureValue(uint8_t u8ConfigureValue)
000000  4601              MOV      r1,r0
;;;375    {
;;;376        return (u8ConfigureValue == g_HID_au8ConfigDescriptor[5]);
000002  4804              LDR      r0,|L13.20|
000004  7940              LDRB     r0,[r0,#5]  ; g_HID_au8ConfigDescriptor
000006  4288              CMP      r0,r1
000008  d101              BNE      |L13.14|
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;377    }
00000c  4770              BX       lr
                  |L13.14|
00000e  2000              MOVS     r0,#0                 ;376
000010  e7fc              B        |L13.12|
;;;378    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      g_HID_au8ConfigDescriptor

                          AREA ||i.HID_Open||, CODE, READONLY, ALIGN=2

                  HID_Open PROC
;;;120    /*************************************************************************/
;;;121    int32_t HID_Open(void)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123        int32_t i32Ret = 0;
000002  2400              MOVS     r4,#0
;;;124        
;;;125        g_HID_sDevice.isReportProtocol = 1;
000004  2101              MOVS     r1,#1
000006  4814              LDR      r0,|L14.88|
000008  7781              STRB     r1,[r0,#0x1e]
;;;126    
;;;127        g_HID_sDevice.device = (void *)DrvUSB_InstallClassDevice(&sHidUsbClass);
00000a  4814              LDR      r0,|L14.92|
00000c  f7fffffe          BL       DrvUSB_InstallClassDevice
000010  4911              LDR      r1,|L14.88|
000012  3920              SUBS     r1,r1,#0x20
000014  6408              STR      r0,[r1,#0x40]  ; g_HID_sDevice
;;;128        
;;;129        g_HID_sDevice.au8DeviceDescriptor = g_HID_au8DeviceDescriptor;
000016  4812              LDR      r0,|L14.96|
000018  60c8              STR      r0,[r1,#0xc]  ; g_HID_sDevice
;;;130        g_HID_sDevice.au8ConfigDescriptor = g_HID_au8ConfigDescriptor;
00001a  4812              LDR      r0,|L14.100|
00001c  6108              STR      r0,[r1,#0x10]  ; g_HID_sDevice
;;;131        
;;;132        g_HID_sDevice.pu8HIDDescriptor = g_HID_sDevice.au8ConfigDescriptor + LEN_CONFIG + LEN_INTERFACE;
00001e  4608              MOV      r0,r1
000020  6900              LDR      r0,[r0,#0x10]  ; g_HID_sDevice
000022  3012              ADDS     r0,r0,#0x12
000024  6288              STR      r0,[r1,#0x28]  ; g_HID_sDevice
;;;133        g_HID_sDevice.pu8IntInEPDescriptor = g_HID_sDevice.au8ConfigDescriptor + LEN_CONFIG + LEN_INTERFACE + LEN_HID;
000026  4608              MOV      r0,r1
000028  6900              LDR      r0,[r0,#0x10]  ; g_HID_sDevice
00002a  301b              ADDS     r0,r0,#0x1b
00002c  6148              STR      r0,[r1,#0x14]  ; g_HID_sDevice
;;;134        
;;;135        g_HID_sDevice.sVendorInfo.psVendorStringDesc = &g_HID_sVendorStringDesc;
00002e  480e              LDR      r0,|L14.104|
000030  6048              STR      r0,[r1,#4]  ; g_HID_sDevice
;;;136        g_HID_sDevice.sVendorInfo.psProductStringDesc = &g_HID_sProductStringDesc;
000032  480e              LDR      r0,|L14.108|
000034  6088              STR      r0,[r1,#8]  ; g_HID_sDevice
;;;137        g_HID_sDevice.sVendorInfo.u16VendorId = *(uint16_t *)&g_HID_sDevice.au8DeviceDescriptor[8];
000036  4608              MOV      r0,r1
000038  68c0              LDR      r0,[r0,#0xc]  ; g_HID_sDevice
00003a  8900              LDRH     r0,[r0,#8]
00003c  8008              STRH     r0,[r1,#0]
;;;138        g_HID_sDevice.sVendorInfo.u16ProductId = *(uint16_t *)&g_HID_sDevice.au8DeviceDescriptor[10];
00003e  4608              MOV      r0,r1
000040  68c0              LDR      r0,[r0,#0xc]  ; g_HID_sDevice
000042  8940              LDRH     r0,[r0,#0xa]
000044  8048              STRH     r0,[r1,#2]
;;;139    
;;;140        i32Ret = DrvUSB_InstallCtrlHandler(g_HID_sDevice.device, g_asCtrlCallbackEntry, 
000046  220d              MOVS     r2,#0xd
000048  6c08              LDR      r0,[r1,#0x40]  ; g_HID_sDevice
00004a  4909              LDR      r1,|L14.112|
00004c  f7fffffe          BL       DrvUSB_InstallCtrlHandler
000050  4604              MOV      r4,r0
;;;141                        sizeof(g_asCtrlCallbackEntry) / sizeof(g_asCtrlCallbackEntry[0]));
;;;142    
;;;143        return i32Ret;
000052  4620              MOV      r0,r4
;;;144    }
000054  bd10              POP      {r4,pc}
;;;145    
                          ENDP

000056  0000              DCW      0x0000
                  |L14.88|
                          DCD      g_HID_sDevice+0x20
                  |L14.92|
                          DCD      sHidUsbClass
                  |L14.96|
                          DCD      g_HID_au8DeviceDescriptor
                  |L14.100|
                          DCD      g_HID_au8ConfigDescriptor
                  |L14.104|
                          DCD      g_HID_sVendorStringDesc
                  |L14.108|
                          DCD      g_HID_sProductStringDesc
                  |L14.112|
                          DCD      g_asCtrlCallbackEntry

                          AREA ||i.HID_PrepareDescriptors||, CODE, READONLY, ALIGN=2

                  HID_PrepareDescriptors PROC
;;;543    
;;;544    void HID_PrepareDescriptors(const uint8_t *pu8Descriptor, uint32_t u32DescriptorSize, uint32_t u32RequestSize, uint32_t u32MaxPacketSize)
000000  b5f8              PUSH     {r3-r7,lr}
;;;545    {
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461c              MOV      r4,r3
;;;546        
;;;547        gu32BytesInUsbBuf = u32RequestSize;
00000a  4816              LDR      r0,|L15.100|
00000c  6006              STR      r6,[r0,#0]  ; gu32BytesInUsbBuf
;;;548        if(u32RequestSize > u32DescriptorSize)
00000e  42ae              CMP      r6,r5
000010  d903              BLS      |L15.26|
;;;549        {
;;;550            gu32BytesInUsbBuf = u32DescriptorSize;
000012  6005              STR      r5,[r0,#0]  ; gu32BytesInUsbBuf
;;;551            gIsOverRequest = 1;
000014  2001              MOVS     r0,#1
000016  4914              LDR      r1,|L15.104|
000018  7008              STRB     r0,[r1,#0]
                  |L15.26|
;;;552        }
;;;553        gpu8UsbBuf = pu8Descriptor;
00001a  4814              LDR      r0,|L15.108|
00001c  6007              STR      r7,[r0,#0]  ; gpu8UsbBuf
;;;554    
;;;555        DBG_PRINTF("Get descriptor 0x%08x %d size.\n", pu8Descriptor, u32DescriptorSize);
;;;556    
;;;557        if(gu32BytesInUsbBuf < u32MaxPacketSize)
00001e  4811              LDR      r0,|L15.100|
000020  6800              LDR      r0,[r0,#0]  ; gu32BytesInUsbBuf
000022  42a0              CMP      r0,r4
000024  d20c              BCS      |L15.64|
;;;558        {
;;;559            DrvUSB_DataIn(0, gpu8UsbBuf, gu32BytesInUsbBuf); 
000026  480f              LDR      r0,|L15.100|
000028  6802              LDR      r2,[r0,#0]  ; gu32BytesInUsbBuf
00002a  4810              LDR      r0,|L15.108|
00002c  6801              LDR      r1,[r0,#0]  ; gpu8UsbBuf
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       DrvUSB_DataIn
;;;560            gpu8UsbBuf = 0;
000034  2000              MOVS     r0,#0
000036  490d              LDR      r1,|L15.108|
000038  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
;;;561            gu32BytesInUsbBuf = 0;   
00003a  490a              LDR      r1,|L15.100|
00003c  6008              STR      r0,[r1,#0]  ; gu32BytesInUsbBuf
00003e  e00f              B        |L15.96|
                  |L15.64|
;;;562        }
;;;563        else
;;;564        {
;;;565            DrvUSB_DataIn(0, gpu8UsbBuf, u32MaxPacketSize);
000040  4622              MOV      r2,r4
000042  480a              LDR      r0,|L15.108|
000044  6801              LDR      r1,[r0,#0]  ; gpu8UsbBuf
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       DrvUSB_DataIn
;;;566            gpu8UsbBuf += u32MaxPacketSize;
00004c  4807              LDR      r0,|L15.108|
00004e  6800              LDR      r0,[r0,#0]  ; gpu8UsbBuf
000050  1900              ADDS     r0,r0,r4
000052  4906              LDR      r1,|L15.108|
000054  6008              STR      r0,[r1,#0]  ; gpu8UsbBuf
;;;567            gu32BytesInUsbBuf -= u32MaxPacketSize;
000056  4803              LDR      r0,|L15.100|
000058  6800              LDR      r0,[r0,#0]  ; gu32BytesInUsbBuf
00005a  1b00              SUBS     r0,r0,r4
00005c  4901              LDR      r1,|L15.100|
00005e  6008              STR      r0,[r1,#0]  ; gu32BytesInUsbBuf
                  |L15.96|
;;;568        }
;;;569    
;;;570    }
000060  bdf8              POP      {r3-r7,pc}
;;;571    
                          ENDP

000062  0000              DCW      0x0000
                  |L15.100|
                          DCD      gu32BytesInUsbBuf
                  |L15.104|
                          DCD      gIsOverRequest
                  |L15.108|
                          DCD      gpu8UsbBuf

                          AREA ||i.HID_Reset||, CODE, READONLY, ALIGN=1

                  HID_Reset PROC
;;;156    
;;;157    static void HID_Reset(S_HID_DEVICE *psDevice)
000000  b510              PUSH     {r4,lr}
;;;158    {   
000002  4604              MOV      r4,r0
;;;159        DrvUSB_Reset(INT_IN_EP_NUM_MS);
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       DrvUSB_Reset
;;;160    		DrvUSB_Reset(INT_IN_EP_NUM_KB);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       DrvUSB_Reset
;;;161    }
000010  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.HID_SetReportBuf_KB||, CODE, READONLY, ALIGN=2

                  HID_SetReportBuf_KB PROC
;;;338    
;;;339    int32_t HID_SetReportBuf_KB(uint8_t* pu8Report, uint32_t u32ReportSize)
000000  4602              MOV      r2,r0
;;;340    {
;;;341        if (pu8Report == NULL)
000002  2a00              CMP      r2,#0
000004  d101              BNE      |L17.10|
;;;342        {
;;;343            return -1;
000006  1e40              SUBS     r0,r0,#1
                  |L17.8|
;;;344        }
;;;345        if (u32ReportSize > HID_MAX_PACKET_SIZE_INT_IN)
;;;346        {
;;;347            return -1;
;;;348        }
;;;349    
;;;350        g_HID_sDevice.pu8Report_KB = pu8Report;
;;;351        g_HID_sDevice.u32ReportSize_KB = u32ReportSize;
;;;352        g_HID_sDevice.isReportReady_KB = 0;
;;;353    
;;;354        return 0;
;;;355    }
000008  4770              BX       lr
                  |L17.10|
00000a  2940              CMP      r1,#0x40              ;345
00000c  d902              BLS      |L17.20|
00000e  2000              MOVS     r0,#0                 ;347
000010  43c0              MVNS     r0,r0                 ;347
000012  e7f9              B        |L17.8|
                  |L17.20|
000014  4803              LDR      r0,|L17.36|
000016  6302              STR      r2,[r0,#0x30]         ;350  ; g_HID_sDevice
000018  6381              STR      r1,[r0,#0x38]         ;351  ; g_HID_sDevice
00001a  2300              MOVS     r3,#0                 ;352
00001c  3020              ADDS     r0,r0,#0x20           ;352
00001e  7743              STRB     r3,[r0,#0x1d]         ;352
000020  2000              MOVS     r0,#0                 ;354
000022  e7f1              B        |L17.8|
;;;356    
                          ENDP

                  |L17.36|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_SetReportBuf_MS||, CODE, READONLY, ALIGN=2

                  HID_SetReportBuf_MS PROC
;;;320    /*************************************************************************/
;;;321    int32_t HID_SetReportBuf_MS(uint8_t* pu8Report, uint32_t u32ReportSize)
000000  4602              MOV      r2,r0
;;;322    {
;;;323        if (pu8Report == NULL)
000002  2a00              CMP      r2,#0
000004  d101              BNE      |L18.10|
;;;324        {
;;;325            return -1;
000006  1e40              SUBS     r0,r0,#1
                  |L18.8|
;;;326        }
;;;327        if (u32ReportSize > HID_MAX_PACKET_SIZE_INT_IN)
;;;328        {
;;;329            return -1;
;;;330        }
;;;331    
;;;332        g_HID_sDevice.pu8Report_MS = pu8Report;
;;;333        g_HID_sDevice.u32ReportSize_MS = u32ReportSize;
;;;334        g_HID_sDevice.isReportReady_MS = 0;
;;;335    
;;;336        return 0;
;;;337    }
000008  4770              BX       lr
                  |L18.10|
00000a  2940              CMP      r1,#0x40              ;327
00000c  d902              BLS      |L18.20|
00000e  2000              MOVS     r0,#0                 ;329
000010  43c0              MVNS     r0,r0                 ;329
000012  e7f9              B        |L18.8|
                  |L18.20|
000014  4803              LDR      r0,|L18.36|
000016  62c2              STR      r2,[r0,#0x2c]         ;332  ; g_HID_sDevice
000018  6341              STR      r1,[r0,#0x34]         ;333  ; g_HID_sDevice
00001a  2300              MOVS     r3,#0                 ;334
00001c  3020              ADDS     r0,r0,#0x20           ;334
00001e  7703              STRB     r3,[r0,#0x1c]         ;334
000020  2000              MOVS     r0,#0                 ;336
000022  e7f1              B        |L18.8|
;;;338    
                          ENDP

                  |L18.36|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_SetReportDescriptor_KB||, CODE, READONLY, ALIGN=2

                  HID_SetReportDescriptor_KB PROC
;;;289    
;;;290    int32_t HID_SetReportDescriptor_KB(const uint8_t* pu8ReportDescriptor, uint32_t u32ReportDescriptorSize)
000000  4602              MOV      r2,r0
;;;291    {
;;;292        if (pu8ReportDescriptor == NULL)
000002  2a00              CMP      r2,#0
000004  d101              BNE      |L19.10|
;;;293        {
;;;294            return -1;
000006  1e40              SUBS     r0,r0,#1
                  |L19.8|
;;;295        }
;;;296    
;;;297        g_HID_sDevice.pu8ReportDescriptor_KB = pu8ReportDescriptor;
;;;298        g_HID_sDevice.u32ReportDescriptorSize_KB = u32ReportDescriptorSize;
;;;299        
;;;300        return 0;
;;;301    }
000008  4770              BX       lr
                  |L19.10|
00000a  4802              LDR      r0,|L19.20|
00000c  6202              STR      r2,[r0,#0x20]         ;297  ; g_HID_sDevice
00000e  6241              STR      r1,[r0,#0x24]         ;298  ; g_HID_sDevice
000010  2000              MOVS     r0,#0                 ;300
000012  e7f9              B        |L19.8|
;;;302    
                          ENDP

                  |L19.20|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_SetReportDescriptor_MS||, CODE, READONLY, ALIGN=2

                  HID_SetReportDescriptor_MS PROC
;;;276    /*************************************************************************/
;;;277    int32_t HID_SetReportDescriptor_MS(const uint8_t* pu8ReportDescriptor, uint32_t u32ReportDescriptorSize)
000000  4602              MOV      r2,r0
;;;278    {
;;;279        if (pu8ReportDescriptor == NULL)
000002  2a00              CMP      r2,#0
000004  d101              BNE      |L20.10|
;;;280        {
;;;281            return -1;
000006  1e40              SUBS     r0,r0,#1
                  |L20.8|
;;;282        }
;;;283    
;;;284        g_HID_sDevice.pu8ReportDescriptor_MS = pu8ReportDescriptor;
;;;285        g_HID_sDevice.u32ReportDescriptorSize_MS = u32ReportDescriptorSize;
;;;286        
;;;287        return 0;
;;;288    }
000008  4770              BX       lr
                  |L20.10|
00000a  4802              LDR      r0,|L20.20|
00000c  6182              STR      r2,[r0,#0x18]         ;284  ; g_HID_sDevice
00000e  61c1              STR      r1,[r0,#0x1c]         ;285  ; g_HID_sDevice
000010  2000              MOVS     r0,#0                 ;287
000012  e7f9              B        |L20.8|
;;;289    
                          ENDP

                  |L20.20|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_SetVendorInfo||, CODE, READONLY, ALIGN=2

                  HID_SetVendorInfo PROC
;;;239    /*************************************************************************/
;;;240    int32_t HID_SetVendorInfo(const S_VENDOR_INFO *psVendorInfo)
000000  4601              MOV      r1,r0
;;;241    {
;;;242        if (! psVendorInfo ||
000002  2900              CMP      r1,#0
000004  d005              BEQ      |L21.18|
;;;243                ! psVendorInfo->psVendorStringDesc ||
000006  6848              LDR      r0,[r1,#4]
000008  2800              CMP      r0,#0
00000a  d002              BEQ      |L21.18|
;;;244                ! psVendorInfo->psProductStringDesc)
00000c  6888              LDR      r0,[r1,#8]
00000e  2800              CMP      r0,#0
000010  d102              BNE      |L21.24|
                  |L21.18|
;;;245        {
;;;246            //return (E_HID_NULL_POINTER);
;;;247            return -1;
000012  2000              MOVS     r0,#0
000014  43c0              MVNS     r0,r0
                  |L21.22|
;;;248        }
;;;249    
;;;250        g_HID_sDevice.sVendorInfo.u16VendorId = psVendorInfo->u16VendorId;
;;;251        g_HID_sDevice.sVendorInfo.u16ProductId = psVendorInfo->u16ProductId;
;;;252        g_HID_sDevice.sVendorInfo.psVendorStringDesc = psVendorInfo->psVendorStringDesc;
;;;253        g_HID_sDevice.sVendorInfo.psProductStringDesc = psVendorInfo->psProductStringDesc;
;;;254    
;;;255        return 0;
;;;256    }
000016  4770              BX       lr
                  |L21.24|
000018  8808              LDRH     r0,[r1,#0]            ;250
00001a  4a05              LDR      r2,|L21.48|
00001c  8010              STRH     r0,[r2,#0]            ;250
00001e  8848              LDRH     r0,[r1,#2]            ;251
000020  8050              STRH     r0,[r2,#2]            ;251
000022  6848              LDR      r0,[r1,#4]            ;252
000024  6050              STR      r0,[r2,#4]            ;252  ; g_HID_sDevice
000026  6888              LDR      r0,[r1,#8]            ;253
000028  6090              STR      r0,[r2,#8]            ;253  ; g_HID_sDevice
00002a  2000              MOVS     r0,#0                 ;255
00002c  e7f3              B        |L21.22|
;;;257    
                          ENDP

00002e  0000              DCW      0x0000
                  |L21.48|
                          DCD      g_HID_sDevice

                          AREA ||i.HID_Start||, CODE, READONLY, ALIGN=2

                  HID_Start PROC
;;;162    
;;;163    static void HID_Start(S_HID_DEVICE *psDevice)
000000  b510              PUSH     {r4,lr}
;;;164    {
000002  4604              MOV      r4,r0
;;;165        __weak extern void HID_SetFirstOutReport(void);
;;;166        __weak extern void HID_SetFirstInReport(void);
;;;167    
;;;168        /* To prepare the first IN report if it is necessary */
;;;169        if((uint32_t)HID_SetFirstInReport)
000004  4805              LDR      r0,|L22.28|
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L22.14|
;;;170            HID_SetFirstInReport();
00000a  f7fffffe          BL       HID_SetFirstInReport
                  |L22.14|
;;;171    
;;;172    
;;;173        /* To prepare the first OUT report if it is necessary */
;;;174        if((uint32_t)HID_SetFirstOutReport)
00000e  4804              LDR      r0,|L22.32|
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L22.24|
;;;175            HID_SetFirstOutReport();
000014  f7fffffe          BL       HID_SetFirstOutReport
                  |L22.24|
;;;176    }
000018  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00001a  0000              DCW      0x0000
                  |L22.28|
                          DCD      HID_SetFirstInReport
                  |L22.32|
                          DCD      HID_SetFirstOutReport

                          AREA ||i.HID_UsbStartCallBack||, CODE, READONLY, ALIGN=1

                  HID_UsbStartCallBack PROC
;;;150    
;;;151    static void HID_UsbStartCallBack(void * pVoid)
000000  b510              PUSH     {r4,lr}
;;;152    {
000002  4604              MOV      r4,r0
;;;153        HID_Reset((S_HID_DEVICE *)pVoid);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HID_Reset
;;;154        HID_Start((S_HID_DEVICE *)pVoid);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HID_Start
;;;155    }
000010  bd10              POP      {r4,pc}
;;;156    
                          ENDP


                          AREA ||i.Minimum||, CODE, READONLY, ALIGN=1

                  Minimum PROC
;;;533    
;;;534    static uint16_t Minimum(uint16_t a, uint16_t b)
000000  4602              MOV      r2,r0
;;;535    {
;;;536        if (a > b)
000002  428a              CMP      r2,r1
000004  dd01              BLE      |L24.10|
;;;537            return b;
000006  4608              MOV      r0,r1
                  |L24.8|
;;;538        else
;;;539            return a;
;;;540    }
000008  4770              BX       lr
                  |L24.10|
00000a  4610              MOV      r0,r2                 ;539
00000c  e7fc              B        |L24.8|
;;;541    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_HID_sDevice
                          %        68

                          AREA ||.data||, DATA, ALIGN=2

                  sEpDescription
                          DCD      0x00000080
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x00000082
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  g_sBusOps
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      DrvUSB_BusResetCallback
                          DCD      g_HID_sDevice
                          DCD      DrvUSB_BusSuspendCallback
                          DCD      g_HID_sDevice
                          DCD      DrvUSB_BusResumeCallback
                          DCD      g_HID_sDevice
                          DCD      DrvUSB_CtrlSetupAck
                          DCD      g_HID_sDevice
                  g_sUsbOps
                          DCD      DrvUSB_CtrlDataInAck
                          DCD      g_HID_sDevice
                          DCD      DrvUSB_CtrlDataOutAck
                          DCD      g_HID_sDevice
                          DCD      HID_IntInCallback_MS
                          DCD      g_HID_sDevice
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      HID_IntInCallback_KB
                          DCD      g_HID_sDevice
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  g_asCtrlCallbackEntry
0000cc  00050000          DCB      0x00,0x05,0x00,0x00
                          DCD      DrvUSB_CtrlSetupSetAddress
                          DCD      DrvUSB_CtrlDataInSetAddress
                          DCD      0x00000000
                          DCD      g_HID_sDevice
0000e0  00010000          DCB      0x00,0x01,0x00,0x00
                          DCD      DrvUSB_CtrlSetupClearSetFeature
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
0000f4  00030000          DCB      0x00,0x03,0x00,0x00
                          DCD      DrvUSB_CtrlSetupClearSetFeature
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
000108  00080000          DCB      0x00,0x08,0x00,0x00
                          DCD      DrvUSB_CtrlSetupGetConfiguration
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
00011c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      DrvUSB_CtrlSetupGetStatus
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
000130  000a0000          DCB      0x00,0x0a,0x00,0x00
                          DCD      DrvUSB_CtrlSetupGetInterface
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
000144  000b0000          DCB      0x00,0x0b,0x00,0x00
                          DCD      DrvUSB_CtrlSetupSetInterface
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
000158  00060000          DCB      0x00,0x06,0x00,0x00
                          DCD      HID_CtrlSetupGetDescriptor
                          DCD      HID_CtrlGetDescriptorIn
                          DCD      0x00000000
                          DCD      g_HID_sDevice
00016c  00090000          DCB      0x00,0x09,0x00,0x00
                          DCD      DrvUSB_CtrlSetupSetConfiguration
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
000180  20090000          DCB      0x20,0x09,0x00,0x00
                          DCD      HID_CtrlSetupSetReport
                          DCD      0x00000000
                          DCD      HID_CtrlSetupDataOutReport
                          DCD      g_HID_sDevice
000194  200a0000          DCB      0x20,0x0a,0x00,0x00
                          DCD      HID_CtrlSetupSetIdle
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
0001a8  200b0000          DCB      0x20,0x0b,0x00,0x00
                          DCD      HID_CtrlSetupSetProtocol
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
0001bc  20030000          DCB      0x20,0x03,0x00,0x00
                          DCD      HID_CtrlSetupGetProtocol
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      g_HID_sDevice
                  sHidUsbClass
                          DCD      g_HID_sDevice
                          DCD      HID_UsbStartCallBack
                          DCD      HID_IsConfigureValue
                          DCD      0x00000000
                  gpu8UsbBuf
                          DCD      0x00000000
                  gu32BytesInUsbBuf
                          DCD      0x00000000
                  gIsOverRequest
0001e8  00                DCB      0x00
