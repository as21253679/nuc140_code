; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvcan.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvcan.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvcan.crf ..\..\..\Src\Driver\DrvCAN.c]
                          THUMB

                          AREA ||i.CAN0_IRQHandler||, CODE, READONLY, ALIGN=2

                  CAN0_IRQHandler PROC
;;;26     /*---------------------------------------------------------------------------------------------------------*/
;;;27     void CAN0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	uint8_t u8IIDRstatus;
;;;30     
;;;31         if(CAN->u32IIDR == 0x8000)     	  /* Check Status Interrupt Flag (Error status Int and Status change Int) */
000002  4838              LDR      r0,|L1.228|
000004  6900              LDR      r0,[r0,#0x10]
000006  2101              MOVS     r1,#1
000008  03c9              LSLS     r1,r1,#15
00000a  4288              CMP      r0,r1
00000c  d144              BNE      |L1.152|
;;;32     	{
;;;33     		/**************************/
;;;34     		/* Status Change interrupt*/
;;;35     		/**************************/
;;;36     		
;;;37             if(CAN->STATUS.RXOK == 1)
00000e  4835              LDR      r0,|L1.228|
000010  6840              LDR      r0,[r0,#4]
000012  06c0              LSLS     r0,r0,#27
000014  0fc0              LSRS     r0,r0,#31
000016  2801              CMP      r0,#1
000018  d10d              BNE      |L1.54|
;;;38             {
;;;39                 CAN->STATUS.RXOK = 0;    /* Clear Rx Ok status*/
00001a  4832              LDR      r0,|L1.228|
00001c  6840              LDR      r0,[r0,#4]
00001e  2110              MOVS     r1,#0x10
000020  4388              BICS     r0,r0,r1
000022  4930              LDR      r1,|L1.228|
000024  6048              STR      r0,[r1,#4]
;;;40                 
;;;41                 DEBUG_PRINTF("RX OK INT\n") ;   		
;;;42     
;;;43                 if (CANHandler.RxOkCallBackFn)
000026  4830              LDR      r0,|L1.232|
000028  6800              LDR      r0,[r0,#0]  ; CANHandler
00002a  2800              CMP      r0,#0
00002c  d003              BEQ      |L1.54|
;;;44     	    	{
;;;45     		    	CANHandler.RxOkCallBackFn(0); 
00002e  482e              LDR      r0,|L1.232|
000030  6801              LDR      r1,[r0,#0]  ; CANHandler
000032  2000              MOVS     r0,#0
000034  4788              BLX      r1
                  |L1.54|
;;;46     		    }
;;;47             }
;;;48     
;;;49             if(CAN->STATUS.TXOK == 1)
000036  482b              LDR      r0,|L1.228|
000038  6840              LDR      r0,[r0,#4]
00003a  0700              LSLS     r0,r0,#28
00003c  0fc0              LSRS     r0,r0,#31
00003e  2801              CMP      r0,#1
000040  d10d              BNE      |L1.94|
;;;50     		{
;;;51                 CAN->STATUS.TXOK = 0;    /* Clear Tx Ok status*/
000042  4828              LDR      r0,|L1.228|
000044  6840              LDR      r0,[r0,#4]
000046  2108              MOVS     r1,#8
000048  4388              BICS     r0,r0,r1
00004a  4926              LDR      r1,|L1.228|
00004c  6048              STR      r0,[r1,#4]
;;;52                 
;;;53     			DEBUG_PRINTF("TX OK INT\n") ; 
;;;54     
;;;55                 if (CANHandler.TxOkCallBackFn)
00004e  4826              LDR      r0,|L1.232|
000050  6840              LDR      r0,[r0,#4]  ; CANHandler
000052  2800              CMP      r0,#0
000054  d003              BEQ      |L1.94|
;;;56     	    	{
;;;57     		    	CANHandler.TxOkCallBackFn(0); 
000056  4824              LDR      r0,|L1.232|
000058  6841              LDR      r1,[r0,#4]  ; CANHandler
00005a  2000              MOVS     r0,#0
00005c  4788              BLX      r1
                  |L1.94|
;;;58     		    }
;;;59             }
;;;60     		/**************************/
;;;61     		/* Error Status interrupt */
;;;62     		/**************************/
;;;63             if(CAN->STATUS.EWARN==1)
00005e  4821              LDR      r0,|L1.228|
000060  6840              LDR      r0,[r0,#4]
000062  0640              LSLS     r0,r0,#25
000064  0fc0              LSRS     r0,r0,#31
000066  2801              CMP      r0,#1
000068  d107              BNE      |L1.122|
;;;64             {
;;;65                 DEBUG_PRINTF("EWARN INT\n") ; 
;;;66     
;;;67                 if (CANHandler.ErrorWarningCallBackFn)
00006a  481f              LDR      r0,|L1.232|
00006c  6880              LDR      r0,[r0,#8]  ; CANHandler
00006e  2800              CMP      r0,#0
000070  d003              BEQ      |L1.122|
;;;68     	    	{
;;;69     		    	CANHandler.ErrorWarningCallBackFn(0); 
000072  481d              LDR      r0,|L1.232|
000074  6881              LDR      r1,[r0,#8]  ; CANHandler
000076  2000              MOVS     r0,#0
000078  4788              BLX      r1
                  |L1.122|
;;;70     		    }
;;;71             }
;;;72     
;;;73             if(CAN->STATUS.BOFF==1)
00007a  481a              LDR      r0,|L1.228|
00007c  6840              LDR      r0,[r0,#4]
00007e  0600              LSLS     r0,r0,#24
000080  0fc0              LSRS     r0,r0,#31
000082  2801              CMP      r0,#1
000084  d12d              BNE      |L1.226|
;;;74             {
;;;75                 DEBUG_PRINTF("BOFF INT\n") ; 
;;;76             
;;;77                 if (CANHandler.BusOffCallBackFn)
000086  4818              LDR      r0,|L1.232|
000088  68c0              LDR      r0,[r0,#0xc]  ; CANHandler
00008a  2800              CMP      r0,#0
00008c  d029              BEQ      |L1.226|
;;;78     	    	{
;;;79     		    	CANHandler.BusOffCallBackFn(0); 
00008e  4816              LDR      r0,|L1.232|
000090  68c1              LDR      r1,[r0,#0xc]  ; CANHandler
000092  2000              MOVS     r0,#0
000094  4788              BLX      r1
000096  e024              B        |L1.226|
                  |L1.152|
;;;80     		    }
;;;81             }
;;;82     	}
;;;83     
;;;84     	else if ((CAN->u32IIDR)!=0)
000098  4812              LDR      r0,|L1.228|
00009a  6900              LDR      r0,[r0,#0x10]
00009c  2800              CMP      r0,#0
00009e  d011              BEQ      |L1.196|
;;;85     	{                       
;;;86             DEBUG_PRINTF("=> Interrupt Pointer = %d\n",CAN->u32IIDR -1);
;;;87     
;;;88     		u8IIDRstatus = CAN->u32IIDR;
0000a0  4810              LDR      r0,|L1.228|
0000a2  6900              LDR      r0,[r0,#0x10]
0000a4  b2c4              UXTB     r4,r0
;;;89     		
;;;90             if (CANHandler.MessageCallBackFn)
0000a6  4810              LDR      r0,|L1.232|
0000a8  6900              LDR      r0,[r0,#0x10]  ; CANHandler
0000aa  2800              CMP      r0,#0
0000ac  d003              BEQ      |L1.182|
;;;91       	    {
;;;92     		    CANHandler.MessageCallBackFn(u8IIDRstatus); 
0000ae  480e              LDR      r0,|L1.232|
0000b0  6901              LDR      r1,[r0,#0x10]  ; CANHandler
0000b2  4620              MOV      r0,r4
0000b4  4788              BLX      r1
                  |L1.182|
;;;93     		}    
;;;94     
;;;95     		DrvCAN_ClrIntPnd((CAN->u32IIDR) -1 );	   /* Clear Interrupt Pending */
0000b6  490b              LDR      r1,|L1.228|
0000b8  6909              LDR      r1,[r1,#0x10]
0000ba  1e49              SUBS     r1,r1,#1
0000bc  b2c8              UXTB     r0,r1
0000be  f7fffffe          BL       DrvCAN_ClrIntPnd
0000c2  e00e              B        |L1.226|
                  |L1.196|
;;;96     
;;;97     	}
;;;98     
;;;99         else if(CAN->u32WU_STATUS==1)
0000c4  4809              LDR      r0,|L1.236|
0000c6  6ac0              LDR      r0,[r0,#0x2c]
0000c8  2801              CMP      r0,#1
0000ca  d10a              BNE      |L1.226|
;;;100        {
;;;101            DEBUG_PRINTF("Wake up\n");
;;;102    
;;;103            CAN->u32WU_STATUS = 0;     				   /* Write '0' to clear */
0000cc  2000              MOVS     r0,#0
0000ce  4907              LDR      r1,|L1.236|
0000d0  62c8              STR      r0,[r1,#0x2c]
;;;104    
;;;105            if (CANHandler.WakeupCallBackFn)
0000d2  4805              LDR      r0,|L1.232|
0000d4  6940              LDR      r0,[r0,#0x14]  ; CANHandler
0000d6  2800              CMP      r0,#0
0000d8  d003              BEQ      |L1.226|
;;;106    	    {
;;;107    		    CANHandler.WakeupCallBackFn(0); 
0000da  4803              LDR      r0,|L1.232|
0000dc  6941              LDR      r1,[r0,#0x14]  ; CANHandler
0000de  2000              MOVS     r0,#0
0000e0  4788              BLX      r1
                  |L1.226|
;;;108    		}    
;;;109        }
;;;110    
;;;111    }
0000e2  bd10              POP      {r4,pc}
;;;112    
                          ENDP

                  |L1.228|
                          DCD      0x40180000
                  |L1.232|
                          DCD      CANHandler
                  |L1.236|
                          DCD      0x40180140

                          AREA ||i.DrvCAN_BasicReceiveMsg||, CODE, READONLY, ALIGN=2

                  DrvCAN_BasicReceiveMsg PROC
;;;746    
;;;747    int32_t DrvCAN_BasicReceiveMsg(STR_CANMSG_T* pCanMsg)
000000  4601              MOV      r1,r0
;;;748    {
;;;749        if (CAN->sMsgObj[1].MCON.NEWDAT == 0) /* In basic mode, receive data always save in IF2 */
000002  4833              LDR      r0,|L2.208|
000004  6f80              LDR      r0,[r0,#0x78]
000006  0400              LSLS     r0,r0,#16
000008  0fc0              LSRS     r0,r0,#31
00000a  d101              BNE      |L2.16|
;;;750        {
;;;751            return E_DRVCAN_NO_PENDING_MSG;
00000c  4831              LDR      r0,|L2.212|
                  |L2.14|
;;;752        }
;;;753    
;;;754        CAN->STATUS.RXOK = 0;
;;;755        
;;;756        CAN->sMsgObj[1].u32CMASK = CAN_CMASK_ARB
;;;757                                 | CAN_CMASK_CONTROL
;;;758                                 | CAN_CMASK_DATAA
;;;759                                 | CAN_CMASK_DATAB;
;;;760    
;;;761        if (CAN->sMsgObj[1].ARB2.XTD == 0)
;;;762        {
;;;763            /* standard ID*/
;;;764            pCanMsg->IdType = CAN_STD_ID;
;;;765            pCanMsg->Id = (CAN->sMsgObj[1].u32ARB2 >> 2) & 0x07FF;
;;;766    
;;;767        }
;;;768        else
;;;769        {
;;;770            /* extended ID*/
;;;771            pCanMsg->IdType = CAN_EXT_ID;
;;;772            pCanMsg->Id  = (CAN->sMsgObj[1].u32ARB2 & 0x1FFF)<<16;
;;;773            pCanMsg->Id |= (uint32_t)CAN->sMsgObj[1].u32ARB1;
;;;774        }
;;;775    
;;;776        CAN->sMsgObj[1].ARB2.DIR = pCanMsg->FrameType?0:1;
;;;777    
;;;778        pCanMsg->DLC = CAN->sMsgObj[1].MCON.DLC;
;;;779        pCanMsg->Data[0] = CAN->sMsgObj[1].DAT_A1.DATA0;
;;;780        pCanMsg->Data[1] = CAN->sMsgObj[1].DAT_A1.DATA1;
;;;781        pCanMsg->Data[2] = CAN->sMsgObj[1].DAT_A2.DATA2;
;;;782        pCanMsg->Data[3] = CAN->sMsgObj[1].DAT_A2.DATA3;
;;;783        pCanMsg->Data[4] = CAN->sMsgObj[1].DAT_B1.DATA4;
;;;784        pCanMsg->Data[5] = CAN->sMsgObj[1].DAT_B1.DATA5;
;;;785        pCanMsg->Data[6] = CAN->sMsgObj[1].DAT_B2.DATA6;
;;;786        pCanMsg->Data[7] = CAN->sMsgObj[1].DAT_B2.DATA7;
;;;787    
;;;788        return E_SUCCESS;
;;;789    }
00000e  4770              BX       lr
                  |L2.16|
000010  482f              LDR      r0,|L2.208|
000012  3820              SUBS     r0,r0,#0x20           ;754
000014  6840              LDR      r0,[r0,#4]            ;754
000016  2210              MOVS     r2,#0x10              ;754
000018  4390              BICS     r0,r0,r2              ;754
00001a  4a2d              LDR      r2,|L2.208|
00001c  3a20              SUBS     r2,r2,#0x20           ;754
00001e  6050              STR      r0,[r2,#4]            ;754
000020  2233              MOVS     r2,#0x33              ;756
000022  482b              LDR      r0,|L2.208|
000024  6642              STR      r2,[r0,#0x64]         ;756
000026  6f40              LDR      r0,[r0,#0x74]         ;761
000028  0440              LSLS     r0,r0,#17             ;761
00002a  0fc0              LSRS     r0,r0,#31             ;761
00002c  d106              BNE      |L2.60|
00002e  6008              STR      r0,[r1,#0]            ;764
000030  4827              LDR      r0,|L2.208|
000032  6f40              LDR      r0,[r0,#0x74]         ;765
000034  04c0              LSLS     r0,r0,#19             ;765
000036  0d40              LSRS     r0,r0,#21             ;765
000038  6088              STR      r0,[r1,#8]            ;765
00003a  e00b              B        |L2.84|
                  |L2.60|
00003c  2001              MOVS     r0,#1                 ;771
00003e  6008              STR      r0,[r1,#0]            ;771
000040  4823              LDR      r0,|L2.208|
000042  6f40              LDR      r0,[r0,#0x74]         ;772
000044  04c0              LSLS     r0,r0,#19             ;772
000046  08c0              LSRS     r0,r0,#3              ;772
000048  6088              STR      r0,[r1,#8]            ;772
00004a  4821              LDR      r0,|L2.208|
00004c  688a              LDR      r2,[r1,#8]            ;773
00004e  6f00              LDR      r0,[r0,#0x70]         ;773
000050  4302              ORRS     r2,r2,r0              ;773
000052  608a              STR      r2,[r1,#8]            ;773
                  |L2.84|
000054  481e              LDR      r0,|L2.208|
000056  6f40              LDR      r0,[r0,#0x74]         ;776
000058  2201              MOVS     r2,#1                 ;776
00005a  0352              LSLS     r2,r2,#13             ;776
00005c  4390              BICS     r0,r0,r2              ;776
00005e  684a              LDR      r2,[r1,#4]            ;776
000060  2a00              CMP      r2,#0                 ;776
000062  d101              BNE      |L2.104|
000064  2201              MOVS     r2,#1                 ;776
000066  e000              B        |L2.106|
                  |L2.104|
000068  2200              MOVS     r2,#0                 ;776
                  |L2.106|
00006a  0352              LSLS     r2,r2,#13             ;776
00006c  2301              MOVS     r3,#1                 ;776
00006e  035b              LSLS     r3,r3,#13             ;776
000070  401a              ANDS     r2,r2,r3              ;776
000072  4302              ORRS     r2,r2,r0              ;776
000074  4816              LDR      r0,|L2.208|
000076  6742              STR      r2,[r0,#0x74]         ;776
000078  6f80              LDR      r0,[r0,#0x78]         ;778
00007a  0700              LSLS     r0,r0,#28             ;778
00007c  0f00              LSRS     r0,r0,#28             ;778
00007e  7308              STRB     r0,[r1,#0xc]          ;778
000080  4813              LDR      r0,|L2.208|
000082  6fc0              LDR      r0,[r0,#0x7c]         ;779
000084  7348              STRB     r0,[r1,#0xd]          ;779
000086  4812              LDR      r0,|L2.208|
000088  6fc0              LDR      r0,[r0,#0x7c]         ;780
00008a  0400              LSLS     r0,r0,#16             ;780
00008c  0e00              LSRS     r0,r0,#24             ;780
00008e  7388              STRB     r0,[r1,#0xe]          ;780
000090  480f              LDR      r0,|L2.208|
000092  3060              ADDS     r0,r0,#0x60           ;781
000094  6a00              LDR      r0,[r0,#0x20]         ;781
000096  73c8              STRB     r0,[r1,#0xf]          ;781
000098  480d              LDR      r0,|L2.208|
00009a  3060              ADDS     r0,r0,#0x60           ;782
00009c  6a00              LDR      r0,[r0,#0x20]         ;782
00009e  0400              LSLS     r0,r0,#16             ;782
0000a0  0e00              LSRS     r0,r0,#24             ;782
0000a2  7408              STRB     r0,[r1,#0x10]         ;782
0000a4  480a              LDR      r0,|L2.208|
0000a6  3060              ADDS     r0,r0,#0x60           ;783
0000a8  6a40              LDR      r0,[r0,#0x24]         ;783
0000aa  7448              STRB     r0,[r1,#0x11]         ;783
0000ac  4808              LDR      r0,|L2.208|
0000ae  3060              ADDS     r0,r0,#0x60           ;784
0000b0  6a40              LDR      r0,[r0,#0x24]         ;784
0000b2  0400              LSLS     r0,r0,#16             ;784
0000b4  0e00              LSRS     r0,r0,#24             ;784
0000b6  7488              STRB     r0,[r1,#0x12]         ;784
0000b8  4805              LDR      r0,|L2.208|
0000ba  3060              ADDS     r0,r0,#0x60           ;785
0000bc  6a80              LDR      r0,[r0,#0x28]         ;785
0000be  74c8              STRB     r0,[r1,#0x13]         ;785
0000c0  4803              LDR      r0,|L2.208|
0000c2  3060              ADDS     r0,r0,#0x60           ;786
0000c4  6a80              LDR      r0,[r0,#0x28]         ;786
0000c6  0400              LSLS     r0,r0,#16             ;786
0000c8  0e00              LSRS     r0,r0,#24             ;786
0000ca  7508              STRB     r0,[r1,#0x14]         ;786
0000cc  2000              MOVS     r0,#0                 ;788
0000ce  e79e              B        |L2.14|
;;;790    
                          ENDP

                  |L2.208|
                          DCD      0x40180020
                  |L2.212|
                          DCD      0xffff8585

                          AREA ||i.DrvCAN_BasicSendMsg||, CODE, READONLY, ALIGN=2

                  DrvCAN_BasicSendMsg PROC
;;;682    
;;;683    int32_t DrvCAN_BasicSendMsg(STR_CANMSG_T* pCanMsg)
000000  b510              PUSH     {r4,lr}
;;;684    {
000002  4601              MOV      r1,r0
;;;685        uint32_t i=0;
000004  2200              MOVS     r2,#0
;;;686        while(CAN->sMsgObj[0].CREQ.BUSY==1);
000006  bf00              NOP      
                  |L3.8|
000008  4842              LDR      r0,|L3.276|
00000a  6a00              LDR      r0,[r0,#0x20]
00000c  0400              LSLS     r0,r0,#16
00000e  0fc0              LSRS     r0,r0,#31
000010  2801              CMP      r0,#1
000012  d0f9              BEQ      |L3.8|
;;;687       
;;;688        CAN->STATUS.TXOK = 0;
000014  483f              LDR      r0,|L3.276|
000016  6840              LDR      r0,[r0,#4]
000018  2308              MOVS     r3,#8
00001a  4398              BICS     r0,r0,r3
00001c  4b3d              LDR      r3,|L3.276|
00001e  6058              STR      r0,[r3,#4]
;;;689    
;;;690        CAN->sMsgObj[0].u32CMASK = CAN_CMASK_WRRD;  
000020  2380              MOVS     r3,#0x80
000022  483c              LDR      r0,|L3.276|
000024  6243              STR      r3,[r0,#0x24]
;;;691    
;;;692        if (pCanMsg->IdType == CAN_STD_ID)
000026  6808              LDR      r0,[r1,#0]
000028  2800              CMP      r0,#0
00002a  d108              BNE      |L3.62|
;;;693        {
;;;694            /* standard ID*/
;;;695            CAN->sMsgObj[0].u32ARB1 = 0;
00002c  2300              MOVS     r3,#0
00002e  4839              LDR      r0,|L3.276|
000030  6303              STR      r3,[r0,#0x30]
;;;696    		CAN->sMsgObj[0].u32ARB2 =  (((pCanMsg->Id)&0x7FF)<<2) ;
000032  6888              LDR      r0,[r1,#8]
000034  0540              LSLS     r0,r0,#21
000036  0cc3              LSRS     r3,r0,#19
000038  4836              LDR      r0,|L3.276|
00003a  6343              STR      r3,[r0,#0x34]
00003c  e00c              B        |L3.88|
                  |L3.62|
;;;697        }
;;;698        else
;;;699        {
;;;700            /* extended ID*/
;;;701            CAN->sMsgObj[0].u32ARB1 = (pCanMsg->Id)&0xFFFF;
00003e  6888              LDR      r0,[r1,#8]
000040  b283              UXTH     r3,r0
000042  4834              LDR      r0,|L3.276|
000044  6303              STR      r3,[r0,#0x30]
;;;702            CAN->sMsgObj[0].u32ARB2 = ((pCanMsg->Id)&0x1FFF0000)>>16  | CAN_ARB2_XTD;
000046  4b34              LDR      r3,|L3.280|
000048  6888              LDR      r0,[r1,#8]
00004a  4018              ANDS     r0,r0,r3
00004c  0c00              LSRS     r0,r0,#16
00004e  2301              MOVS     r3,#1
000050  039b              LSLS     r3,r3,#14
000052  18c3              ADDS     r3,r0,r3
000054  482f              LDR      r0,|L3.276|
000056  6343              STR      r3,[r0,#0x34]
                  |L3.88|
;;;703    
;;;704        }
;;;705        CAN->sMsgObj[0].ARB2.DIR = (pCanMsg->FrameType)?1:0;
000058  482e              LDR      r0,|L3.276|
00005a  6b40              LDR      r0,[r0,#0x34]
00005c  2301              MOVS     r3,#1
00005e  035b              LSLS     r3,r3,#13
000060  4398              BICS     r0,r0,r3
000062  684b              LDR      r3,[r1,#4]
000064  2b00              CMP      r3,#0
000066  d001              BEQ      |L3.108|
000068  2301              MOVS     r3,#1
00006a  e000              B        |L3.110|
                  |L3.108|
00006c  2300              MOVS     r3,#0
                  |L3.110|
00006e  035b              LSLS     r3,r3,#13
000070  2401              MOVS     r4,#1
000072  0364              LSLS     r4,r4,#13
000074  4023              ANDS     r3,r3,r4
000076  4318              ORRS     r0,r0,r3
000078  4b26              LDR      r3,|L3.276|
00007a  6358              STR      r0,[r3,#0x34]
;;;706    
;;;707        CAN->sMsgObj[0].MCON.DLC = pCanMsg->DLC ;
00007c  4618              MOV      r0,r3
00007e  6b80              LDR      r0,[r0,#0x38]
000080  0900              LSRS     r0,r0,#4
000082  0100              LSLS     r0,r0,#4
000084  7b0b              LDRB     r3,[r1,#0xc]
000086  071b              LSLS     r3,r3,#28
000088  0f1b              LSRS     r3,r3,#28
00008a  4318              ORRS     r0,r0,r3
00008c  4b21              LDR      r3,|L3.276|
00008e  6398              STR      r0,[r3,#0x38]
;;;708    
;;;709        CAN->sMsgObj[0].u32DAT_A1 = ((uint16_t)pCanMsg->Data[1]<<8) | pCanMsg->Data[0];
000090  7b88              LDRB     r0,[r1,#0xe]
000092  0200              LSLS     r0,r0,#8
000094  7b4b              LDRB     r3,[r1,#0xd]
000096  4318              ORRS     r0,r0,r3
000098  4b1e              LDR      r3,|L3.276|
00009a  63d8              STR      r0,[r3,#0x3c]
;;;710        CAN->sMsgObj[0].u32DAT_A2 = ((uint16_t)pCanMsg->Data[3]<<8) | pCanMsg->Data[2];
00009c  7c08              LDRB     r0,[r1,#0x10]
00009e  0200              LSLS     r0,r0,#8
0000a0  7bcb              LDRB     r3,[r1,#0xf]
0000a2  4318              ORRS     r0,r0,r3
0000a4  4b1b              LDR      r3,|L3.276|
0000a6  6418              STR      r0,[r3,#0x40]
;;;711        CAN->sMsgObj[0].u32DAT_B1 = ((uint16_t)pCanMsg->Data[5]<<8) | pCanMsg->Data[4];
0000a8  7c88              LDRB     r0,[r1,#0x12]
0000aa  0200              LSLS     r0,r0,#8
0000ac  7c4b              LDRB     r3,[r1,#0x11]
0000ae  4318              ORRS     r0,r0,r3
0000b0  4b18              LDR      r3,|L3.276|
0000b2  6458              STR      r0,[r3,#0x44]
;;;712        CAN->sMsgObj[0].u32DAT_B2 = ((uint16_t)pCanMsg->Data[7]<<8) | pCanMsg->Data[6];
0000b4  7d08              LDRB     r0,[r1,#0x14]
0000b6  0200              LSLS     r0,r0,#8
0000b8  7ccb              LDRB     r3,[r1,#0x13]
0000ba  4318              ORRS     r0,r0,r3
0000bc  4b15              LDR      r3,|L3.276|
0000be  6498              STR      r0,[r3,#0x48]
;;;713    
;;;714        /* request transmission*/
;;;715    	CAN->sMsgObj[0].CREQ.BUSY = 0;
0000c0  4618              MOV      r0,r3
0000c2  6a00              LDR      r0,[r0,#0x20]
0000c4  00a3              LSLS     r3,r4,#2
0000c6  4398              BICS     r0,r0,r3
0000c8  4b12              LDR      r3,|L3.276|
0000ca  6218              STR      r0,[r3,#0x20]
;;;716    	if ( CAN->sMsgObj[0].CREQ.BUSY ==1 ) {
0000cc  4618              MOV      r0,r3
0000ce  6a00              LDR      r0,[r0,#0x20]
0000d0  0400              LSLS     r0,r0,#16
0000d2  0fc0              LSRS     r0,r0,#31
0000d4  2801              CMP      r0,#1
0000d6  d101              BNE      |L3.220|
;;;717    		DEBUG_PRINTF("Cannot clear busy for sending ...\n");
;;;718            return E_DRVCAN_ERR_TIMEOUT;
0000d8  4810              LDR      r0,|L3.284|
                  |L3.218|
;;;719    	}
;;;720    	CAN->sMsgObj[0].CREQ.BUSY =1;						   // sending
;;;721    
;;;722        for ( i=0; i<0xFFFFF; i++) {
;;;723    		if ( CAN->sMsgObj[0].CREQ.BUSY ==0) break;
;;;724    	}
;;;725    
;;;726        if ( i >= 0xFFFFF ) {
;;;727    		DEBUG_PRINTF("Cannot send out...\n");
;;;728            return E_DRVCAN_ERR_TIMEOUT;
;;;729    	}
;;;730        return E_SUCCESS;
;;;731    }
0000da  bd10              POP      {r4,pc}
                  |L3.220|
0000dc  480d              LDR      r0,|L3.276|
0000de  6a00              LDR      r0,[r0,#0x20]         ;720
0000e0  2301              MOVS     r3,#1                 ;720
0000e2  03db              LSLS     r3,r3,#15             ;720
0000e4  4398              BICS     r0,r0,r3              ;720
0000e6  18c0              ADDS     r0,r0,r3              ;720
0000e8  4b0a              LDR      r3,|L3.276|
0000ea  6218              STR      r0,[r3,#0x20]         ;720
0000ec  2200              MOVS     r2,#0                 ;722
0000ee  e006              B        |L3.254|
                  |L3.240|
0000f0  4808              LDR      r0,|L3.276|
0000f2  6a00              LDR      r0,[r0,#0x20]         ;723
0000f4  0400              LSLS     r0,r0,#16             ;723
0000f6  0fc0              LSRS     r0,r0,#31             ;723
0000f8  d100              BNE      |L3.252|
0000fa  e003              B        |L3.260|
                  |L3.252|
0000fc  1c52              ADDS     r2,r2,#1              ;722
                  |L3.254|
0000fe  4808              LDR      r0,|L3.288|
000100  4282              CMP      r2,r0                 ;722
000102  d3f5              BCC      |L3.240|
                  |L3.260|
000104  bf00              NOP                            ;723
000106  4806              LDR      r0,|L3.288|
000108  4282              CMP      r2,r0                 ;726
00010a  d301              BCC      |L3.272|
00010c  4803              LDR      r0,|L3.284|
00010e  e7e4              B        |L3.218|
                  |L3.272|
000110  2000              MOVS     r0,#0                 ;730
000112  e7e2              B        |L3.218|
;;;732    
                          ENDP

                  |L3.276|
                          DCD      0x40180000
                  |L3.280|
                          DCD      0x1fff0000
                  |L3.284|
                          DCD      0xffff8581
                  |L3.288|
                          DCD      0x000fffff

                          AREA ||i.DrvCAN_Close||, CODE, READONLY, ALIGN=2

                  DrvCAN_Close PROC
;;;187    
;;;188    void DrvCAN_Close(void)
000000  2000              MOVS     r0,#0
;;;189    {
;;;190    	/* Clear Install callback function pointer */
;;;191    	CANHandler.MessageCallBackFn            = NULL; 
000002  4910              LDR      r1,|L4.68|
000004  6108              STR      r0,[r1,#0x10]  ; CANHandler
;;;192        CANHandler.RxOkCallBackFn               = NULL;    
000006  6008              STR      r0,[r1,#0]  ; CANHandler
;;;193        CANHandler.TxOkCallBackFn               = NULL;    
000008  6048              STR      r0,[r1,#4]  ; CANHandler
;;;194        CANHandler.ErrorWarningCallBackFn       = NULL;    
00000a  6088              STR      r0,[r1,#8]  ; CANHandler
;;;195        CANHandler.BusOffCallBackFn             = NULL;    
00000c  60c8              STR      r0,[r1,#0xc]  ; CANHandler
;;;196        CANHandler.WakeupCallBackFn             = NULL;    
00000e  6148              STR      r0,[r1,#0x14]  ; CANHandler
;;;197          
;;;198        /* Disable CAN0 Clock and Reset it */
;;;199     	SYS->IPRSTC2.CAN0_RST   =1;  
000010  2005              MOVS     r0,#5
000012  0700              LSLS     r0,r0,#28
000014  68c0              LDR      r0,[r0,#0xc]
000016  2101              MOVS     r1,#1
000018  0609              LSLS     r1,r1,#24
00001a  4388              BICS     r0,r0,r1
00001c  1840              ADDS     r0,r0,r1
00001e  2105              MOVS     r1,#5
000020  0709              LSLS     r1,r1,#28
000022  60c8              STR      r0,[r1,#0xc]
;;;200    	SYS->IPRSTC2.CAN0_RST   =0;  
000024  4608              MOV      r0,r1
000026  68c0              LDR      r0,[r0,#0xc]
000028  2101              MOVS     r1,#1
00002a  0609              LSLS     r1,r1,#24
00002c  4388              BICS     r0,r0,r1
00002e  2105              MOVS     r1,#5
000030  0709              LSLS     r1,r1,#28
000032  60c8              STR      r0,[r1,#0xc]
;;;201        SYSCLK->APBCLK.CAN0_EN  =0;
000034  4804              LDR      r0,|L4.72|
000036  6880              LDR      r0,[r0,#8]
000038  2101              MOVS     r1,#1
00003a  0609              LSLS     r1,r1,#24
00003c  4388              BICS     r0,r0,r1
00003e  4902              LDR      r1,|L4.72|
000040  6088              STR      r0,[r1,#8]
;;;202    
;;;203    }
000042  4770              BX       lr
;;;204         
                          ENDP

                  |L4.68|
                          DCD      CANHandler
                  |L4.72|
                          DCD      0x50000200

                          AREA ||i.DrvCAN_ClrIntPnd||, CODE, READONLY, ALIGN=2

                  DrvCAN_ClrIntPnd PROC
;;;547    /*---------------------------------------------------------------------------------------------------------*/
;;;548    int32_t DrvCAN_ClrIntPnd(uint8_t u8MsgObj)
000000  b570              PUSH     {r4-r6,lr}
;;;549    {
000002  4604              MOV      r4,r0
;;;550        uint8_t u8MsgIfNum=0;
000004  2500              MOVS     r5,#0
;;;551    
;;;552        if ((u8MsgIfNum = GetFreeIF()) == 2)    /* Judge if any interface is free */
000006  f7fffffe          BL       GetFreeIF
00000a  b2c0              UXTB     r0,r0
00000c  4605              MOV      r5,r0
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L5.22|
;;;553        {
;;;554            return E_DRVCAN_NO_USEFUL_INTERFACE;
000012  4807              LDR      r0,|L5.48|
                  |L5.20|
;;;555        }
;;;556    
;;;557        CAN->sMsgObj[u8MsgIfNum].u32CMASK = CAN_CMASK_CLRINTPND | CAN_CMASK_TXRQSTNEWDAT;
;;;558        CAN->sMsgObj[u8MsgIfNum].u32CREQ = 1 + u8MsgObj;
;;;559    
;;;560        return E_SUCCESS;
;;;561    }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  220c              MOVS     r2,#0xc               ;557
000018  4806              LDR      r0,|L5.52|
00001a  2160              MOVS     r1,#0x60              ;557
00001c  4369              MULS     r1,r5,r1              ;557
00001e  1840              ADDS     r0,r0,r1              ;557
000020  6042              STR      r2,[r0,#4]            ;557
000022  1c60              ADDS     r0,r4,#1              ;558
000024  4903              LDR      r1,|L5.52|
000026  2260              MOVS     r2,#0x60              ;558
000028  436a              MULS     r2,r5,r2              ;558
00002a  5088              STR      r0,[r1,r2]            ;558
00002c  2000              MOVS     r0,#0                 ;560
00002e  e7f1              B        |L5.20|
;;;562    
                          ENDP

                  |L5.48|
                          DCD      0xffff8586
                  |L5.52|
                          DCD      0x40180020

                          AREA ||i.DrvCAN_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvCAN_DisableInt PROC
;;;1046   /*---------------------------------------------------------------------------------------------------------*/
;;;1047   int32_t DrvCAN_DisableInt(uint16_t u16IntEnable)
000000  b500              PUSH     {lr}
;;;1048   {
000002  4602              MOV      r2,r0
;;;1049       DrvCAN_EnterInitMode();
000004  f7fffffe          BL       DrvCAN_EnterInitMode
;;;1050   
;;;1051       CAN->u32CON = CAN->u32CON & ~(CAN_CON_IE | ((u16IntEnable & CAN_CON_SIE )?CAN_CON_SIE:0)
000008  2004              MOVS     r0,#4
00000a  4202              TST      r2,r0
00000c  d000              BEQ      |L6.16|
00000e  e000              B        |L6.18|
                  |L6.16|
000010  2000              MOVS     r0,#0
                  |L6.18|
000012  2102              MOVS     r1,#2
000014  4308              ORRS     r0,r0,r1
000016  2108              MOVS     r1,#8
000018  420a              TST      r2,r1
00001a  d000              BEQ      |L6.30|
;;;1052                                       | ((u16IntEnable & CAN_CON_EIE )?CAN_CON_EIE:0));
00001c  e000              B        |L6.32|
                  |L6.30|
00001e  2100              MOVS     r1,#0
                  |L6.32|
000020  4308              ORRS     r0,r0,r1
000022  4908              LDR      r1,|L6.68|
000024  6809              LDR      r1,[r1,#0]
000026  4381              BICS     r1,r1,r0
000028  4806              LDR      r0,|L6.68|
00002a  6001              STR      r1,[r0,#0]
;;;1053       NVIC_DisableIRQ(CAN0_IRQn);
00002c  bf00              NOP      
00002e  2014              MOVS     r0,#0x14
000030  2101              MOVS     r1,#1
000032  4081              LSLS     r1,r1,r0
000034  4804              LDR      r0,|L6.72|
000036  6001              STR      r1,[r0,#0]
000038  bf00              NOP      
;;;1054   
;;;1055       DrvCAN_LeaveInitMode();
00003a  f7fffffe          BL       DrvCAN_LeaveInitMode
;;;1056      
;;;1057       return E_SUCCESS;
00003e  2000              MOVS     r0,#0
;;;1058   }
000040  bd00              POP      {pc}
;;;1059   
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      0x40180000
                  |L6.72|
                          DCD      0xe000e180

                          AREA ||i.DrvCAN_DisableWakeUp||, CODE, READONLY, ALIGN=2

                  DrvCAN_DisableWakeUp PROC
;;;1196   
;;;1197   void DrvCAN_DisableWakeUp(void)
000000  2000              MOVS     r0,#0
;;;1198   {
;;;1199       CAN->u32WU_EN = 0;
000002  4901              LDR      r1,|L7.8|
000004  6288              STR      r0,[r1,#0x28]
;;;1200   }
000006  4770              BX       lr
;;;1201   
                          ENDP

                  |L7.8|
                          DCD      0x40180140

                          AREA ||i.DrvCAN_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvCAN_EnableInt PROC
;;;1016   /*---------------------------------------------------------------------------------------------------------*/
;;;1017   int32_t DrvCAN_EnableInt(uint16_t u16IntEnable)
000000  b510              PUSH     {r4,lr}
;;;1018   {
000002  4604              MOV      r4,r0
;;;1019       DrvCAN_EnterInitMode();
000004  f7fffffe          BL       DrvCAN_EnterInitMode
;;;1020   
;;;1021       CAN->u32CON = (CAN->u32CON & 0xF1) | ((u16IntEnable & CAN_CON_IE   )? CAN_CON_IE :0)
000008  4813              LDR      r0,|L8.88|
00000a  6800              LDR      r0,[r0,#0]
00000c  21f1              MOVS     r1,#0xf1
00000e  4008              ANDS     r0,r0,r1
000010  2102              MOVS     r1,#2
000012  420c              TST      r4,r1
000014  d000              BEQ      |L8.24|
000016  e000              B        |L8.26|
                  |L8.24|
000018  2100              MOVS     r1,#0
                  |L8.26|
00001a  4308              ORRS     r0,r0,r1
00001c  2104              MOVS     r1,#4
00001e  420c              TST      r4,r1
000020  d000              BEQ      |L8.36|
;;;1022                                          | ((u16IntEnable & CAN_CON_SIE  )? CAN_CON_SIE:0)
000022  e000              B        |L8.38|
                  |L8.36|
000024  2100              MOVS     r1,#0
                  |L8.38|
000026  4308              ORRS     r0,r0,r1
000028  2108              MOVS     r1,#8
00002a  420c              TST      r4,r1
00002c  d000              BEQ      |L8.48|
;;;1023                                          | ((u16IntEnable & CAN_CON_EIE  )? CAN_CON_EIE:0);
00002e  e000              B        |L8.50|
                  |L8.48|
000030  2100              MOVS     r1,#0
                  |L8.50|
000032  4308              ORRS     r0,r0,r1
000034  4908              LDR      r1,|L8.88|
000036  6008              STR      r0,[r1,#0]
;;;1024   
;;;1025       NVIC_SetPriority(CAN0_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000038  2102              MOVS     r1,#2
00003a  2014              MOVS     r0,#0x14
00003c  f7fffffe          BL       NVIC_SetPriority
;;;1026       NVIC_EnableIRQ(CAN0_IRQn);
000040  bf00              NOP      
000042  2014              MOVS     r0,#0x14
000044  2101              MOVS     r1,#1
000046  4081              LSLS     r1,r1,r0
000048  4804              LDR      r0,|L8.92|
00004a  6001              STR      r1,[r0,#0]
00004c  bf00              NOP      
;;;1027   
;;;1028   	DrvCAN_LeaveInitMode();
00004e  f7fffffe          BL       DrvCAN_LeaveInitMode
;;;1029       return E_SUCCESS;
000052  2000              MOVS     r0,#0
;;;1030   }
000054  bd10              POP      {r4,pc}
;;;1031   
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      0x40180000
                  |L8.92|
                          DCD      0xe000e100

                          AREA ||i.DrvCAN_EnableWakeUp||, CODE, READONLY, ALIGN=2

                  DrvCAN_EnableWakeUp PROC
;;;1179   
;;;1180   void DrvCAN_EnableWakeUp(void)
000000  2001              MOVS     r0,#1
;;;1181   {
;;;1182       CAN->u32WU_EN = 1;
000002  4901              LDR      r1,|L9.8|
000004  6288              STR      r0,[r1,#0x28]
;;;1183   }
000006  4770              BX       lr
;;;1184   
                          ENDP

                  |L9.8|
                          DCD      0x40180140

                          AREA ||i.DrvCAN_EnterInitMode||, CODE, READONLY, ALIGN=2

                  DrvCAN_EnterInitMode PROC
;;;805     
;;;806    void DrvCAN_EnterInitMode(void)
000000  4807              LDR      r0,|L10.32|
;;;807    {
;;;808        CAN->CON.INIT = 1;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  1c40              ADDS     r0,r0,#1
00000a  4905              LDR      r1,|L10.32|
00000c  6008              STR      r0,[r1,#0]
;;;809        CAN->CON.CCE  = 1;
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  2140              MOVS     r1,#0x40
000014  4388              BICS     r0,r0,r1
000016  3040              ADDS     r0,r0,#0x40
000018  4901              LDR      r1,|L10.32|
00001a  6008              STR      r0,[r1,#0]
;;;810    }
00001c  4770              BX       lr
;;;811    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_EnterTestMode||, CODE, READONLY, ALIGN=2

                  DrvCAN_EnterTestMode PROC
;;;849    /*---------------------------------------------------------------------------------------------------------*/
;;;850    void DrvCAN_EnterTestMode(uint8_t u8TestMask)
000000  4904              LDR      r1,|L11.20|
;;;851    {
;;;852        CAN->CON.TEST = 1;
000002  6809              LDR      r1,[r1,#0]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  3180              ADDS     r1,r1,#0x80
00000a  4a02              LDR      r2,|L11.20|
00000c  6011              STR      r1,[r2,#0]
;;;853    	CAN->u32TEST = u8TestMask;
00000e  4611              MOV      r1,r2
000010  6148              STR      r0,[r1,#0x14]
;;;854    }
000012  4770              BX       lr
;;;855    
                          ENDP

                  |L11.20|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetCANBitRate||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetCANBitRate PROC
;;;145    
;;;146    int32_t DrvCAN_GetCANBitRate(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;147    {
;;;148        uint8_t u8Tseg1,u8Tseg2;    
;;;149        uint32_t u32Bpr;
;;;150    
;;;151        u8Tseg1 = CAN->BTIME.TSEG1;
000002  4812              LDR      r0,|L12.76|
000004  68c0              LDR      r0,[r0,#0xc]
000006  0500              LSLS     r0,r0,#20
000008  0f04              LSRS     r4,r0,#28
;;;152        u8Tseg2 = CAN->BTIME.TSEG2;
00000a  4810              LDR      r0,|L12.76|
00000c  68c0              LDR      r0,[r0,#0xc]
00000e  0440              LSLS     r0,r0,#17
000010  0f45              LSRS     r5,r0,#29
;;;153        u32Bpr  = (CAN->BTIME.BRP) | (CAN->BRPE.BPRE <<6);
000012  480e              LDR      r0,|L12.76|
000014  68c0              LDR      r0,[r0,#0xc]
000016  0680              LSLS     r0,r0,#26
000018  0e80              LSRS     r0,r0,#26
00001a  490c              LDR      r1,|L12.76|
00001c  6989              LDR      r1,[r1,#0x18]
00001e  0709              LSLS     r1,r1,#28
000020  0d89              LSRS     r1,r1,#22
000022  4308              ORRS     r0,r0,r1
000024  9001              STR      r0,[sp,#4]
;;;154        return (DrvSYS_GetHCLKFreq()/(u32Bpr+1)/(u8Tseg1 + u8Tseg2 + 3))/1000;
000026  f7fffffe          BL       DrvSYS_GetHCLKFreq
00002a  9000              STR      r0,[sp,#0]
00002c  9901              LDR      r1,[sp,#4]
00002e  1c49              ADDS     r1,r1,#1
000030  f7fffffe          BL       __aeabi_uidivmod
000034  4607              MOV      r7,r0
000036  1960              ADDS     r0,r4,r5
000038  1cc1              ADDS     r1,r0,#3
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       __aeabi_uidivmod
000040  4606              MOV      r6,r0
000042  217d              MOVS     r1,#0x7d
000044  00c9              LSLS     r1,r1,#3
000046  f7fffffe          BL       __aeabi_uidivmod
;;;155    }
00004a  bdfe              POP      {r1-r7,pc}
;;;156    
                          ENDP

                  |L12.76|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetRxErrCount||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetRxErrCount PROC
;;;1212   /*---------------------------------------------------------------------------------------------------------*/
;;;1213   uint32_t DrvCAN_GetRxErrCount(void)
000000  4802              LDR      r0,|L13.12|
;;;1214   {
;;;1215       return CAN->ERR.REC;
000002  6880              LDR      r0,[r0,#8]
000004  0440              LSLS     r0,r0,#17
000006  0e40              LSRS     r0,r0,#25
;;;1216   }
000008  4770              BX       lr
;;;1217   
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetTxErrCount||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetTxErrCount PROC
;;;1228   /*---------------------------------------------------------------------------------------------------------*/
;;;1229   uint32_t DrvCAN_GetTxErrCount(void)
000000  4802              LDR      r0,|L14.12|
;;;1230   {
;;;1231       return CAN->ERR.REC;
000002  6880              LDR      r0,[r0,#8]
000004  0440              LSLS     r0,r0,#17
000006  0e40              LSRS     r0,r0,#25
;;;1232   }
000008  4770              BX       lr
;;;1233   
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvCAN_GetVersion PROC
;;;1243   /*---------------------------------------------------------------------------------------------------------*/
;;;1244   int32_t DrvCAN_GetVersion(void)
000000  4800              LDR      r0,|L15.4|
;;;1245   {
;;;1246      return DRVCAN_VERSION_NUM;
;;;1247   }
000002  4770              BX       lr
;;;1248   
                          ENDP

                  |L15.4|
                          DCD      0x00030101

                          AREA ||i.DrvCAN_Init||, CODE, READONLY, ALIGN=2

                  DrvCAN_Init PROC
;;;168    
;;;169    void DrvCAN_Init(void)
000000  480c              LDR      r0,|L16.52|
;;;170    {
;;;171        /* Enable CAN0 Clock and Reset it */
;;;172        SYSCLK->APBCLK.CAN0_EN  =1;
000002  6880              LDR      r0,[r0,#8]
000004  2101              MOVS     r1,#1
000006  0609              LSLS     r1,r1,#24
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4909              LDR      r1,|L16.52|
00000e  6088              STR      r0,[r1,#8]
;;;173    	SYS->IPRSTC2.CAN0_RST   =1;  
000010  2005              MOVS     r0,#5
000012  0700              LSLS     r0,r0,#28
000014  68c0              LDR      r0,[r0,#0xc]
000016  03c9              LSLS     r1,r1,#15
000018  4388              BICS     r0,r0,r1
00001a  1840              ADDS     r0,r0,r1
00001c  2105              MOVS     r1,#5
00001e  0709              LSLS     r1,r1,#28
000020  60c8              STR      r0,[r1,#0xc]
;;;174    	SYS->IPRSTC2.CAN0_RST   =0;
000022  4608              MOV      r0,r1
000024  68c0              LDR      r0,[r0,#0xc]
000026  2101              MOVS     r1,#1
000028  0609              LSLS     r1,r1,#24
00002a  4388              BICS     r0,r0,r1
00002c  2105              MOVS     r1,#5
00002e  0709              LSLS     r1,r1,#28
000030  60c8              STR      r0,[r1,#0xc]
;;;175    }
000032  4770              BX       lr
;;;176    
                          ENDP

                  |L16.52|
                          DCD      0x50000200

                          AREA ||i.DrvCAN_InstallCallback||, CODE, READONLY, ALIGN=2

                  DrvCAN_InstallCallback PROC
;;;1084   /*---------------------------------------------------------------------------------------------------------*/
;;;1085   int32_t DrvCAN_InstallCallback(E_CAN_CALLBACK_TYPE Type, CAN_CALLBACK callbackfn)
000000  b500              PUSH     {lr}
;;;1086   {
000002  4602              MOV      r2,r0
;;;1087       switch(Type)
000004  4613              MOV      r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0607              DCB      0x06,0x07
00000c  0a0d1004          DCB      0x0a,0x0d,0x10,0x04
000010  1316              DCB      0x13,0x16
;;;1088       {
;;;1089           
;;;1090           case CALLBACK_MSG:      
;;;1091                                   CANHandler.MessageCallBackFn            = callbackfn;    
000012  480b              LDR      r0,|L17.64|
000014  6101              STR      r1,[r0,#0x10]  ; CANHandler
;;;1092                                   break;
000016  e010              B        |L17.58|
;;;1093           case CALLBACK_RXOK:     
;;;1094                                   CANHandler.RxOkCallBackFn               = callbackfn;    
000018  4809              LDR      r0,|L17.64|
00001a  6001              STR      r1,[r0,#0]  ; CANHandler
;;;1095                                   break;
00001c  e00d              B        |L17.58|
;;;1096           case CALLBACK_TXOK:     
;;;1097                                   CANHandler.TxOkCallBackFn               = callbackfn;    
00001e  4808              LDR      r0,|L17.64|
000020  6041              STR      r1,[r0,#4]  ; CANHandler
;;;1098                                   break;
000022  e00a              B        |L17.58|
;;;1099           case CALLBACK_EWARN:    
;;;1100                                   CANHandler.ErrorWarningCallBackFn       = callbackfn;    
000024  4806              LDR      r0,|L17.64|
000026  6081              STR      r1,[r0,#8]  ; CANHandler
;;;1101                                   break;
000028  e007              B        |L17.58|
;;;1102           case CALLBACK_BOFF:     
;;;1103                                   CANHandler.BusOffCallBackFn             = callbackfn;    
00002a  4805              LDR      r0,|L17.64|
00002c  60c1              STR      r1,[r0,#0xc]  ; CANHandler
;;;1104                                   break;
00002e  e004              B        |L17.58|
;;;1105           case CALLBACK_WAKEUP:   
;;;1106                                   CANHandler.WakeupCallBackFn             = callbackfn;    
000030  4803              LDR      r0,|L17.64|
000032  6141              STR      r1,[r0,#0x14]  ; CANHandler
;;;1107                                   break;
000034  e001              B        |L17.58|
;;;1108           default:
;;;1109               return E_DRVCAN_ERR_ARGUMENT;                               
000036  4803              LDR      r0,|L17.68|
                  |L17.56|
;;;1110       }
;;;1111              
;;;1112       return E_SUCCESS;
;;;1113   }
000038  bd00              POP      {pc}
                  |L17.58|
00003a  bf00              NOP                            ;1092
00003c  2000              MOVS     r0,#0                 ;1112
00003e  e7fb              B        |L17.56|
;;;1114   
                          ENDP

                  |L17.64|
                          DCD      CANHandler
                  |L17.68|
                          DCD      0xffff8583

                          AREA ||i.DrvCAN_IsIntPending||, CODE, READONLY, ALIGN=2

                  DrvCAN_IsIntPending PROC
;;;919    
;;;920    uint32_t DrvCAN_IsIntPending(uint8_t u8MsgObj)
000000  4601              MOV      r1,r0
;;;921    {
;;;922      	return (u8MsgObj < 16 ? CAN->u32IPND1 & (1 << u8MsgObj) : CAN->u32IPND2 & (1 << (u8MsgObj-16)));
000002  2910              CMP      r1,#0x10
000004  da05              BGE      |L18.18|
000006  4807              LDR      r0,|L18.36|
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  408a              LSLS     r2,r2,r1
00000e  4010              ANDS     r0,r0,r2
                  |L18.16|
;;;923    }
000010  4770              BX       lr
                  |L18.18|
000012  4804              LDR      r0,|L18.36|
000014  6840              LDR      r0,[r0,#4]            ;922
000016  460a              MOV      r2,r1                 ;922
000018  3a10              SUBS     r2,r2,#0x10           ;922
00001a  2301              MOVS     r3,#1                 ;922
00001c  4093              LSLS     r3,r3,r2              ;922
00001e  4018              ANDS     r0,r0,r3              ;922
000020  e7f6              B        |L18.16|
;;;924    
                          ENDP

000022  0000              DCW      0x0000
                  |L18.36|
                          DCD      0x40180140

                          AREA ||i.DrvCAN_IsNewDataReceived||, CODE, READONLY, ALIGN=2

                  DrvCAN_IsNewDataReceived PROC
;;;886    
;;;887    uint32_t DrvCAN_IsNewDataReceived(uint8_t u8MsgObj)
000000  4601              MOV      r1,r0
;;;888    {
;;;889        return (u8MsgObj < 16 ? CAN->u32NDAT1 & (1 << u8MsgObj) : CAN->u32NDAT2 & (1 << (u8MsgObj-16)));
000002  2910              CMP      r1,#0x10
000004  da05              BGE      |L19.18|
000006  4807              LDR      r0,|L19.36|
000008  6a00              LDR      r0,[r0,#0x20]
00000a  2201              MOVS     r2,#1
00000c  408a              LSLS     r2,r2,r1
00000e  4010              ANDS     r0,r0,r2
                  |L19.16|
;;;890    }
000010  4770              BX       lr
                  |L19.18|
000012  4804              LDR      r0,|L19.36|
000014  6a40              LDR      r0,[r0,#0x24]         ;889
000016  460a              MOV      r2,r1                 ;889
000018  3a10              SUBS     r2,r2,#0x10           ;889
00001a  2301              MOVS     r3,#1                 ;889
00001c  4093              LSLS     r3,r3,r2              ;889
00001e  4018              ANDS     r0,r0,r3              ;889
000020  e7f6              B        |L19.16|
;;;891    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0x40180100

                          AREA ||i.DrvCAN_IsObjectValid||, CODE, READONLY, ALIGN=2

                  DrvCAN_IsObjectValid PROC
;;;935    /*---------------------------------------------------------------------------------------------------------*/
;;;936    uint32_t DrvCAN_IsObjectValid(uint8_t u8MsgObj)
000000  4601              MOV      r1,r0
;;;937    {
;;;938      	return (u8MsgObj < 16 ? CAN->u32MVLD1 & (1 << u8MsgObj) : CAN->u32MVLD2 & (1 << (u8MsgObj-16)));
000002  2910              CMP      r1,#0x10
000004  da05              BGE      |L20.18|
000006  4807              LDR      r0,|L20.36|
000008  6a00              LDR      r0,[r0,#0x20]
00000a  2201              MOVS     r2,#1
00000c  408a              LSLS     r2,r2,r1
00000e  4010              ANDS     r0,r0,r2
                  |L20.16|
;;;939    }
000010  4770              BX       lr
                  |L20.18|
000012  4804              LDR      r0,|L20.36|
000014  6a40              LDR      r0,[r0,#0x24]         ;938
000016  460a              MOV      r2,r1                 ;938
000018  3a10              SUBS     r2,r2,#0x10           ;938
00001a  2301              MOVS     r3,#1                 ;938
00001c  4093              LSLS     r3,r3,r2              ;938
00001e  4018              ANDS     r0,r0,r3              ;938
000020  e7f6              B        |L20.16|
;;;940    
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
                          DCD      0x40180140

                          AREA ||i.DrvCAN_IsTxRqstPending||, CODE, READONLY, ALIGN=2

                  DrvCAN_IsTxRqstPending PROC
;;;902    
;;;903    uint32_t DrvCAN_IsTxRqstPending(uint8_t u8MsgObj)
000000  4601              MOV      r1,r0
;;;904    {
;;;905      	return (u8MsgObj < 16 ? CAN->u32TXREQ1 & (1 << u8MsgObj) : CAN->u32TXREQ2 & (1 << (u8MsgObj-16)));
000002  2910              CMP      r1,#0x10
000004  da05              BGE      |L21.18|
000006  4807              LDR      r0,|L21.36|
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  408a              LSLS     r2,r2,r1
00000e  4010              ANDS     r0,r0,r2
                  |L21.16|
;;;906    }
000010  4770              BX       lr
                  |L21.18|
000012  4804              LDR      r0,|L21.36|
000014  6840              LDR      r0,[r0,#4]            ;905
000016  460a              MOV      r2,r1                 ;905
000018  3a10              SUBS     r2,r2,#0x10           ;905
00001a  2301              MOVS     r3,#1                 ;905
00001c  4093              LSLS     r3,r3,r2              ;905
00001e  4018              ANDS     r0,r0,r3              ;905
000020  e7f6              B        |L21.16|
;;;907    
                          ENDP

000022  0000              DCW      0x0000
                  |L21.36|
                          DCD      0x40180100

                          AREA ||i.DrvCAN_LeaveInitMode||, CODE, READONLY, ALIGN=2

                  DrvCAN_LeaveInitMode PROC
;;;824    
;;;825    void DrvCAN_LeaveInitMode(void)
000000  4809              LDR      r0,|L22.40|
;;;826    {
;;;827        CAN->CON.INIT = 0;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4907              LDR      r1,|L22.40|
00000a  6008              STR      r0,[r1,#0]
;;;828        CAN->CON.CCE  = 0;
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  2140              MOVS     r1,#0x40
000012  4388              BICS     r0,r0,r1
000014  4904              LDR      r1,|L22.40|
000016  6008              STR      r0,[r1,#0]
;;;829       	while ( CAN->CON.INIT==1);       /* Check INIT bit is released */
000018  bf00              NOP      
                  |L22.26|
00001a  4803              LDR      r0,|L22.40|
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2801              CMP      r0,#1
000024  d0f9              BEQ      |L22.26|
;;;830    }
000026  4770              BX       lr
;;;831    
                          ENDP

                  |L22.40|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_LeaveTestMode||, CODE, READONLY, ALIGN=2

                  DrvCAN_LeaveTestMode PROC
;;;867    
;;;868    void DrvCAN_LeaveTestMode(void)
000000  4809              LDR      r0,|L23.40|
;;;869    {
;;;870    	CAN->CON.TEST = 1;
000002  6800              LDR      r0,[r0,#0]
000004  2180              MOVS     r1,#0x80
000006  4388              BICS     r0,r0,r1
000008  3080              ADDS     r0,r0,#0x80
00000a  4907              LDR      r1,|L23.40|
00000c  6008              STR      r0,[r1,#0]
;;;871      	CAN->u32TEST &= ~(CAN_TESTR_LBACK | CAN_TESTR_SILENT | CAN_TESTR_BASIC);
00000e  4608              MOV      r0,r1
000010  6940              LDR      r0,[r0,#0x14]
000012  211c              MOVS     r1,#0x1c
000014  4388              BICS     r0,r0,r1
000016  4904              LDR      r1,|L23.40|
000018  6148              STR      r0,[r1,#0x14]
;;;872      	CAN->CON.TEST = 0;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  2180              MOVS     r1,#0x80
000020  4388              BICS     r0,r0,r1
000022  4901              LDR      r1,|L23.40|
000024  6008              STR      r0,[r1,#0]
;;;873    }
000026  4770              BX       lr
;;;874    
                          ENDP

                  |L23.40|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_Open||, CODE, READONLY, ALIGN=2

                  DrvCAN_Open PROC
;;;219    
;;;220    int32_t DrvCAN_Open(uint32_t u32kbps)
000000  b5fe              PUSH     {r1-r7,lr}
;;;221    {
000002  4604              MOV      r4,r0
;;;222        uint8_t u8Tseg1,u8Tseg2;    
;;;223        uint32_t u32Bpr;
;;;224        uint32_t u32value;
;;;225    
;;;226        DrvCAN_EnterInitMode();
000004  f7fffffe          BL       DrvCAN_EnterInitMode
;;;227    
;;;228        u8Tseg1 = 2;
000008  2502              MOVS     r5,#2
;;;229        u8Tseg2 = 3;
00000a  2603              MOVS     r6,#3
;;;230    
;;;231        u32value = DrvSYS_GetHCLKFreq()/1000;
00000c  f7fffffe          BL       DrvSYS_GetHCLKFreq
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  9001              STR      r0,[sp,#4]
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  9002              STR      r0,[sp,#8]
;;;232        if(u32kbps*8 < (u32value/2))
00001c  00e1              LSLS     r1,r4,#3
00001e  9802              LDR      r0,[sp,#8]
000020  0840              LSRS     r0,r0,#1
000022  4281              CMP      r1,r0
000024  d211              BCS      |L24.74|
;;;233            u32Bpr  = DrvSYS_GetHCLKFreq()/(u32kbps*1000) / (u8Tseg1 + u8Tseg2 + 3) -1;
000026  f7fffffe          BL       DrvSYS_GetHCLKFreq
00002a  9000              STR      r0,[sp,#0]
00002c  207d              MOVS     r0,#0x7d
00002e  00c0              LSLS     r0,r0,#3
000030  4360              MULS     r0,r4,r0
000032  4601              MOV      r1,r0
000034  9800              LDR      r0,[sp,#0]
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  9001              STR      r0,[sp,#4]
00003c  19a8              ADDS     r0,r5,r6
00003e  1cc1              ADDS     r1,r0,#3
000040  9801              LDR      r0,[sp,#4]
000042  f7fffffe          BL       __aeabi_uidivmod
000046  1e47              SUBS     r7,r0,#1
000048  e012              B        |L24.112|
                  |L24.74|
;;;234        else
;;;235        {
;;;236            u8Tseg1 = 2;
00004a  2502              MOVS     r5,#2
;;;237            u8Tseg2 = 1;
00004c  2601              MOVS     r6,#1
;;;238            u32Bpr  = DrvSYS_GetHCLKFreq()/(u32kbps*1000) / (u8Tseg1 + u8Tseg2 + 3) -1;
00004e  f7fffffe          BL       DrvSYS_GetHCLKFreq
000052  9000              STR      r0,[sp,#0]
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  4360              MULS     r0,r4,r0
00005a  4601              MOV      r1,r0
00005c  9800              LDR      r0,[sp,#0]
00005e  f7fffffe          BL       __aeabi_uidivmod
000062  9001              STR      r0,[sp,#4]
000064  19a8              ADDS     r0,r5,r6
000066  1cc1              ADDS     r1,r0,#3
000068  9801              LDR      r0,[sp,#4]
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  1e47              SUBS     r7,r0,#1
                  |L24.112|
;;;239        }
;;;240    
;;;241        CAN->BTIME.TSEG1 = u8Tseg1;  
000070  481e              LDR      r0,|L24.236|
000072  68c0              LDR      r0,[r0,#0xc]
000074  210f              MOVS     r1,#0xf
000076  0209              LSLS     r1,r1,#8
000078  4388              BICS     r0,r0,r1
00007a  0229              LSLS     r1,r5,#8
00007c  220f              MOVS     r2,#0xf
00007e  0212              LSLS     r2,r2,#8
000080  4011              ANDS     r1,r1,r2
000082  4308              ORRS     r0,r0,r1
000084  4919              LDR      r1,|L24.236|
000086  60c8              STR      r0,[r1,#0xc]
;;;242        CAN->BTIME.TSEG2 = u8Tseg2;  
000088  4608              MOV      r0,r1
00008a  68c0              LDR      r0,[r0,#0xc]
00008c  2107              MOVS     r1,#7
00008e  0309              LSLS     r1,r1,#12
000090  4388              BICS     r0,r0,r1
000092  0331              LSLS     r1,r6,#12
000094  2207              MOVS     r2,#7
000096  0312              LSLS     r2,r2,#12
000098  4011              ANDS     r1,r1,r2
00009a  4308              ORRS     r0,r0,r1
00009c  4913              LDR      r1,|L24.236|
00009e  60c8              STR      r0,[r1,#0xc]
;;;243        CAN->BTIME.BRP   = u32Bpr & 0x3F ;  
0000a0  4608              MOV      r0,r1
0000a2  68c0              LDR      r0,[r0,#0xc]
0000a4  0980              LSRS     r0,r0,#6
0000a6  0180              LSLS     r0,r0,#6
0000a8  06b9              LSLS     r1,r7,#26
0000aa  0e89              LSRS     r1,r1,#26
0000ac  4308              ORRS     r0,r0,r1
0000ae  490f              LDR      r1,|L24.236|
0000b0  60c8              STR      r0,[r1,#0xc]
;;;244        CAN->u32BRPE     = (u32Bpr >> 6) & 0x0F;
0000b2  05b8              LSLS     r0,r7,#22
0000b4  0f00              LSRS     r0,r0,#28
0000b6  6188              STR      r0,[r1,#0x18]
;;;245        
;;;246        /* Check the result is OK */
;;;247        if ((u32kbps < (DrvCAN_GetCANBitRate()*95/100)) || (u32kbps > (DrvCAN_GetCANBitRate()*105/100)))
0000b8  f7fffffe          BL       DrvCAN_GetCANBitRate
0000bc  215f              MOVS     r1,#0x5f
0000be  4348              MULS     r0,r1,r0
0000c0  2164              MOVS     r1,#0x64
0000c2  9001              STR      r0,[sp,#4]
0000c4  f7fffffe          BL       __aeabi_idivmod
0000c8  42a0              CMP      r0,r4
0000ca  d809              BHI      |L24.224|
0000cc  f7fffffe          BL       DrvCAN_GetCANBitRate
0000d0  2169              MOVS     r1,#0x69
0000d2  4348              MULS     r0,r1,r0
0000d4  2164              MOVS     r1,#0x64
0000d6  9001              STR      r0,[sp,#4]
0000d8  f7fffffe          BL       __aeabi_idivmod
0000dc  42a0              CMP      r0,r4
0000de  d201              BCS      |L24.228|
                  |L24.224|
;;;248        {
;;;249            DEBUG_PRINTF("\nCurrent CAN bitrate = %d\n",DrvCAN_GetCANBitRate());
;;;250            return E_DRVCAN_ERR_BITRATE;        
0000e0  4803              LDR      r0,|L24.240|
                  |L24.226|
;;;251        }
;;;252    
;;;253    	DrvCAN_LeaveInitMode();
;;;254        return E_SUCCESS;
;;;255    
;;;256    }
0000e2  bdfe              POP      {r1-r7,pc}
                  |L24.228|
0000e4  f7fffffe          BL       DrvCAN_LeaveInitMode
0000e8  2000              MOVS     r0,#0                 ;254
0000ea  e7fa              B        |L24.226|
;;;257    
                          ENDP

                  |L24.236|
                          DCD      0x40180000
                  |L24.240|
                          DCD      0xffff8584

                          AREA ||i.DrvCAN_ReadMsgObj||, CODE, READONLY, ALIGN=2

                  DrvCAN_ReadMsgObj PROC
;;;598    
;;;599    int32_t DrvCAN_ReadMsgObj(uint8_t u8MsgObj, uint8_t u8Release, STR_CANMSG_T* pCanMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;600    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;601        if (!DrvCAN_IsNewDataReceived(u8MsgObj))
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       DrvCAN_IsNewDataReceived
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L25.22|
;;;602        {
;;;603            return E_DRVCAN_NO_PENDING_MSG;
000012  4834              LDR      r0,|L25.228|
                  |L25.20|
;;;604        }
;;;605    
;;;606        CAN->STATUS.RXOK =0;
;;;607    
;;;608        /* read the message contents*/
;;;609        CAN->sMsgObj[1].u32CMASK = CAN_CMASK_MASK
;;;610                              | CAN_CMASK_ARB
;;;611                              | CAN_CMASK_CONTROL
;;;612                              | CAN_CMASK_CLRINTPND
;;;613                              | (u8Release ? CAN_CMASK_TXRQSTNEWDAT : 0)
;;;614                              | CAN_CMASK_DATAA
;;;615                              | CAN_CMASK_DATAB;
;;;616    
;;;617        CAN->sMsgObj[1].u32CREQ = 1 + u8MsgObj;
;;;618    
;;;619        if (CAN->sMsgObj[1].CREQ.BUSY ==1)
;;;620        {
;;;621            return E_DRVCAN_NO_USEFUL_INTERFACE;
;;;622        }
;;;623    
;;;624        if ((CAN->sMsgObj[1].ARB2.XTD) == 0)
;;;625        {
;;;626            /* standard ID*/
;;;627            pCanMsg->IdType = CAN_STD_ID;
;;;628            pCanMsg->Id     = (CAN->sMsgObj[1].ARB2.ID28_16 >> 2);
;;;629        }
;;;630        else
;;;631        {
;;;632            /* extended ID*/
;;;633            pCanMsg->IdType = CAN_EXT_ID;
;;;634            pCanMsg->Id  = (((CAN->sMsgObj[1].u32ARB2) & 0x1FFF)<<16) | CAN->sMsgObj[1].u32ARB1; 
;;;635        }
;;;636        
;;;637        pCanMsg->DLC     = CAN->sMsgObj[1].MCON.DLC;
;;;638        pCanMsg->Data[0] = CAN->sMsgObj[1].DAT_A1.DATA0;
;;;639        pCanMsg->Data[1] = CAN->sMsgObj[1].DAT_A1.DATA1;
;;;640        pCanMsg->Data[2] = CAN->sMsgObj[1].DAT_A2.DATA2;
;;;641        pCanMsg->Data[3] = CAN->sMsgObj[1].DAT_A2.DATA3;
;;;642        pCanMsg->Data[4] = CAN->sMsgObj[1].DAT_B1.DATA4;
;;;643        pCanMsg->Data[5] = CAN->sMsgObj[1].DAT_B1.DATA5;
;;;644        pCanMsg->Data[6] = CAN->sMsgObj[1].DAT_B2.DATA6;
;;;645        pCanMsg->Data[7] = CAN->sMsgObj[1].DAT_B2.DATA7;
;;;646     
;;;647        return E_SUCCESS;
;;;648    }
000014  bd70              POP      {r4-r6,pc}
                  |L25.22|
000016  4834              LDR      r0,|L25.232|
000018  6840              LDR      r0,[r0,#4]            ;606
00001a  2110              MOVS     r1,#0x10              ;606
00001c  4388              BICS     r0,r0,r1              ;606
00001e  4932              LDR      r1,|L25.232|
000020  6048              STR      r0,[r1,#4]            ;606
000022  2e00              CMP      r6,#0                 ;609
000024  d001              BEQ      |L25.42|
000026  2004              MOVS     r0,#4                 ;613
000028  e000              B        |L25.44|
                  |L25.42|
00002a  2000              MOVS     r0,#0                 ;613
                  |L25.44|
00002c  217b              MOVS     r1,#0x7b              ;613
00002e  4301              ORRS     r1,r1,r0              ;613
000030  482d              LDR      r0,|L25.232|
000032  3020              ADDS     r0,r0,#0x20           ;613
000034  6641              STR      r1,[r0,#0x64]         ;613
000036  1c68              ADDS     r0,r5,#1              ;617
000038  492b              LDR      r1,|L25.232|
00003a  3120              ADDS     r1,r1,#0x20           ;617
00003c  6608              STR      r0,[r1,#0x60]         ;617
00003e  4608              MOV      r0,r1                 ;619
000040  6e00              LDR      r0,[r0,#0x60]         ;619
000042  0400              LSLS     r0,r0,#16             ;619
000044  0fc0              LSRS     r0,r0,#31             ;619
000046  2801              CMP      r0,#1                 ;619
000048  d102              BNE      |L25.80|
00004a  4826              LDR      r0,|L25.228|
00004c  1c40              ADDS     r0,r0,#1              ;621
00004e  e7e1              B        |L25.20|
                  |L25.80|
000050  4825              LDR      r0,|L25.232|
000052  3020              ADDS     r0,r0,#0x20           ;624
000054  6f40              LDR      r0,[r0,#0x74]         ;624
000056  0440              LSLS     r0,r0,#17             ;624
000058  0fc0              LSRS     r0,r0,#31             ;624
00005a  d107              BNE      |L25.108|
00005c  6020              STR      r0,[r4,#0]            ;627
00005e  4822              LDR      r0,|L25.232|
000060  3020              ADDS     r0,r0,#0x20           ;628
000062  6f40              LDR      r0,[r0,#0x74]         ;628
000064  04c0              LSLS     r0,r0,#19             ;628
000066  0d40              LSRS     r0,r0,#21             ;628
000068  60a0              STR      r0,[r4,#8]            ;628
00006a  e00b              B        |L25.132|
                  |L25.108|
00006c  2001              MOVS     r0,#1                 ;633
00006e  6020              STR      r0,[r4,#0]            ;633
000070  481d              LDR      r0,|L25.232|
000072  3020              ADDS     r0,r0,#0x20           ;634
000074  6f40              LDR      r0,[r0,#0x74]         ;634
000076  04c0              LSLS     r0,r0,#19             ;634
000078  08c1              LSRS     r1,r0,#3              ;634
00007a  481b              LDR      r0,|L25.232|
00007c  3020              ADDS     r0,r0,#0x20           ;634
00007e  6f00              LDR      r0,[r0,#0x70]         ;634
000080  4301              ORRS     r1,r1,r0              ;634
000082  60a1              STR      r1,[r4,#8]            ;634
                  |L25.132|
000084  4818              LDR      r0,|L25.232|
000086  3020              ADDS     r0,r0,#0x20           ;637
000088  6f80              LDR      r0,[r0,#0x78]         ;637
00008a  0700              LSLS     r0,r0,#28             ;637
00008c  0f00              LSRS     r0,r0,#28             ;637
00008e  7320              STRB     r0,[r4,#0xc]          ;637
000090  4815              LDR      r0,|L25.232|
000092  3020              ADDS     r0,r0,#0x20           ;638
000094  6fc0              LDR      r0,[r0,#0x7c]         ;638
000096  7360              STRB     r0,[r4,#0xd]          ;638
000098  4813              LDR      r0,|L25.232|
00009a  3020              ADDS     r0,r0,#0x20           ;639
00009c  6fc0              LDR      r0,[r0,#0x7c]         ;639
00009e  0400              LSLS     r0,r0,#16             ;639
0000a0  0e00              LSRS     r0,r0,#24             ;639
0000a2  73a0              STRB     r0,[r4,#0xe]          ;639
0000a4  4810              LDR      r0,|L25.232|
0000a6  3080              ADDS     r0,r0,#0x80           ;640
0000a8  6a00              LDR      r0,[r0,#0x20]         ;640
0000aa  73e0              STRB     r0,[r4,#0xf]          ;640
0000ac  480e              LDR      r0,|L25.232|
0000ae  3080              ADDS     r0,r0,#0x80           ;641
0000b0  6a00              LDR      r0,[r0,#0x20]         ;641
0000b2  0400              LSLS     r0,r0,#16             ;641
0000b4  0e00              LSRS     r0,r0,#24             ;641
0000b6  7420              STRB     r0,[r4,#0x10]         ;641
0000b8  480b              LDR      r0,|L25.232|
0000ba  3080              ADDS     r0,r0,#0x80           ;642
0000bc  6a40              LDR      r0,[r0,#0x24]         ;642
0000be  7460              STRB     r0,[r4,#0x11]         ;642
0000c0  4809              LDR      r0,|L25.232|
0000c2  3080              ADDS     r0,r0,#0x80           ;643
0000c4  6a40              LDR      r0,[r0,#0x24]         ;643
0000c6  0400              LSLS     r0,r0,#16             ;643
0000c8  0e00              LSRS     r0,r0,#24             ;643
0000ca  74a0              STRB     r0,[r4,#0x12]         ;643
0000cc  4806              LDR      r0,|L25.232|
0000ce  3080              ADDS     r0,r0,#0x80           ;644
0000d0  6a80              LDR      r0,[r0,#0x28]         ;644
0000d2  74e0              STRB     r0,[r4,#0x13]         ;644
0000d4  4804              LDR      r0,|L25.232|
0000d6  3080              ADDS     r0,r0,#0x80           ;645
0000d8  6a80              LDR      r0,[r0,#0x28]         ;645
0000da  0400              LSLS     r0,r0,#16             ;645
0000dc  0e00              LSRS     r0,r0,#24             ;645
0000de  7520              STRB     r0,[r4,#0x14]         ;645
0000e0  2000              MOVS     r0,#0                 ;647
0000e2  e797              B        |L25.20|
;;;649    
                          ENDP

                  |L25.228|
                          DCD      0xffff8585
                  |L25.232|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_ResetAllMsgObj||, CODE, READONLY, ALIGN=1

                  DrvCAN_ResetAllMsgObj PROC
;;;362    
;;;363    void DrvCAN_ResetAllMsgObj(void)
000000  b510              PUSH     {r4,lr}
;;;364    {
;;;365        uint32_t i=0;
000002  2400              MOVS     r4,#0
;;;366        for (i = 0; i < 32; i++)
000004  bf00              NOP      
000006  e003              B        |L26.16|
                  |L26.8|
;;;367            DrvCAN_ResetMsgObj(i);
000008  b2e0              UXTB     r0,r4
00000a  f7fffffe          BL       DrvCAN_ResetMsgObj
00000e  1c64              ADDS     r4,r4,#1              ;366
                  |L26.16|
000010  2c20              CMP      r4,#0x20              ;366
000012  d3f9              BCC      |L26.8|
;;;368    }
000014  bd10              POP      {r4,pc}
;;;369    
                          ENDP


                          AREA ||i.DrvCAN_ResetIF||, CODE, READONLY, ALIGN=2

                  DrvCAN_ResetIF PROC
;;;951    /*---------------------------------------------------------------------------------------------------------*/
;;;952    void DrvCAN_ResetIF(uint8_t u8IF_Num)
000000  2801              CMP      r0,#1
;;;953    {
;;;954    	if(u8IF_Num > 1)
000002  dd00              BLE      |L27.6|
                  |L27.4|
;;;955            return;
;;;956        CAN->sMsgObj[u8IF_Num].u32CREQ     = 0x0;			// set bit15 for sending
;;;957    	CAN->sMsgObj[u8IF_Num].u32CMASK    = 0x0;
;;;958    	CAN->sMsgObj[u8IF_Num].u32MASK1    = 0x0;			// useless in basic mode
;;;959    	CAN->sMsgObj[u8IF_Num].u32MASK2    = 0x0;		    // useless in basic mode
;;;960    	CAN->sMsgObj[u8IF_Num].u32ARB1     = 0x0;		    // ID15~0
;;;961    	CAN->sMsgObj[u8IF_Num].u32ARB2     = 0x0;		    // MsgVal, eXt, xmt, ID28~16
;;;962    	CAN->sMsgObj[u8IF_Num].u32MCON     = 0x0;  	    	// DLC
;;;963    	CAN->sMsgObj[u8IF_Num].u32DAT_A1   = 0x0;			// data0,1
;;;964    	CAN->sMsgObj[u8IF_Num].u32DAT_A2   = 0x0;			// data2,3
;;;965    	CAN->sMsgObj[u8IF_Num].u32DAT_B1   = 0x0;			// data4,5
;;;966    	CAN->sMsgObj[u8IF_Num].u32DAT_B2   = 0x0;			// data6,7
;;;967    }
000004  4770              BX       lr
                  |L27.6|
000006  2300              MOVS     r3,#0                 ;956
000008  491b              LDR      r1,|L27.120|
00000a  2260              MOVS     r2,#0x60              ;956
00000c  4342              MULS     r2,r0,r2              ;956
00000e  508b              STR      r3,[r1,r2]            ;956
000010  2260              MOVS     r2,#0x60              ;957
000012  4342              MULS     r2,r0,r2              ;957
000014  1889              ADDS     r1,r1,r2              ;957
000016  604b              STR      r3,[r1,#4]            ;957
000018  4917              LDR      r1,|L27.120|
00001a  2260              MOVS     r2,#0x60              ;958
00001c  4342              MULS     r2,r0,r2              ;958
00001e  1889              ADDS     r1,r1,r2              ;958
000020  608b              STR      r3,[r1,#8]            ;958
000022  4915              LDR      r1,|L27.120|
000024  2260              MOVS     r2,#0x60              ;959
000026  4342              MULS     r2,r0,r2              ;959
000028  1889              ADDS     r1,r1,r2              ;959
00002a  60cb              STR      r3,[r1,#0xc]          ;959
00002c  4912              LDR      r1,|L27.120|
00002e  2260              MOVS     r2,#0x60              ;960
000030  4342              MULS     r2,r0,r2              ;960
000032  1889              ADDS     r1,r1,r2              ;960
000034  610b              STR      r3,[r1,#0x10]         ;960
000036  4910              LDR      r1,|L27.120|
000038  2260              MOVS     r2,#0x60              ;961
00003a  4342              MULS     r2,r0,r2              ;961
00003c  1889              ADDS     r1,r1,r2              ;961
00003e  614b              STR      r3,[r1,#0x14]         ;961
000040  490d              LDR      r1,|L27.120|
000042  2260              MOVS     r2,#0x60              ;962
000044  4342              MULS     r2,r0,r2              ;962
000046  1889              ADDS     r1,r1,r2              ;962
000048  618b              STR      r3,[r1,#0x18]         ;962
00004a  490b              LDR      r1,|L27.120|
00004c  2260              MOVS     r2,#0x60              ;963
00004e  4342              MULS     r2,r0,r2              ;963
000050  1889              ADDS     r1,r1,r2              ;963
000052  61cb              STR      r3,[r1,#0x1c]         ;963
000054  4908              LDR      r1,|L27.120|
000056  2260              MOVS     r2,#0x60              ;964
000058  4342              MULS     r2,r0,r2              ;964
00005a  1889              ADDS     r1,r1,r2              ;964
00005c  620b              STR      r3,[r1,#0x20]         ;964
00005e  4906              LDR      r1,|L27.120|
000060  2260              MOVS     r2,#0x60              ;965
000062  4342              MULS     r2,r0,r2              ;965
000064  1889              ADDS     r1,r1,r2              ;965
000066  624b              STR      r3,[r1,#0x24]         ;965
000068  4903              LDR      r1,|L27.120|
00006a  2260              MOVS     r2,#0x60              ;966
00006c  4342              MULS     r2,r0,r2              ;966
00006e  1889              ADDS     r1,r1,r2              ;966
000070  628b              STR      r3,[r1,#0x28]         ;966
000072  bf00              NOP      
000074  e7c6              B        |L27.4|
;;;968    
                          ENDP

000076  0000              DCW      0x0000
                  |L27.120|
                          DCD      0x40180020

                          AREA ||i.DrvCAN_ResetMsgObj||, CODE, READONLY, ALIGN=2

                  DrvCAN_ResetMsgObj PROC
;;;323    
;;;324    int32_t DrvCAN_ResetMsgObj(uint8_t u8MsgObj)
000000  b570              PUSH     {r4-r6,lr}
;;;325    {
000002  4605              MOV      r5,r0
;;;326        uint8_t u8MsgIfNum=0;
000004  2400              MOVS     r4,#0
;;;327    
;;;328        if ((u8MsgIfNum = GetFreeIF()) == 2)
000006  f7fffffe          BL       GetFreeIF
00000a  b2c0              UXTB     r0,r0
00000c  4604              MOV      r4,r0
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L28.22|
;;;329        {
;;;330            return E_DRVCAN_NO_USEFUL_INTERFACE;
000012  481e              LDR      r0,|L28.140|
                  |L28.20|
;;;331        }
;;;332    
;;;333        CAN->sMsgObj[u8MsgIfNum].u32CMASK  = 0xF3;  /*CAN_CMASK_WRRD| CAN_CMASK_MASK | CAN_CMASK_ARB 
;;;334                                                  | CAN_CMASK_CONTROL | CAN_CMASK_DATAA  | CAN_CMASK_DATAB; */
;;;335        CAN->sMsgObj[u8MsgIfNum].u32MASK1  = 0;
;;;336        CAN->sMsgObj[u8MsgIfNum].u32MASK2  = 0;
;;;337    
;;;338        CAN->sMsgObj[u8MsgIfNum].u32ARB1   = 0;
;;;339        CAN->sMsgObj[u8MsgIfNum].u32ARB2   = 0;
;;;340    
;;;341        CAN->sMsgObj[u8MsgIfNum].u32MCON   = 0;
;;;342        CAN->sMsgObj[u8MsgIfNum].u32DAT_A1 = 0;
;;;343        CAN->sMsgObj[u8MsgIfNum].u32DAT_A2 = 0;
;;;344        CAN->sMsgObj[u8MsgIfNum].u32DAT_B1 = 0;
;;;345        CAN->sMsgObj[u8MsgIfNum].u32DAT_B2 = 0;
;;;346    
;;;347        CAN->sMsgObj[u8MsgIfNum].u32CREQ   = 1 + u8MsgObj;
;;;348    
;;;349        return E_SUCCESS;
;;;350    }
000014  bd70              POP      {r4-r6,pc}
                  |L28.22|
000016  22f3              MOVS     r2,#0xf3              ;333
000018  481d              LDR      r0,|L28.144|
00001a  2160              MOVS     r1,#0x60              ;333
00001c  4361              MULS     r1,r4,r1              ;333
00001e  1840              ADDS     r0,r0,r1              ;333
000020  6042              STR      r2,[r0,#4]            ;333
000022  2200              MOVS     r2,#0                 ;335
000024  481a              LDR      r0,|L28.144|
000026  2160              MOVS     r1,#0x60              ;335
000028  4361              MULS     r1,r4,r1              ;335
00002a  1840              ADDS     r0,r0,r1              ;335
00002c  6082              STR      r2,[r0,#8]            ;335
00002e  4818              LDR      r0,|L28.144|
000030  2160              MOVS     r1,#0x60              ;336
000032  4361              MULS     r1,r4,r1              ;336
000034  1840              ADDS     r0,r0,r1              ;336
000036  60c2              STR      r2,[r0,#0xc]          ;336
000038  4815              LDR      r0,|L28.144|
00003a  2160              MOVS     r1,#0x60              ;338
00003c  4361              MULS     r1,r4,r1              ;338
00003e  1840              ADDS     r0,r0,r1              ;338
000040  6102              STR      r2,[r0,#0x10]         ;338
000042  4813              LDR      r0,|L28.144|
000044  2160              MOVS     r1,#0x60              ;339
000046  4361              MULS     r1,r4,r1              ;339
000048  1840              ADDS     r0,r0,r1              ;339
00004a  6142              STR      r2,[r0,#0x14]         ;339
00004c  4810              LDR      r0,|L28.144|
00004e  2160              MOVS     r1,#0x60              ;341
000050  4361              MULS     r1,r4,r1              ;341
000052  1840              ADDS     r0,r0,r1              ;341
000054  6182              STR      r2,[r0,#0x18]         ;341
000056  480e              LDR      r0,|L28.144|
000058  2160              MOVS     r1,#0x60              ;342
00005a  4361              MULS     r1,r4,r1              ;342
00005c  1840              ADDS     r0,r0,r1              ;342
00005e  61c2              STR      r2,[r0,#0x1c]         ;342
000060  480b              LDR      r0,|L28.144|
000062  2160              MOVS     r1,#0x60              ;343
000064  4361              MULS     r1,r4,r1              ;343
000066  1840              ADDS     r0,r0,r1              ;343
000068  6202              STR      r2,[r0,#0x20]         ;343
00006a  4809              LDR      r0,|L28.144|
00006c  2160              MOVS     r1,#0x60              ;344
00006e  4361              MULS     r1,r4,r1              ;344
000070  1840              ADDS     r0,r0,r1              ;344
000072  6242              STR      r2,[r0,#0x24]         ;344
000074  4806              LDR      r0,|L28.144|
000076  2160              MOVS     r1,#0x60              ;345
000078  4361              MULS     r1,r4,r1              ;345
00007a  1840              ADDS     r0,r0,r1              ;345
00007c  6282              STR      r2,[r0,#0x28]         ;345
00007e  1c68              ADDS     r0,r5,#1              ;347
000080  4903              LDR      r1,|L28.144|
000082  2260              MOVS     r2,#0x60              ;347
000084  4362              MULS     r2,r4,r2              ;347
000086  5088              STR      r0,[r1,r2]            ;347
000088  2000              MOVS     r0,#0                 ;349
00008a  e7c3              B        |L28.20|
;;;351    
                          ENDP

                  |L28.140|
                          DCD      0xffff8586
                  |L28.144|
                          DCD      0x40180020

                          AREA ||i.DrvCAN_SetMsgObjMask||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetMsgObjMask PROC
;;;442    
;;;443    int32_t DrvCAN_SetMsgObjMask(uint8_t u8MsgObj,STR_CANMASK_T* MaskMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;444    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;445        uint8_t u8MsgIfNum=0;
000006  2400              MOVS     r4,#0
;;;446    
;;;447        if ((u8MsgIfNum = GetFreeIF()) == 2)                /* Check Free Interface for configure */
000008  f7fffffe          BL       GetFreeIF
00000c  b2c0              UXTB     r0,r0
00000e  4604              MOV      r4,r0
000010  2802              CMP      r0,#2
000012  d101              BNE      |L29.24|
;;;448        {
;;;449            return E_DRVCAN_NO_USEFUL_INTERFACE;
000014  4832              LDR      r0,|L29.224|
                  |L29.22|
;;;450        }
;;;451    			 
;;;452        if (MaskMsg->u8IdType == CAN_STD_ID)	        /* standard ID*/
;;;453        {
;;;454            CAN->sMsgObj[u8MsgIfNum].u32MASK1 =  0;
;;;455    		CAN->sMsgObj[u8MsgIfNum].u32MASK2 =  ((MaskMsg->u32Id&0x7FF)<<2) ; 
;;;456        }
;;;457        else										    /* extended ID*/
;;;458        {
;;;459            CAN->sMsgObj[u8MsgIfNum].u32MASK1 = (MaskMsg->u32Id) &0xFFFF;
;;;460            CAN->sMsgObj[u8MsgIfNum].u32MASK2 = ((MaskMsg->u32Id)&0x1FF0000)>>16 ;
;;;461        }
;;;462    
;;;463    	CAN->sMsgObj[u8MsgIfNum].MASK2.MXTD = MaskMsg->u8Xtd;
;;;464    	CAN->sMsgObj[u8MsgIfNum].MASK2.MDIR = MaskMsg->u8Dir;
;;;465        
;;;466    	CAN->sMsgObj[u8MsgIfNum].MCON.UMASK = 1;
;;;467    
;;;468    	/* update the contents needed for transmission*/
;;;469        CAN->sMsgObj[u8MsgIfNum].u32CMASK = CAN_CMASK_WRRD| CAN_CMASK_MASK;
;;;470        CAN->sMsgObj[u8MsgIfNum].u32CREQ  = 1 + u8MsgObj;
;;;471    
;;;472        return E_SUCCESS;
;;;473    }
000016  bd70              POP      {r4-r6,pc}
                  |L29.24|
000018  7a28              LDRB     r0,[r5,#8]            ;452
00001a  2800              CMP      r0,#0                 ;452
00001c  d10e              BNE      |L29.60|
00001e  2200              MOVS     r2,#0                 ;454
000020  4830              LDR      r0,|L29.228|
000022  2160              MOVS     r1,#0x60              ;454
000024  4361              MULS     r1,r4,r1              ;454
000026  1840              ADDS     r0,r0,r1              ;454
000028  6082              STR      r2,[r0,#8]            ;454
00002a  6868              LDR      r0,[r5,#4]            ;455
00002c  0540              LSLS     r0,r0,#21             ;455
00002e  0cc2              LSRS     r2,r0,#19             ;455
000030  482c              LDR      r0,|L29.228|
000032  2160              MOVS     r1,#0x60              ;455
000034  4361              MULS     r1,r4,r1              ;455
000036  1840              ADDS     r0,r0,r1              ;455
000038  60c2              STR      r2,[r0,#0xc]          ;455
00003a  e00f              B        |L29.92|
                  |L29.60|
00003c  6868              LDR      r0,[r5,#4]            ;459
00003e  b282              UXTH     r2,r0                 ;459
000040  4828              LDR      r0,|L29.228|
000042  2160              MOVS     r1,#0x60              ;459
000044  4361              MULS     r1,r4,r1              ;459
000046  1840              ADDS     r0,r0,r1              ;459
000048  6082              STR      r2,[r0,#8]            ;459
00004a  4927              LDR      r1,|L29.232|
00004c  6868              LDR      r0,[r5,#4]            ;460
00004e  4008              ANDS     r0,r0,r1              ;460
000050  0c02              LSRS     r2,r0,#16             ;460
000052  4824              LDR      r0,|L29.228|
000054  2160              MOVS     r1,#0x60              ;460
000056  4361              MULS     r1,r4,r1              ;460
000058  1840              ADDS     r0,r0,r1              ;460
00005a  60c2              STR      r2,[r0,#0xc]          ;460
                  |L29.92|
00005c  4821              LDR      r0,|L29.228|
00005e  2160              MOVS     r1,#0x60              ;463
000060  4361              MULS     r1,r4,r1              ;463
000062  1840              ADDS     r0,r0,r1              ;463
000064  68c0              LDR      r0,[r0,#0xc]          ;463
000066  2101              MOVS     r1,#1                 ;463
000068  03c9              LSLS     r1,r1,#15             ;463
00006a  4388              BICS     r0,r0,r1              ;463
00006c  7829              LDRB     r1,[r5,#0]            ;463
00006e  03c9              LSLS     r1,r1,#15             ;463
000070  2201              MOVS     r2,#1                 ;463
000072  03d2              LSLS     r2,r2,#15             ;463
000074  4011              ANDS     r1,r1,r2              ;463
000076  4308              ORRS     r0,r0,r1              ;463
000078  491a              LDR      r1,|L29.228|
00007a  2260              MOVS     r2,#0x60              ;463
00007c  4362              MULS     r2,r4,r2              ;463
00007e  1889              ADDS     r1,r1,r2              ;463
000080  60c8              STR      r0,[r1,#0xc]          ;463
000082  4818              LDR      r0,|L29.228|
000084  2160              MOVS     r1,#0x60              ;464
000086  4361              MULS     r1,r4,r1              ;464
000088  1840              ADDS     r0,r0,r1              ;464
00008a  68c0              LDR      r0,[r0,#0xc]          ;464
00008c  2101              MOVS     r1,#1                 ;464
00008e  0389              LSLS     r1,r1,#14             ;464
000090  4388              BICS     r0,r0,r1              ;464
000092  7869              LDRB     r1,[r5,#1]            ;464
000094  0389              LSLS     r1,r1,#14             ;464
000096  2201              MOVS     r2,#1                 ;464
000098  0392              LSLS     r2,r2,#14             ;464
00009a  4011              ANDS     r1,r1,r2              ;464
00009c  4301              ORRS     r1,r1,r0              ;464
00009e  4811              LDR      r0,|L29.228|
0000a0  2260              MOVS     r2,#0x60              ;464
0000a2  4362              MULS     r2,r4,r2              ;464
0000a4  1880              ADDS     r0,r0,r2              ;464
0000a6  60c1              STR      r1,[r0,#0xc]          ;464
0000a8  480e              LDR      r0,|L29.228|
0000aa  2160              MOVS     r1,#0x60              ;466
0000ac  4361              MULS     r1,r4,r1              ;466
0000ae  1840              ADDS     r0,r0,r1              ;466
0000b0  6980              LDR      r0,[r0,#0x18]         ;466
0000b2  2101              MOVS     r1,#1                 ;466
0000b4  0309              LSLS     r1,r1,#12             ;466
0000b6  4388              BICS     r0,r0,r1              ;466
0000b8  1842              ADDS     r2,r0,r1              ;466
0000ba  480a              LDR      r0,|L29.228|
0000bc  2160              MOVS     r1,#0x60              ;466
0000be  4361              MULS     r1,r4,r1              ;466
0000c0  1840              ADDS     r0,r0,r1              ;466
0000c2  6182              STR      r2,[r0,#0x18]         ;466
0000c4  22c0              MOVS     r2,#0xc0              ;469
0000c6  4807              LDR      r0,|L29.228|
0000c8  2160              MOVS     r1,#0x60              ;469
0000ca  4361              MULS     r1,r4,r1              ;469
0000cc  1840              ADDS     r0,r0,r1              ;469
0000ce  6042              STR      r2,[r0,#4]            ;469
0000d0  1c71              ADDS     r1,r6,#1              ;470
0000d2  4804              LDR      r0,|L29.228|
0000d4  2260              MOVS     r2,#0x60              ;470
0000d6  4362              MULS     r2,r4,r2              ;470
0000d8  5081              STR      r1,[r0,r2]            ;470
0000da  2000              MOVS     r0,#0                 ;472
0000dc  e79b              B        |L29.22|
;;;474    
                          ENDP

0000de  0000              DCW      0x0000
                  |L29.224|
                          DCD      0xffff8586
                  |L29.228|
                          DCD      0x40180020
                  |L29.232|
                          DCD      0x01ff0000

                          AREA ||i.DrvCAN_SetRxMsgObj||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetRxMsgObj PROC
;;;498    
;;;499    int32_t DrvCAN_SetRxMsgObj(uint8_t u8MsgObj, uint8_t u8idType, uint32_t u32id, uint8_t u8singleOrFifoLast)
000000  b5ff              PUSH     {r0-r7,lr}
;;;500    {
000002  b081              SUB      sp,sp,#4
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;501        uint8_t u8MsgIfNum=0;
00000a  2400              MOVS     r4,#0
;;;502    
;;;503        if ((u8MsgIfNum = GetFreeIF()) == 2)                        /* Check Free Interface for configure */
00000c  f7fffffe          BL       GetFreeIF
000010  b2c0              UXTB     r0,r0
000012  4604              MOV      r4,r0
000014  2802              CMP      r0,#2
000016  d102              BNE      |L30.30|
;;;504        {
;;;505            return E_DRVCAN_NO_USEFUL_INTERFACE;
000018  483d              LDR      r0,|L30.272|
                  |L30.26|
;;;506        }
;;;507                                                                /* Command Setting */
;;;508        CAN->sMsgObj[u8MsgIfNum].u32CMASK = CAN_CMASK_WRRD| CAN_CMASK_MASK | CAN_CMASK_ARB | 
;;;509    	                             CAN_CMASK_CONTROL | CAN_CMASK_DATAA  | CAN_CMASK_DATAB;
;;;510    
;;;511        if (u8idType == CAN_STD_ID) /* According STD/EXT ID format,Configure Mask and Aribration register */
;;;512        {
;;;513            CAN->sMsgObj[u8MsgIfNum].u32ARB1   = 0;
;;;514            CAN->sMsgObj[u8MsgIfNum].u32ARB2   = CAN_ARB2_MSGVAL | (u32id & 0x7FF)<< 2;
;;;515        }
;;;516        else
;;;517        {
;;;518            CAN->sMsgObj[u8MsgIfNum].u32ARB1   = u32id & 0xFFFF;
;;;519            CAN->sMsgObj[u8MsgIfNum].u32ARB2   = CAN_ARB2_MSGVAL | CAN_ARB2_XTD | (u32id & 0x1FF0000)>>16;
;;;520        }
;;;521    
;;;522        CAN->sMsgObj[u8MsgIfNum].MCON.UMASK = 1;
;;;523        CAN->sMsgObj[u8MsgIfNum].MCON.RXIE  = 1;
;;;524    	CAN->sMsgObj[u8MsgIfNum].MCON.EOB   = u8singleOrFifoLast?1:0;
;;;525    
;;;526        CAN->sMsgObj[u8MsgIfNum].u32DAT_A1  = 0;
;;;527        CAN->sMsgObj[u8MsgIfNum].u32DAT_A2  = 0;
;;;528        CAN->sMsgObj[u8MsgIfNum].u32DAT_B1  = 0;
;;;529        CAN->sMsgObj[u8MsgIfNum].u32DAT_B2  = 0;
;;;530    
;;;531        CAN->sMsgObj[u8MsgIfNum].u32CREQ = 1 + u8MsgObj;
;;;532    
;;;533        return E_SUCCESS;
;;;534    }
00001a  b005              ADD      sp,sp,#0x14
00001c  bdf0              POP      {r4-r7,pc}
                  |L30.30|
00001e  22f3              MOVS     r2,#0xf3              ;508
000020  483c              LDR      r0,|L30.276|
000022  2160              MOVS     r1,#0x60              ;508
000024  4361              MULS     r1,r4,r1              ;508
000026  1840              ADDS     r0,r0,r1              ;508
000028  6042              STR      r2,[r0,#4]            ;508
00002a  2f00              CMP      r7,#0                 ;511
00002c  d110              BNE      |L30.80|
00002e  2200              MOVS     r2,#0                 ;513
000030  4838              LDR      r0,|L30.276|
000032  2160              MOVS     r1,#0x60              ;513
000034  4361              MULS     r1,r4,r1              ;513
000036  1840              ADDS     r0,r0,r1              ;513
000038  6102              STR      r2,[r0,#0x10]         ;513
00003a  0568              LSLS     r0,r5,#21             ;514
00003c  0cc0              LSRS     r0,r0,#19             ;514
00003e  2101              MOVS     r1,#1                 ;514
000040  03c9              LSLS     r1,r1,#15             ;514
000042  4308              ORRS     r0,r0,r1              ;514
000044  4933              LDR      r1,|L30.276|
000046  2260              MOVS     r2,#0x60              ;514
000048  4362              MULS     r2,r4,r2              ;514
00004a  1889              ADDS     r1,r1,r2              ;514
00004c  6148              STR      r0,[r1,#0x14]         ;514
00004e  e010              B        |L30.114|
                  |L30.80|
000050  b2aa              UXTH     r2,r5                 ;518
000052  4830              LDR      r0,|L30.276|
000054  2160              MOVS     r1,#0x60              ;518
000056  4361              MULS     r1,r4,r1              ;518
000058  1840              ADDS     r0,r0,r1              ;518
00005a  6102              STR      r2,[r0,#0x10]         ;518
00005c  482e              LDR      r0,|L30.280|
00005e  4028              ANDS     r0,r0,r5              ;519
000060  0c01              LSRS     r1,r0,#16             ;519
000062  2003              MOVS     r0,#3                 ;519
000064  0380              LSLS     r0,r0,#14             ;519
000066  4301              ORRS     r1,r1,r0              ;519
000068  482a              LDR      r0,|L30.276|
00006a  2260              MOVS     r2,#0x60              ;519
00006c  4362              MULS     r2,r4,r2              ;519
00006e  1880              ADDS     r0,r0,r2              ;519
000070  6141              STR      r1,[r0,#0x14]         ;519
                  |L30.114|
000072  4828              LDR      r0,|L30.276|
000074  2160              MOVS     r1,#0x60              ;522
000076  4361              MULS     r1,r4,r1              ;522
000078  1840              ADDS     r0,r0,r1              ;522
00007a  6980              LDR      r0,[r0,#0x18]         ;522
00007c  2101              MOVS     r1,#1                 ;522
00007e  0309              LSLS     r1,r1,#12             ;522
000080  4388              BICS     r0,r0,r1              ;522
000082  1842              ADDS     r2,r0,r1              ;522
000084  4823              LDR      r0,|L30.276|
000086  2160              MOVS     r1,#0x60              ;522
000088  4361              MULS     r1,r4,r1              ;522
00008a  1840              ADDS     r0,r0,r1              ;522
00008c  6182              STR      r2,[r0,#0x18]         ;522
00008e  4821              LDR      r0,|L30.276|
000090  2160              MOVS     r1,#0x60              ;523
000092  4361              MULS     r1,r4,r1              ;523
000094  1840              ADDS     r0,r0,r1              ;523
000096  6980              LDR      r0,[r0,#0x18]         ;523
000098  2101              MOVS     r1,#1                 ;523
00009a  0289              LSLS     r1,r1,#10             ;523
00009c  4388              BICS     r0,r0,r1              ;523
00009e  1842              ADDS     r2,r0,r1              ;523
0000a0  481c              LDR      r0,|L30.276|
0000a2  2160              MOVS     r1,#0x60              ;523
0000a4  4361              MULS     r1,r4,r1              ;523
0000a6  1840              ADDS     r0,r0,r1              ;523
0000a8  6182              STR      r2,[r0,#0x18]         ;523
0000aa  481a              LDR      r0,|L30.276|
0000ac  2160              MOVS     r1,#0x60              ;524
0000ae  4361              MULS     r1,r4,r1              ;524
0000b0  1840              ADDS     r0,r0,r1              ;524
0000b2  6980              LDR      r0,[r0,#0x18]         ;524
0000b4  2180              MOVS     r1,#0x80              ;524
0000b6  4388              BICS     r0,r0,r1              ;524
0000b8  9904              LDR      r1,[sp,#0x10]         ;524
0000ba  2900              CMP      r1,#0                 ;524
0000bc  d001              BEQ      |L30.194|
0000be  2101              MOVS     r1,#1                 ;524
0000c0  e000              B        |L30.196|
                  |L30.194|
0000c2  2100              MOVS     r1,#0                 ;524
                  |L30.196|
0000c4  01c9              LSLS     r1,r1,#7              ;524
0000c6  2280              MOVS     r2,#0x80              ;524
0000c8  4011              ANDS     r1,r1,r2              ;524
0000ca  4308              ORRS     r0,r0,r1              ;524
0000cc  4911              LDR      r1,|L30.276|
0000ce  2260              MOVS     r2,#0x60              ;524
0000d0  4362              MULS     r2,r4,r2              ;524
0000d2  1889              ADDS     r1,r1,r2              ;524
0000d4  6188              STR      r0,[r1,#0x18]         ;524
0000d6  2200              MOVS     r2,#0                 ;526
0000d8  480e              LDR      r0,|L30.276|
0000da  2160              MOVS     r1,#0x60              ;526
0000dc  4361              MULS     r1,r4,r1              ;526
0000de  1840              ADDS     r0,r0,r1              ;526
0000e0  61c2              STR      r2,[r0,#0x1c]         ;526
0000e2  480c              LDR      r0,|L30.276|
0000e4  2160              MOVS     r1,#0x60              ;527
0000e6  4361              MULS     r1,r4,r1              ;527
0000e8  1840              ADDS     r0,r0,r1              ;527
0000ea  6202              STR      r2,[r0,#0x20]         ;527
0000ec  4809              LDR      r0,|L30.276|
0000ee  2160              MOVS     r1,#0x60              ;528
0000f0  4361              MULS     r1,r4,r1              ;528
0000f2  1840              ADDS     r0,r0,r1              ;528
0000f4  6242              STR      r2,[r0,#0x24]         ;528
0000f6  4807              LDR      r0,|L30.276|
0000f8  2160              MOVS     r1,#0x60              ;529
0000fa  4361              MULS     r1,r4,r1              ;529
0000fc  1840              ADDS     r0,r0,r1              ;529
0000fe  6282              STR      r2,[r0,#0x28]         ;529
000100  1c70              ADDS     r0,r6,#1              ;531
000102  4904              LDR      r1,|L30.276|
000104  2260              MOVS     r2,#0x60              ;531
000106  4362              MULS     r2,r4,r2              ;531
000108  5088              STR      r0,[r1,r2]            ;531
00010a  2000              MOVS     r0,#0                 ;533
00010c  e785              B        |L30.26|
;;;535    
                          ENDP

00010e  0000              DCW      0x0000
                  |L30.272|
                          DCD      0xffff8586
                  |L30.276|
                          DCD      0x40180020
                  |L30.280|
                          DCD      0x01ff0000

                          AREA ||i.DrvCAN_SetTiming||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetTiming PROC
;;;300    
;;;301    void DrvCAN_SetTiming(uint8_t u8Tseg2, uint8_t u8Tseg1, uint8_t u8Sjw, uint32_t u32Brp)
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
;;;303        CAN->BTIME.TSEG1 = u8Tseg1;  
000002  4c17              LDR      r4,|L31.96|
000004  68e4              LDR      r4,[r4,#0xc]
000006  250f              MOVS     r5,#0xf
000008  022d              LSLS     r5,r5,#8
00000a  43ac              BICS     r4,r4,r5
00000c  020d              LSLS     r5,r1,#8
00000e  260f              MOVS     r6,#0xf
000010  0236              LSLS     r6,r6,#8
000012  4035              ANDS     r5,r5,r6
000014  432c              ORRS     r4,r4,r5
000016  4d12              LDR      r5,|L31.96|
000018  60ec              STR      r4,[r5,#0xc]
;;;304        CAN->BTIME.TSEG2 = u8Tseg2;  
00001a  462c              MOV      r4,r5
00001c  68e4              LDR      r4,[r4,#0xc]
00001e  2507              MOVS     r5,#7
000020  032d              LSLS     r5,r5,#12
000022  43ac              BICS     r4,r4,r5
000024  0305              LSLS     r5,r0,#12
000026  2607              MOVS     r6,#7
000028  0336              LSLS     r6,r6,#12
00002a  4035              ANDS     r5,r5,r6
00002c  432c              ORRS     r4,r4,r5
00002e  4d0c              LDR      r5,|L31.96|
000030  60ec              STR      r4,[r5,#0xc]
;;;305        CAN->BTIME.SJW   = u8Sjw;  
000032  462c              MOV      r4,r5
000034  68e4              LDR      r4,[r4,#0xc]
000036  25c0              MOVS     r5,#0xc0
000038  43ac              BICS     r4,r4,r5
00003a  0195              LSLS     r5,r2,#6
00003c  26c0              MOVS     r6,#0xc0
00003e  4035              ANDS     r5,r5,r6
000040  432c              ORRS     r4,r4,r5
000042  4d07              LDR      r5,|L31.96|
000044  60ec              STR      r4,[r5,#0xc]
;;;306        CAN->BTIME.BRP   = u32Brp & 0x3F ;  
000046  462c              MOV      r4,r5
000048  68e4              LDR      r4,[r4,#0xc]
00004a  09a4              LSRS     r4,r4,#6
00004c  01a4              LSLS     r4,r4,#6
00004e  069d              LSLS     r5,r3,#26
000050  0ead              LSRS     r5,r5,#26
000052  432c              ORRS     r4,r4,r5
000054  4d02              LDR      r5,|L31.96|
000056  60ec              STR      r4,[r5,#0xc]
;;;307        CAN->u32BRPE     = (u32Brp >> 6) & 0x0F;
000058  059c              LSLS     r4,r3,#22
00005a  0f24              LSRS     r4,r4,#28
00005c  61ac              STR      r4,[r5,#0x18]
;;;308    }
00005e  bd70              POP      {r4-r6,pc}
;;;309    
                          ENDP

                  |L31.96|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_SetTxMsgObj||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetTxMsgObj PROC
;;;383    
;;;384    int32_t DrvCAN_SetTxMsgObj(uint8_t u8MsgObj, STR_CANMSG_T* pCanMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;385    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;386        uint8_t u8MsgIfNum=0;
000006  2500              MOVS     r5,#0
;;;387    
;;;388        if ((u8MsgIfNum = GetFreeIF()) == 2)                        /* Check Free Interface for configure */
000008  f7fffffe          BL       GetFreeIF
00000c  b2c0              UXTB     r0,r0
00000e  4605              MOV      r5,r0
000010  2802              CMP      r0,#2
000012  d101              BNE      |L32.24|
;;;389        {
;;;390            return E_DRVCAN_NO_USEFUL_INTERFACE;
000014  4840              LDR      r0,|L32.280|
                  |L32.22|
;;;391        }
;;;392    
;;;393        /* update the contents needed for transmission*/
;;;394        CAN->sMsgObj[u8MsgIfNum].u32CMASK = 0xF3;  /*CAN_CMASK_WRRD| CAN_CMASK_MASK | CAN_CMASK_ARB 
;;;395                                               | CAN_CMASK_CONTROL | CAN_CMASK_DATAA  | CAN_CMASK_DATAB; */
;;;396    
;;;397        if (pCanMsg->IdType == CAN_STD_ID)
;;;398        {
;;;399            /* standard ID*/
;;;400            CAN->sMsgObj[u8MsgIfNum].u32ARB1 = 0;
;;;401    		CAN->sMsgObj[u8MsgIfNum].u32ARB2 =  (((pCanMsg->Id)&0x7FF)<<2) | CAN_ARB2_DIR | CAN_ARB2_MSGVAL; 
;;;402        }
;;;403        else
;;;404        {
;;;405            /* extended ID*/
;;;406            CAN->sMsgObj[u8MsgIfNum].u32ARB1 = (pCanMsg->Id)&0xFFFF;
;;;407            CAN->sMsgObj[u8MsgIfNum].u32ARB2 = ((pCanMsg->Id)&0x1FF0000)>>16 | CAN_ARB2_DIR | CAN_ARB2_XTD | CAN_ARB2_MSGVAL;
;;;408        }
;;;409    
;;;410        CAN->sMsgObj[u8MsgIfNum].ARB2.DIR =pCanMsg->FrameType?1:0;
;;;411    
;;;412        CAN->sMsgObj[u8MsgIfNum].u32DAT_A1 = ((uint16_t)pCanMsg->Data[1]<<8) | pCanMsg->Data[0];
;;;413        CAN->sMsgObj[u8MsgIfNum].u32DAT_A2 = ((uint16_t)pCanMsg->Data[3]<<8) | pCanMsg->Data[2];
;;;414        CAN->sMsgObj[u8MsgIfNum].u32DAT_B1 = ((uint16_t)pCanMsg->Data[5]<<8) | pCanMsg->Data[4];
;;;415        CAN->sMsgObj[u8MsgIfNum].u32DAT_B2 = ((uint16_t)pCanMsg->Data[7]<<8) | pCanMsg->Data[6];
;;;416    
;;;417    	CAN->sMsgObj[u8MsgIfNum].u32MCON   =  CAN_MCON_NEWDAT | pCanMsg->DLC |CAN_MCON_TXIE | CAN_MCON_EOB;
;;;418        CAN->sMsgObj[u8MsgIfNum].u32CREQ   = 1 + u8MsgObj;
;;;419    
;;;420        return E_SUCCESS;
;;;421    }
000016  bd70              POP      {r4-r6,pc}
                  |L32.24|
000018  22f3              MOVS     r2,#0xf3              ;394
00001a  4840              LDR      r0,|L32.284|
00001c  2160              MOVS     r1,#0x60              ;394
00001e  4369              MULS     r1,r5,r1              ;394
000020  1840              ADDS     r0,r0,r1              ;394
000022  6042              STR      r2,[r0,#4]            ;394
000024  6820              LDR      r0,[r4,#0]            ;397
000026  2800              CMP      r0,#0                 ;397
000028  d113              BNE      |L32.82|
00002a  2200              MOVS     r2,#0                 ;400
00002c  483b              LDR      r0,|L32.284|
00002e  2160              MOVS     r1,#0x60              ;400
000030  4369              MULS     r1,r5,r1              ;400
000032  1840              ADDS     r0,r0,r1              ;400
000034  6102              STR      r2,[r0,#0x10]         ;400
000036  68a0              LDR      r0,[r4,#8]            ;401
000038  0540              LSLS     r0,r0,#21             ;401
00003a  0cc0              LSRS     r0,r0,#19             ;401
00003c  2101              MOVS     r1,#1                 ;401
00003e  0349              LSLS     r1,r1,#13             ;401
000040  1840              ADDS     r0,r0,r1              ;401
000042  0089              LSLS     r1,r1,#2              ;401
000044  1842              ADDS     r2,r0,r1              ;401
000046  4835              LDR      r0,|L32.284|
000048  2160              MOVS     r1,#0x60              ;401
00004a  4369              MULS     r1,r5,r1              ;401
00004c  1840              ADDS     r0,r0,r1              ;401
00004e  6142              STR      r2,[r0,#0x14]         ;401
000050  e016              B        |L32.128|
                  |L32.82|
000052  68a0              LDR      r0,[r4,#8]            ;406
000054  b282              UXTH     r2,r0                 ;406
000056  4831              LDR      r0,|L32.284|
000058  2160              MOVS     r1,#0x60              ;406
00005a  4369              MULS     r1,r5,r1              ;406
00005c  1840              ADDS     r0,r0,r1              ;406
00005e  6102              STR      r2,[r0,#0x10]         ;406
000060  492f              LDR      r1,|L32.288|
000062  68a0              LDR      r0,[r4,#8]            ;407
000064  4008              ANDS     r0,r0,r1              ;407
000066  0c00              LSRS     r0,r0,#16             ;407
000068  2101              MOVS     r1,#1                 ;407
00006a  0349              LSLS     r1,r1,#13             ;407
00006c  1840              ADDS     r0,r0,r1              ;407
00006e  0049              LSLS     r1,r1,#1              ;407
000070  4308              ORRS     r0,r0,r1              ;407
000072  0049              LSLS     r1,r1,#1              ;407
000074  1842              ADDS     r2,r0,r1              ;407
000076  4829              LDR      r0,|L32.284|
000078  2160              MOVS     r1,#0x60              ;407
00007a  4369              MULS     r1,r5,r1              ;407
00007c  1840              ADDS     r0,r0,r1              ;407
00007e  6142              STR      r2,[r0,#0x14]         ;407
                  |L32.128|
000080  4826              LDR      r0,|L32.284|
000082  2160              MOVS     r1,#0x60              ;410
000084  4369              MULS     r1,r5,r1              ;410
000086  1840              ADDS     r0,r0,r1              ;410
000088  6940              LDR      r0,[r0,#0x14]         ;410
00008a  2101              MOVS     r1,#1                 ;410
00008c  0349              LSLS     r1,r1,#13             ;410
00008e  4388              BICS     r0,r0,r1              ;410
000090  6861              LDR      r1,[r4,#4]            ;410
000092  2900              CMP      r1,#0                 ;410
000094  d001              BEQ      |L32.154|
000096  2101              MOVS     r1,#1                 ;410
000098  e000              B        |L32.156|
                  |L32.154|
00009a  2100              MOVS     r1,#0                 ;410
                  |L32.156|
00009c  0349              LSLS     r1,r1,#13             ;410
00009e  2201              MOVS     r2,#1                 ;410
0000a0  0352              LSLS     r2,r2,#13             ;410
0000a2  4011              ANDS     r1,r1,r2              ;410
0000a4  4308              ORRS     r0,r0,r1              ;410
0000a6  491d              LDR      r1,|L32.284|
0000a8  2260              MOVS     r2,#0x60              ;410
0000aa  436a              MULS     r2,r5,r2              ;410
0000ac  1889              ADDS     r1,r1,r2              ;410
0000ae  6148              STR      r0,[r1,#0x14]         ;410
0000b0  7ba0              LDRB     r0,[r4,#0xe]          ;412
0000b2  0200              LSLS     r0,r0,#8              ;412
0000b4  7b61              LDRB     r1,[r4,#0xd]          ;412
0000b6  4308              ORRS     r0,r0,r1              ;412
0000b8  4918              LDR      r1,|L32.284|
0000ba  2260              MOVS     r2,#0x60              ;412
0000bc  436a              MULS     r2,r5,r2              ;412
0000be  1889              ADDS     r1,r1,r2              ;412
0000c0  61c8              STR      r0,[r1,#0x1c]         ;412
0000c2  7c20              LDRB     r0,[r4,#0x10]         ;413
0000c4  0201              LSLS     r1,r0,#8              ;413
0000c6  7be0              LDRB     r0,[r4,#0xf]          ;413
0000c8  4301              ORRS     r1,r1,r0              ;413
0000ca  4814              LDR      r0,|L32.284|
0000cc  2260              MOVS     r2,#0x60              ;413
0000ce  436a              MULS     r2,r5,r2              ;413
0000d0  1880              ADDS     r0,r0,r2              ;413
0000d2  6201              STR      r1,[r0,#0x20]         ;413
0000d4  7ca0              LDRB     r0,[r4,#0x12]         ;414
0000d6  0201              LSLS     r1,r0,#8              ;414
0000d8  7c60              LDRB     r0,[r4,#0x11]         ;414
0000da  4301              ORRS     r1,r1,r0              ;414
0000dc  480f              LDR      r0,|L32.284|
0000de  2260              MOVS     r2,#0x60              ;414
0000e0  436a              MULS     r2,r5,r2              ;414
0000e2  1880              ADDS     r0,r0,r2              ;414
0000e4  6241              STR      r1,[r0,#0x24]         ;414
0000e6  7d20              LDRB     r0,[r4,#0x14]         ;415
0000e8  0200              LSLS     r0,r0,#8              ;415
0000ea  7ce1              LDRB     r1,[r4,#0x13]         ;415
0000ec  4308              ORRS     r0,r0,r1              ;415
0000ee  490b              LDR      r1,|L32.284|
0000f0  2260              MOVS     r2,#0x60              ;415
0000f2  436a              MULS     r2,r5,r2              ;415
0000f4  1889              ADDS     r1,r1,r2              ;415
0000f6  6288              STR      r0,[r1,#0x28]         ;415
0000f8  7b20              LDRB     r0,[r4,#0xc]          ;417
0000fa  490a              LDR      r1,|L32.292|
0000fc  4301              ORRS     r1,r1,r0              ;417
0000fe  4807              LDR      r0,|L32.284|
000100  2260              MOVS     r2,#0x60              ;417
000102  436a              MULS     r2,r5,r2              ;417
000104  1880              ADDS     r0,r0,r2              ;417
000106  6181              STR      r1,[r0,#0x18]         ;417
000108  1c70              ADDS     r0,r6,#1              ;418
00010a  4904              LDR      r1,|L32.284|
00010c  2260              MOVS     r2,#0x60              ;418
00010e  436a              MULS     r2,r5,r2              ;418
000110  5088              STR      r0,[r1,r2]            ;418
000112  2000              MOVS     r0,#0                 ;420
000114  e77f              B        |L32.22|
;;;422    
                          ENDP

000116  0000              DCW      0x0000
                  |L32.280|
                          DCD      0xffff8586
                  |L32.284|
                          DCD      0x40180020
                  |L32.288|
                          DCD      0x01ff0000
                  |L32.292|
                          DCD      0x00008880

                          AREA ||i.DrvCAN_SetTxRqst||, CODE, READONLY, ALIGN=2

                  DrvCAN_SetTxRqst PROC
;;;572    /*---------------------------------------------------------------------------------------------------------*/
;;;573    uint32_t DrvCAN_SetTxRqst(uint8_t u8MsgObj)
000000  b510              PUSH     {r4,lr}
;;;574    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;575        STR_CANMSG_T rMsg; 
;;;576        DrvCAN_ReadMsgObj(u8MsgObj,TRUE, &rMsg);
000006  466a              MOV      r2,sp
000008  2101              MOVS     r1,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       DrvCAN_ReadMsgObj
;;;577        CAN->sMsgObj[0].u32CMASK  = CAN_CMASK_WRRD |CAN_CMASK_TXRQSTNEWDAT ;
000010  2184              MOVS     r1,#0x84
000012  4804              LDR      r0,|L33.36|
000014  6241              STR      r1,[r0,#0x24]
;;;578        CAN->sMsgObj[0].u32CREQ  = 1 + u8MsgObj;
000016  1c60              ADDS     r0,r4,#1
000018  4902              LDR      r1,|L33.36|
00001a  6208              STR      r0,[r1,#0x20]
;;;579        return E_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;580    }
00001e  b006              ADD      sp,sp,#0x18
000020  bd10              POP      {r4,pc}
;;;581    
                          ENDP

000022  0000              DCW      0x0000
                  |L33.36|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_UninstallCallback||, CODE, READONLY, ALIGN=2

                  DrvCAN_UninstallCallback PROC
;;;1136   
;;;1137   int32_t DrvCAN_UninstallCallback(E_CAN_CALLBACK_TYPE Type)
000000  b500              PUSH     {lr}
;;;1138   {
000002  4601              MOV      r1,r0
;;;1139       switch(Type)
000004  460b              MOV      r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0608              DCB      0x06,0x08
00000c  0c101404          DCB      0x0c,0x10,0x14,0x04
000010  181c              DCB      0x18,0x1c
;;;1140       {
;;;1141           
;;;1142           case CALLBACK_MSG:      
;;;1143                                   CANHandler.MessageCallBackFn            = 0;    
000012  2000              MOVS     r0,#0
000014  4a0d              LDR      r2,|L34.76|
000016  6110              STR      r0,[r2,#0x10]  ; CANHandler
;;;1144                                   break;
000018  e015              B        |L34.70|
;;;1145           case CALLBACK_RXOK:     
;;;1146                                   CANHandler.RxOkCallBackFn               = 0;    
00001a  2000              MOVS     r0,#0
00001c  4a0b              LDR      r2,|L34.76|
00001e  6010              STR      r0,[r2,#0]  ; CANHandler
;;;1147                                   break;
000020  e011              B        |L34.70|
;;;1148           case CALLBACK_TXOK:     
;;;1149                                   CANHandler.TxOkCallBackFn               = 0;    
000022  2000              MOVS     r0,#0
000024  4a09              LDR      r2,|L34.76|
000026  6050              STR      r0,[r2,#4]  ; CANHandler
;;;1150                                   break;
000028  e00d              B        |L34.70|
;;;1151           case CALLBACK_EWARN:    
;;;1152                                   CANHandler.ErrorWarningCallBackFn       = 0;    
00002a  2000              MOVS     r0,#0
00002c  4a07              LDR      r2,|L34.76|
00002e  6090              STR      r0,[r2,#8]  ; CANHandler
;;;1153                                   break;
000030  e009              B        |L34.70|
;;;1154           case CALLBACK_BOFF:     
;;;1155                                   CANHandler.BusOffCallBackFn             = 0;    
000032  2000              MOVS     r0,#0
000034  4a05              LDR      r2,|L34.76|
000036  60d0              STR      r0,[r2,#0xc]  ; CANHandler
;;;1156                                   break;
000038  e005              B        |L34.70|
;;;1157           case CALLBACK_WAKEUP:   
;;;1158                                   CANHandler.WakeupCallBackFn             = 0;    
00003a  2000              MOVS     r0,#0
00003c  4a03              LDR      r2,|L34.76|
00003e  6150              STR      r0,[r2,#0x14]  ; CANHandler
;;;1159                                   break;
000040  e001              B        |L34.70|
;;;1160           default:
;;;1161               return E_DRVCAN_ERR_ARGUMENT;                               
000042  4803              LDR      r0,|L34.80|
                  |L34.68|
;;;1162       }
;;;1163              
;;;1164       return E_SUCCESS;
;;;1165   
;;;1166   }
000044  bd00              POP      {pc}
                  |L34.70|
000046  bf00              NOP                            ;1144
000048  2000              MOVS     r0,#0                 ;1164
00004a  e7fb              B        |L34.68|
;;;1167   
                          ENDP

                  |L34.76|
                          DCD      CANHandler
                  |L34.80|
                          DCD      0xffff8583

                          AREA ||i.DrvCAN_WaitEndOfTx||, CODE, READONLY, ALIGN=2

                  DrvCAN_WaitEndOfTx PROC
;;;661    
;;;662    int32_t DrvCAN_WaitEndOfTx(void)
000000  bf00              NOP      
                  |L35.2|
;;;663    {
;;;664        while(CAN->STATUS.TXOK==0);
000002  4803              LDR      r0,|L35.16|
000004  6840              LDR      r0,[r0,#4]
000006  0700              LSLS     r0,r0,#28
000008  0fc0              LSRS     r0,r0,#31
00000a  d0fa              BEQ      |L35.2|
;;;665        return E_SUCCESS;
00000c  2000              MOVS     r0,#0
;;;666    }
00000e  4770              BX       lr
;;;667               
                          ENDP

                  |L35.16|
                          DCD      0x40180000

                          AREA ||i.DrvCAN_WaitMsg||, CODE, READONLY, ALIGN=2

                  DrvCAN_WaitMsg PROC
;;;980    /*---------------------------------------------------------------------------------------------------------*/
;;;981    void DrvCAN_WaitMsg(void)
000000  2000              MOVS     r0,#0
;;;982    {
;;;983    	CAN->u32STATUS = 0x0;			/* clr status */
000002  4909              LDR      r1,|L36.40|
000004  6048              STR      r0,[r1,#4]
;;;984    
;;;985    	while (1) 
000006  e00b              B        |L36.32|
                  |L36.8|
;;;986    	{
;;;987    		if ( CAN->sMsgObj[1].MCON.NEWDAT == 1 )  /* check new data */
000008  4807              LDR      r0,|L36.40|
00000a  3020              ADDS     r0,r0,#0x20
00000c  6f80              LDR      r0,[r0,#0x78]
00000e  0400              LSLS     r0,r0,#16
000010  0fc0              LSRS     r0,r0,#31
000012  2801              CMP      r0,#1
000014  d100              BNE      |L36.24|
;;;988    		{
;;;989    			DEBUG_PRINTF("New Data IN\n");
;;;990    			break;	
000016  e004              B        |L36.34|
                  |L36.24|
;;;991    		}
;;;992            if ( CAN->STATUS.RXOK == 1) 
000018  4803              LDR      r0,|L36.40|
00001a  6840              LDR      r0,[r0,#4]
;;;993    			DEBUG_PRINTF("Rx OK\n");
;;;994    
;;;995    		if ( CAN->STATUS.LEC)
00001c  4802              LDR      r0,|L36.40|
00001e  6840              LDR      r0,[r0,#4]
                  |L36.32|
000020  e7f2              B        |L36.8|
                  |L36.34|
000022  bf00              NOP                            ;990
;;;996    		{
;;;997    			DEBUG_PRINTF("Error\n");
;;;998    		}
;;;999    	}
;;;1000   }
000024  4770              BX       lr
;;;1001   
                          ENDP

000026  0000              DCW      0x0000
                  |L36.40|
                          DCD      0x40180000

                          AREA ||i.GetFreeIF||, CODE, READONLY, ALIGN=2

                  GetFreeIF PROC
;;;124    
;;;125    static uint32_t GetFreeIF(void)
000000  4807              LDR      r0,|L37.32|
;;;126    {
;;;127        if (CAN->sMsgObj[0].CREQ.BUSY == 0)
000002  6a00              LDR      r0,[r0,#0x20]
000004  0400              LSLS     r0,r0,#16
000006  0fc0              LSRS     r0,r0,#31
000008  d100              BNE      |L37.12|
                  |L37.10|
;;;128            return 0;
;;;129        else if (CAN->sMsgObj[1].CREQ.BUSY == 0)
;;;130            return 1;
;;;131        else
;;;132       	    return 2;
;;;133    }
00000a  4770              BX       lr
                  |L37.12|
00000c  4804              LDR      r0,|L37.32|
00000e  3020              ADDS     r0,r0,#0x20           ;129
000010  6e00              LDR      r0,[r0,#0x60]         ;129
000012  0400              LSLS     r0,r0,#16             ;129
000014  0fc0              LSRS     r0,r0,#31             ;129
000016  d101              BNE      |L37.28|
000018  2001              MOVS     r0,#1                 ;130
00001a  e7f6              B        |L37.10|
                  |L37.28|
00001c  2002              MOVS     r0,#2                 ;132
00001e  e7f4              B        |L37.10|
;;;134    
                          ENDP

                  |L37.32|
                          DCD      0x40180000

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L38.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L38.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L38.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L38.108|
                  |L38.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L38.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L38.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L38.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L38.112|
                          DCD      0xe000ed1c
                  |L38.116|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CANHandler
                          %        24

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L235.16|
00000e  461d              MOV      r5,r3
                  |L235.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

