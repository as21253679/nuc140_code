; generated by ARM C/C++ Compiler, 5.03 [Build 69]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvadc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvadc.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\Inc\ST\STM32F10x -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvadc.crf ..\..\..\Src\Driver\DrvADC.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;359    /*---------------------------------------------------------------------------------------------------------*/
;;;360    void ADC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;361    {
;;;362        if(ADC->ADSR.ADF==1)
000002  4820              LDR      r0,|L1.132|
000004  6b00              LDR      r0,[r0,#0x30]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
00000a  d00f              BEQ      |L1.44|
;;;363        {
;;;364            if(g_ptADCCallBack)
00000c  481e              LDR      r0,|L1.136|
00000e  6800              LDR      r0,[r0,#0]  ; g_ptADCCallBack
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L1.30|
;;;365                g_ptADCCallBack(g_pu32UserData[0]);
000014  491d              LDR      r1,|L1.140|
000016  6808              LDR      r0,[r1,#0]  ; g_pu32UserData
000018  491b              LDR      r1,|L1.136|
00001a  6809              LDR      r1,[r1,#0]  ; g_ptADCCallBack
00001c  4788              BLX      r1
                  |L1.30|
;;;366            
;;;367            /* clear the A/D conversion flag */
;;;368            /* "ADC->ADSR.ADF = 1;" is not recommended. It may clear CMPF0 and CMPF1. */
;;;369            outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x1);
00001e  4819              LDR      r0,|L1.132|
000020  6b00              LDR      r0,[r0,#0x30]
000022  08c0              LSRS     r0,r0,#3
000024  00c0              LSLS     r0,r0,#3
000026  1c40              ADDS     r0,r0,#1
000028  4916              LDR      r1,|L1.132|
00002a  6308              STR      r0,[r1,#0x30]
                  |L1.44|
;;;370        }
;;;371        
;;;372        if(ADC->ADSR.CMPF0==1)
00002c  4815              LDR      r0,|L1.132|
00002e  6b00              LDR      r0,[r0,#0x30]
000030  0780              LSLS     r0,r0,#30
000032  0fc0              LSRS     r0,r0,#31
000034  d00f              BEQ      |L1.86|
;;;373        {
;;;374            if(g_ptADCMP0CallBack)
000036  4816              LDR      r0,|L1.144|
000038  6800              LDR      r0,[r0,#0]  ; g_ptADCMP0CallBack
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L1.72|
;;;375                g_ptADCMP0CallBack(g_pu32UserData[1]);
00003e  4913              LDR      r1,|L1.140|
000040  6848              LDR      r0,[r1,#4]  ; g_pu32UserData
000042  4913              LDR      r1,|L1.144|
000044  6809              LDR      r1,[r1,#0]  ; g_ptADCMP0CallBack
000046  4788              BLX      r1
                  |L1.72|
;;;376            
;;;377            /* clear the A/D compare flag 0 */
;;;378            /* "ADC->ADSR.CMPF0 = 1;" is not recommended. It may clear ADF and CMPF1. */
;;;379            outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x2);
000048  480e              LDR      r0,|L1.132|
00004a  6b00              LDR      r0,[r0,#0x30]
00004c  08c0              LSRS     r0,r0,#3
00004e  00c0              LSLS     r0,r0,#3
000050  1c80              ADDS     r0,r0,#2
000052  490c              LDR      r1,|L1.132|
000054  6308              STR      r0,[r1,#0x30]
                  |L1.86|
;;;380        }
;;;381        
;;;382        if(ADC->ADSR.CMPF1==1)
000056  480b              LDR      r0,|L1.132|
000058  6b00              LDR      r0,[r0,#0x30]
00005a  0740              LSLS     r0,r0,#29
00005c  0fc0              LSRS     r0,r0,#31
00005e  d00f              BEQ      |L1.128|
;;;383        {
;;;384            if(g_ptADCMP1CallBack)
000060  480c              LDR      r0,|L1.148|
000062  6800              LDR      r0,[r0,#0]  ; g_ptADCMP1CallBack
000064  2800              CMP      r0,#0
000066  d004              BEQ      |L1.114|
;;;385                g_ptADCMP1CallBack(g_pu32UserData[2]);
000068  4908              LDR      r1,|L1.140|
00006a  6888              LDR      r0,[r1,#8]  ; g_pu32UserData
00006c  4909              LDR      r1,|L1.148|
00006e  6809              LDR      r1,[r1,#0]  ; g_ptADCMP1CallBack
000070  4788              BLX      r1
                  |L1.114|
;;;386            
;;;387            /* clear the A/D compare flag 1 */
;;;388            /* "ADC->ADSR.CMPF1 = 1;" is not recommended. It may clear ADF and CMPF0. */
;;;389            outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x4);
000072  4804              LDR      r0,|L1.132|
000074  6b00              LDR      r0,[r0,#0x30]
000076  08c0              LSRS     r0,r0,#3
000078  00c0              LSLS     r0,r0,#3
00007a  1d00              ADDS     r0,r0,#4
00007c  4901              LDR      r1,|L1.132|
00007e  6308              STR      r0,[r1,#0x30]
                  |L1.128|
;;;390        }
;;;391    }
000080  bd10              POP      {r4,pc}
;;;392    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x400e0000
                  |L1.136|
                          DCD      g_ptADCCallBack
                  |L1.140|
                          DCD      g_pu32UserData
                  |L1.144|
                          DCD      g_ptADCMP0CallBack
                  |L1.148|
                          DCD      g_ptADCMP1CallBack

                          AREA ||i.DrvADC_Close||, CODE, READONLY, ALIGN=2

                  DrvADC_Close PROC
;;;91     /*---------------------------------------------------------------------------------------------------------*/
;;;92     void DrvADC_Close(void)
000000  4818              LDR      r0,|L2.100|
;;;93     {     
;;;94         ADC->ADCR.ADEN = 0;                /* ADC disable */
000002  6a00              LDR      r0,[r0,#0x20]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4916              LDR      r1,|L2.100|
00000a  6208              STR      r0,[r1,#0x20]
;;;95         SYSCLK->APBCLK.ADC_EN = 0;         /* ADC engine clock disable */
00000c  4816              LDR      r0,|L2.104|
00000e  6880              LDR      r0,[r0,#8]
000010  2101              MOVS     r1,#1
000012  0709              LSLS     r1,r1,#28
000014  4388              BICS     r0,r0,r1
000016  4914              LDR      r1,|L2.104|
000018  6088              STR      r0,[r1,#8]
;;;96         ADC->ADCR.ADIE = 0;                /* Disable ADC interrupt */
00001a  4812              LDR      r0,|L2.100|
00001c  6a00              LDR      r0,[r0,#0x20]
00001e  2102              MOVS     r1,#2
000020  4388              BICS     r0,r0,r1
000022  4910              LDR      r1,|L2.100|
000024  6208              STR      r0,[r1,#0x20]
;;;97         NVIC_DisableIRQ(ADC_IRQn);
000026  201d              MOVS     r0,#0x1d
000028  2101              MOVS     r1,#1
00002a  4081              LSLS     r1,r1,r0
00002c  4a0f              LDR      r2,|L2.108|
00002e  6011              STR      r1,[r2,#0]
000030  bf00              NOP      
;;;98         
;;;99         ADC->ADCMPR[0].CMPEN = 0;          /* Disable ADC compare 0 */
000032  480c              LDR      r0,|L2.100|
000034  6a80              LDR      r0,[r0,#0x28]
000036  0840              LSRS     r0,r0,#1
000038  0040              LSLS     r0,r0,#1
00003a  490a              LDR      r1,|L2.100|
00003c  6288              STR      r0,[r1,#0x28]
;;;100        ADC->ADCMPR[0].CMPIE = 0;          /* Disable ADC compare 0 interrupt */
00003e  4608              MOV      r0,r1
000040  6a80              LDR      r0,[r0,#0x28]
000042  2102              MOVS     r1,#2
000044  4388              BICS     r0,r0,r1
000046  4907              LDR      r1,|L2.100|
000048  6288              STR      r0,[r1,#0x28]
;;;101        
;;;102        ADC->ADCMPR[1].CMPEN = 0;          /* Disable ADC compare 1 */
00004a  4608              MOV      r0,r1
00004c  6ac0              LDR      r0,[r0,#0x2c]
00004e  0840              LSRS     r0,r0,#1
000050  0040              LSLS     r0,r0,#1
000052  62c8              STR      r0,[r1,#0x2c]
;;;103        ADC->ADCMPR[1].CMPIE = 0;          /* Disable ADC compare 1 interrupt */
000054  4608              MOV      r0,r1
000056  6ac0              LDR      r0,[r0,#0x2c]
000058  2102              MOVS     r1,#2
00005a  4388              BICS     r0,r0,r1
00005c  4901              LDR      r1,|L2.100|
00005e  62c8              STR      r0,[r1,#0x2c]
;;;104    }
000060  4770              BX       lr
;;;105    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      0x400e0000
                  |L2.104|
                          DCD      0x50000200
                  |L2.108|
                          DCD      0xe000e180

                          AREA ||i.DrvADC_ConfigADCChannel7||, CODE, READONLY, ALIGN=2

                  DrvADC_ConfigADCChannel7 PROC
;;;138    /*---------------------------------------------------------------------------------------------------------*/
;;;139    void DrvADC_ConfigADCChannel7(E_ADC_CH7_SRC Ch7Src)
000000  4910              LDR      r1,|L3.68|
;;;140    {
;;;141        ADC->ADCHER.PRESEL = Ch7Src;
000002  6a49              LDR      r1,[r1,#0x24]
000004  2203              MOVS     r2,#3
000006  0212              LSLS     r2,r2,#8
000008  4391              BICS     r1,r1,r2
00000a  0202              LSLS     r2,r0,#8
00000c  2303              MOVS     r3,#3
00000e  021b              LSLS     r3,r3,#8
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a0b              LDR      r2,|L3.68|
000016  6251              STR      r1,[r2,#0x24]
;;;142        if(Ch7Src==INTERNAL_TEMPERATURE_SENSOR)
000018  2802              CMP      r0,#2
00001a  d109              BNE      |L3.48|
;;;143            SYS->TEMPCR.VTEMP_EN = 1;   /* Temperature sensor enable */
00001c  2105              MOVS     r1,#5
00001e  0709              LSLS     r1,r1,#28
000020  69c9              LDR      r1,[r1,#0x1c]
000022  0849              LSRS     r1,r1,#1
000024  0049              LSLS     r1,r1,#1
000026  1c49              ADDS     r1,r1,#1
000028  2205              MOVS     r2,#5
00002a  0712              LSLS     r2,r2,#28
00002c  61d1              STR      r1,[r2,#0x1c]
00002e  e007              B        |L3.64|
                  |L3.48|
;;;144        else
;;;145            SYS->TEMPCR.VTEMP_EN = 0;   /* Temperature sensor disable */
000030  2105              MOVS     r1,#5
000032  0709              LSLS     r1,r1,#28
000034  69c9              LDR      r1,[r1,#0x1c]
000036  0849              LSRS     r1,r1,#1
000038  0049              LSLS     r1,r1,#1
00003a  2205              MOVS     r2,#5
00003c  0712              LSLS     r2,r2,#28
00003e  61d1              STR      r1,[r2,#0x1c]
                  |L3.64|
;;;146    }
000040  4770              BX       lr
;;;147    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DiffModeOutputFormat||, CODE, READONLY, ALIGN=2

                  DrvADC_DiffModeOutputFormat PROC
;;;826    /*---------------------------------------------------------------------------------------------------------*/
;;;827    void DrvADC_DiffModeOutputFormat (E_ADC_DIFF_MODE_OUTPUT_FORMAT OutputFormat)
000000  4905              LDR      r1,|L4.24|
;;;828    {
;;;829        ADC->ADCR.DMOF = OutputFormat;
000002  6a09              LDR      r1,[r1,#0x20]
000004  0049              LSLS     r1,r1,#1
000006  0849              LSRS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  07d2              LSLS     r2,r2,#31
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L4.24|
000012  6211              STR      r1,[r2,#0x20]
;;;830    }
000014  4770              BX       lr
;;;831    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp0||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp0 PROC
;;;697    /*---------------------------------------------------------------------------------------------------------*/
;;;698    void DrvADC_DisableADCCmp0(void)
000000  4803              LDR      r0,|L5.16|
;;;699    {
;;;700        ADC->ADCMPR[0].CMPEN = 0;
000002  6a80              LDR      r0,[r0,#0x28]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L5.16|
00000a  6288              STR      r0,[r1,#0x28]
;;;701    }
00000c  4770              BX       lr
;;;702    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp0Int||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp0Int PROC
;;;301    /*---------------------------------------------------------------------------------------------------------*/
;;;302    void DrvADC_DisableADCCmp0Int(void)
000000  4803              LDR      r0,|L6.16|
;;;303    {
;;;304        ADC->ADCMPR[0].CMPIE = 0;
000002  6a80              LDR      r0,[r0,#0x28]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L6.16|
00000a  6288              STR      r0,[r1,#0x28]
;;;305    }
00000c  4770              BX       lr
;;;306    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp1||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp1 PROC
;;;752    /*---------------------------------------------------------------------------------------------------------*/
;;;753    void DrvADC_DisableADCCmp1(void)
000000  4803              LDR      r0,|L7.16|
;;;754    {
;;;755        ADC->ADCMPR[1].CMPEN = 0;
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L7.16|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;756    }
00000c  4770              BX       lr
;;;757    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCCmp1Int||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCCmp1Int PROC
;;;341    /*---------------------------------------------------------------------------------------------------------*/
;;;342    void DrvADC_DisableADCCmp1Int(void)
000000  4803              LDR      r0,|L8.16|
;;;343    {
;;;344        ADC->ADCMPR[1].CMPIE = 0;
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;345    }
00000c  4770              BX       lr
;;;346    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableADCInt||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableADCInt PROC
;;;261    /*---------------------------------------------------------------------------------------------------------*/
;;;262    void DrvADC_DisableADCInt(void)
000000  4803              LDR      r0,|L9.16|
;;;263    {
;;;264        ADC->ADCR.ADIE = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L9.16|
00000a  6208              STR      r0,[r1,#0x20]
;;;265    }
00000c  4770              BX       lr
;;;266    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableExtTrigger||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableExtTrigger PROC
;;;464    /*---------------------------------------------------------------------------------------------------------*/
;;;465    void DrvADC_DisableExtTrigger(void)
000000  4803              LDR      r0,|L10.16|
;;;466    {
;;;467        ADC->ADCR.TRGEN = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  21ff              MOVS     r1,#0xff
000006  3101              ADDS     r1,#1
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L10.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;468    }
00000e  4770              BX       lr
;;;469    
                          ENDP

                  |L10.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisablePDMA||, CODE, READONLY, ALIGN=2

                  DrvADC_DisablePDMA PROC
;;;592    /*---------------------------------------------------------------------------------------------------------*/
;;;593    void DrvADC_DisablePDMA(void)
000000  4803              LDR      r0,|L11.16|
;;;594    {
;;;595        ADC->ADCR.PTEN = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L11.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;596    }
00000e  4770              BX       lr
;;;597    
                          ENDP

                  |L11.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_DisableSelfCalibration||, CODE, READONLY, ALIGN=2

                  DrvADC_DisableSelfCalibration PROC
;;;807    /*---------------------------------------------------------------------------------------------------------*/
;;;808    void DrvADC_DisableSelfCalibration(void)
000000  4803              LDR      r0,|L12.16|
;;;809    {
;;;810        ADC->ADCALR.CALEN = 0;
000002  6b40              LDR      r0,[r0,#0x34]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6348              STR      r0,[r1,#0x34]
;;;811    }
00000c  4770              BX       lr
;;;812    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCCmp0||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp0 PROC
;;;665    /*---------------------------------------------------------------------------------------------------------*/
;;;666    int32_t DrvADC_EnableADCCmp0(uint8_t u8CmpChannelNum, E_ADC_CMP_CONDITION CmpCondition, uint16_t u16CmpData, uint8_t u8CmpMatchCount)
000000  b570              PUSH     {r4-r6,lr}
;;;667    {
000002  4604              MOV      r4,r0
;;;668        if(u8CmpChannelNum>7)
000004  2c07              CMP      r4,#7
000006  dd01              BLE      |L13.12|
;;;669            return E_DRVADC_ARGUMENT;
000008  481e              LDR      r0,|L13.132|
                  |L13.10|
;;;670        
;;;671        if(u16CmpData>0x0FFF)
;;;672            return E_DRVADC_ARGUMENT;
;;;673        
;;;674        if(u8CmpMatchCount>0x0F)
;;;675            return E_DRVADC_ARGUMENT;
;;;676        
;;;677        ADC->ADCMPR[0].CMPCH     = u8CmpChannelNum;
;;;678        ADC->ADCMPR[0].CMPCOND   = CmpCondition;
;;;679        ADC->ADCMPR[0].CMPD      = u16CmpData;
;;;680        ADC->ADCMPR[0].CMPMATCNT = u8CmpMatchCount;
;;;681        ADC->ADCMPR[0].CMPEN     = 1;
;;;682        
;;;683        return E_SUCCESS;
;;;684    }
00000a  bd70              POP      {r4-r6,pc}
                  |L13.12|
00000c  481e              LDR      r0,|L13.136|
00000e  4282              CMP      r2,r0                 ;671
000010  dd01              BLE      |L13.22|
000012  481c              LDR      r0,|L13.132|
000014  e7f9              B        |L13.10|
                  |L13.22|
000016  2b0f              CMP      r3,#0xf               ;674
000018  dd01              BLE      |L13.30|
00001a  481a              LDR      r0,|L13.132|
00001c  e7f5              B        |L13.10|
                  |L13.30|
00001e  481b              LDR      r0,|L13.140|
000020  6a80              LDR      r0,[r0,#0x28]         ;677
000022  2538              MOVS     r5,#0x38              ;677
000024  43a8              BICS     r0,r0,r5              ;677
000026  00e5              LSLS     r5,r4,#3              ;677
000028  2638              MOVS     r6,#0x38              ;677
00002a  4035              ANDS     r5,r5,r6              ;677
00002c  4328              ORRS     r0,r0,r5              ;677
00002e  4d17              LDR      r5,|L13.140|
000030  62a8              STR      r0,[r5,#0x28]         ;677
000032  4628              MOV      r0,r5                 ;678
000034  6a80              LDR      r0,[r0,#0x28]         ;678
000036  2504              MOVS     r5,#4                 ;678
000038  43a8              BICS     r0,r0,r5              ;678
00003a  008d              LSLS     r5,r1,#2              ;678
00003c  2604              MOVS     r6,#4                 ;678
00003e  4035              ANDS     r5,r5,r6              ;678
000040  4328              ORRS     r0,r0,r5              ;678
000042  4d12              LDR      r5,|L13.140|
000044  62a8              STR      r0,[r5,#0x28]         ;678
000046  4628              MOV      r0,r5                 ;679
000048  6a80              LDR      r0,[r0,#0x28]         ;679
00004a  4d11              LDR      r5,|L13.144|
00004c  4028              ANDS     r0,r0,r5              ;679
00004e  0415              LSLS     r5,r2,#16             ;679
000050  4e0f              LDR      r6,|L13.144|
000052  43f6              MVNS     r6,r6                 ;679
000054  4035              ANDS     r5,r5,r6              ;679
000056  4328              ORRS     r0,r0,r5              ;679
000058  4d0c              LDR      r5,|L13.140|
00005a  62a8              STR      r0,[r5,#0x28]         ;679
00005c  4628              MOV      r0,r5                 ;680
00005e  6a80              LDR      r0,[r0,#0x28]         ;680
000060  250f              MOVS     r5,#0xf               ;680
000062  022d              LSLS     r5,r5,#8              ;680
000064  43a8              BICS     r0,r0,r5              ;680
000066  021d              LSLS     r5,r3,#8              ;680
000068  260f              MOVS     r6,#0xf               ;680
00006a  0236              LSLS     r6,r6,#8              ;680
00006c  4035              ANDS     r5,r5,r6              ;680
00006e  4328              ORRS     r0,r0,r5              ;680
000070  4d06              LDR      r5,|L13.140|
000072  62a8              STR      r0,[r5,#0x28]         ;680
000074  4628              MOV      r0,r5                 ;681
000076  6a80              LDR      r0,[r0,#0x28]         ;681
000078  0840              LSRS     r0,r0,#1              ;681
00007a  0040              LSLS     r0,r0,#1              ;681
00007c  1c40              ADDS     r0,r0,#1              ;681
00007e  62a8              STR      r0,[r5,#0x28]         ;681
000080  2000              MOVS     r0,#0                 ;683
000082  e7c2              B        |L13.10|
;;;685    
                          ENDP

                  |L13.132|
                          DCD      0xffff8101
                  |L13.136|
                          DCD      0x00000fff
                  |L13.140|
                          DCD      0x400e0000
                  |L13.144|
                          DCD      0xf000ffff

                          AREA ||i.DrvADC_EnableADCCmp0Int||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp0Int PROC
;;;279    /*---------------------------------------------------------------------------------------------------------*/
;;;280    void DrvADC_EnableADCCmp0Int(DRVADC_ADCMP0_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;281    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;282        g_ptADCMP0CallBack = Callback;
000006  480d              LDR      r0,|L14.60|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCMP0CallBack
;;;283        g_pu32UserData[1] = u32UserData;
00000a  480d              LDR      r0,|L14.64|
00000c  6045              STR      r5,[r0,#4]  ; g_pu32UserData
;;;284        _DRVADC_CLEAR_CMP0_INT_FLAG();        /* clear the ADC comparator 0 interrupt flag for safe */
00000e  480d              LDR      r0,|L14.68|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1c80              ADDS     r0,r0,#2
000018  490a              LDR      r1,|L14.68|
00001a  6308              STR      r0,[r1,#0x30]
;;;285        ADC->ADCMPR[0].CMPIE = 1;
00001c  4608              MOV      r0,r1
00001e  6a80              LDR      r0,[r0,#0x28]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4907              LDR      r1,|L14.68|
000028  6288              STR      r0,[r1,#0x28]
;;;286        NVIC_SetPriority(ADC_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00002a  2102              MOVS     r1,#2
00002c  201d              MOVS     r0,#0x1d
00002e  f7fffffe          BL       NVIC_SetPriority
;;;287        NVIC_EnableIRQ(ADC_IRQn);
000032  201d              MOVS     r0,#0x1d
000034  f7fffffe          BL       NVIC_EnableIRQ
;;;288    }
000038  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      g_ptADCMP0CallBack
                  |L14.64|
                          DCD      g_pu32UserData
                  |L14.68|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCCmp1||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp1 PROC
;;;720    /*---------------------------------------------------------------------------------------------------------*/
;;;721    int32_t DrvADC_EnableADCCmp1(uint8_t u8CmpChannelNum, E_ADC_CMP_CONDITION CmpCondition, uint16_t u16CmpData, uint8_t u8CmpMatchCount)
000000  b570              PUSH     {r4-r6,lr}
;;;722    {
000002  4604              MOV      r4,r0
;;;723        if(u8CmpChannelNum>7)
000004  2c07              CMP      r4,#7
000006  dd01              BLE      |L15.12|
;;;724            return E_DRVADC_ARGUMENT;
000008  481e              LDR      r0,|L15.132|
                  |L15.10|
;;;725        
;;;726        if(u16CmpData>0x0FFF)
;;;727            return E_DRVADC_ARGUMENT;
;;;728        
;;;729        if(u8CmpMatchCount>0x0F)
;;;730            return E_DRVADC_ARGUMENT;
;;;731        
;;;732        ADC->ADCMPR[1].CMPCH     = u8CmpChannelNum;
;;;733        ADC->ADCMPR[1].CMPCOND   = CmpCondition;
;;;734        ADC->ADCMPR[1].CMPD      = u16CmpData;
;;;735        ADC->ADCMPR[1].CMPMATCNT = u8CmpMatchCount;
;;;736        ADC->ADCMPR[1].CMPEN     = 1;
;;;737        
;;;738        return E_SUCCESS;
;;;739    }
00000a  bd70              POP      {r4-r6,pc}
                  |L15.12|
00000c  481e              LDR      r0,|L15.136|
00000e  4282              CMP      r2,r0                 ;726
000010  dd01              BLE      |L15.22|
000012  481c              LDR      r0,|L15.132|
000014  e7f9              B        |L15.10|
                  |L15.22|
000016  2b0f              CMP      r3,#0xf               ;729
000018  dd01              BLE      |L15.30|
00001a  481a              LDR      r0,|L15.132|
00001c  e7f5              B        |L15.10|
                  |L15.30|
00001e  481b              LDR      r0,|L15.140|
000020  6ac0              LDR      r0,[r0,#0x2c]         ;732
000022  2538              MOVS     r5,#0x38              ;732
000024  43a8              BICS     r0,r0,r5              ;732
000026  00e5              LSLS     r5,r4,#3              ;732
000028  2638              MOVS     r6,#0x38              ;732
00002a  4035              ANDS     r5,r5,r6              ;732
00002c  4328              ORRS     r0,r0,r5              ;732
00002e  4d17              LDR      r5,|L15.140|
000030  62e8              STR      r0,[r5,#0x2c]         ;732
000032  4628              MOV      r0,r5                 ;733
000034  6ac0              LDR      r0,[r0,#0x2c]         ;733
000036  2504              MOVS     r5,#4                 ;733
000038  43a8              BICS     r0,r0,r5              ;733
00003a  008d              LSLS     r5,r1,#2              ;733
00003c  2604              MOVS     r6,#4                 ;733
00003e  4035              ANDS     r5,r5,r6              ;733
000040  4328              ORRS     r0,r0,r5              ;733
000042  4d12              LDR      r5,|L15.140|
000044  62e8              STR      r0,[r5,#0x2c]         ;733
000046  4628              MOV      r0,r5                 ;734
000048  6ac0              LDR      r0,[r0,#0x2c]         ;734
00004a  4d11              LDR      r5,|L15.144|
00004c  4028              ANDS     r0,r0,r5              ;734
00004e  0415              LSLS     r5,r2,#16             ;734
000050  4e0f              LDR      r6,|L15.144|
000052  43f6              MVNS     r6,r6                 ;734
000054  4035              ANDS     r5,r5,r6              ;734
000056  4328              ORRS     r0,r0,r5              ;734
000058  4d0c              LDR      r5,|L15.140|
00005a  62e8              STR      r0,[r5,#0x2c]         ;734
00005c  4628              MOV      r0,r5                 ;735
00005e  6ac0              LDR      r0,[r0,#0x2c]         ;735
000060  250f              MOVS     r5,#0xf               ;735
000062  022d              LSLS     r5,r5,#8              ;735
000064  43a8              BICS     r0,r0,r5              ;735
000066  021d              LSLS     r5,r3,#8              ;735
000068  260f              MOVS     r6,#0xf               ;735
00006a  0236              LSLS     r6,r6,#8              ;735
00006c  4035              ANDS     r5,r5,r6              ;735
00006e  4328              ORRS     r0,r0,r5              ;735
000070  4d06              LDR      r5,|L15.140|
000072  62e8              STR      r0,[r5,#0x2c]         ;735
000074  4628              MOV      r0,r5                 ;736
000076  6ac0              LDR      r0,[r0,#0x2c]         ;736
000078  0840              LSRS     r0,r0,#1              ;736
00007a  0040              LSLS     r0,r0,#1              ;736
00007c  1c40              ADDS     r0,r0,#1              ;736
00007e  62e8              STR      r0,[r5,#0x2c]         ;736
000080  2000              MOVS     r0,#0                 ;738
000082  e7c2              B        |L15.10|
;;;740    
                          ENDP

                  |L15.132|
                          DCD      0xffff8101
                  |L15.136|
                          DCD      0x00000fff
                  |L15.140|
                          DCD      0x400e0000
                  |L15.144|
                          DCD      0xf000ffff

                          AREA ||i.DrvADC_EnableADCCmp1Int||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCCmp1Int PROC
;;;319    /*---------------------------------------------------------------------------------------------------------*/
;;;320    void DrvADC_EnableADCCmp1Int(DRVADC_ADCMP1_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;322        g_ptADCMP1CallBack = Callback;
000006  480d              LDR      r0,|L16.60|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCMP1CallBack
;;;323        g_pu32UserData[2] = u32UserData;
00000a  480d              LDR      r0,|L16.64|
00000c  6085              STR      r5,[r0,#8]  ; g_pu32UserData
;;;324        _DRVADC_CLEAR_CMP1_INT_FLAG();        /* clear the ADC comparator 1 interrupt flag for safe */
00000e  480d              LDR      r0,|L16.68|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1d00              ADDS     r0,r0,#4
000018  490a              LDR      r1,|L16.68|
00001a  6308              STR      r0,[r1,#0x30]
;;;325        ADC->ADCMPR[1].CMPIE = 1;
00001c  4608              MOV      r0,r1
00001e  6ac0              LDR      r0,[r0,#0x2c]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4907              LDR      r1,|L16.68|
000028  62c8              STR      r0,[r1,#0x2c]
;;;326        NVIC_SetPriority(ADC_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00002a  2102              MOVS     r1,#2
00002c  201d              MOVS     r0,#0x1d
00002e  f7fffffe          BL       NVIC_SetPriority
;;;327        NVIC_EnableIRQ(ADC_IRQn);
000032  201d              MOVS     r0,#0x1d
000034  f7fffffe          BL       NVIC_EnableIRQ
;;;328    }
000038  bd70              POP      {r4-r6,pc}
;;;329    
                          ENDP

00003a  0000              DCW      0x0000
                  |L16.60|
                          DCD      g_ptADCMP1CallBack
                  |L16.64|
                          DCD      g_pu32UserData
                  |L16.68|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableADCInt||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableADCInt PROC
;;;239    /*---------------------------------------------------------------------------------------------------------*/
;;;240    void DrvADC_EnableADCInt(DRVADC_ADC_CALLBACK Callback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;242        g_ptADCCallBack = Callback;
000006  480d              LDR      r0,|L17.60|
000008  6004              STR      r4,[r0,#0]  ; g_ptADCCallBack
;;;243        g_pu32UserData[0] = u32UserData;
00000a  480d              LDR      r0,|L17.64|
00000c  6005              STR      r5,[r0,#0]  ; g_pu32UserData
;;;244        _DRVADC_CLEAR_ADC_INT_FLAG();     /* clear the A/D interrupt flag for safe */
00000e  480d              LDR      r0,|L17.68|
000010  6b00              LDR      r0,[r0,#0x30]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1c40              ADDS     r0,r0,#1
000018  490a              LDR      r1,|L17.68|
00001a  6308              STR      r0,[r1,#0x30]
;;;245        ADC->ADCR.ADIE = 1;
00001c  4608              MOV      r0,r1
00001e  6a00              LDR      r0,[r0,#0x20]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  1c80              ADDS     r0,r0,#2
000026  4907              LDR      r1,|L17.68|
000028  6208              STR      r0,[r1,#0x20]
;;;246        NVIC_SetPriority(ADC_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00002a  2102              MOVS     r1,#2
00002c  201d              MOVS     r0,#0x1d
00002e  f7fffffe          BL       NVIC_SetPriority
;;;247        NVIC_EnableIRQ(ADC_IRQn);
000032  201d              MOVS     r0,#0x1d
000034  f7fffffe          BL       NVIC_EnableIRQ
;;;248    }
000038  bd70              POP      {r4-r6,pc}
;;;249    
                          ENDP

00003a  0000              DCW      0x0000
                  |L17.60|
                          DCD      g_ptADCCallBack
                  |L17.64|
                          DCD      g_pu32UserData
                  |L17.68|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableExtTrigger||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableExtTrigger PROC
;;;443    /*---------------------------------------------------------------------------------------------------------*/
;;;444    void DrvADC_EnableExtTrigger(E_ADC_EXT_TRI_COND TriggerCondition)
000000  4912              LDR      r1,|L18.76|
;;;445    {
;;;446        ADC->ADCR.ADST = 0;                   /* Stop A/D conversion */
000002  6a09              LDR      r1,[r1,#0x20]
000004  2201              MOVS     r2,#1
000006  02d2              LSLS     r2,r2,#11
000008  4391              BICS     r1,r1,r2
00000a  4a10              LDR      r2,|L18.76|
00000c  6211              STR      r1,[r2,#0x20]
;;;447        ADC->ADCR.TRGEN = 0;                  /* Disable the trigger source of STADC pin */
00000e  4611              MOV      r1,r2
000010  6a09              LDR      r1,[r1,#0x20]
000012  1592              ASRS     r2,r2,#22
000014  4391              BICS     r1,r1,r2
000016  4a0d              LDR      r2,|L18.76|
000018  6211              STR      r1,[r2,#0x20]
;;;448        ADC->ADCR.TRGS = 0;                   /* Select the STADC pin as the hardware trigger source */
00001a  4611              MOV      r1,r2
00001c  6a09              LDR      r1,[r1,#0x20]
00001e  2230              MOVS     r2,#0x30
000020  4391              BICS     r1,r1,r2
000022  4a0a              LDR      r2,|L18.76|
000024  6211              STR      r1,[r2,#0x20]
;;;449        ADC->ADCR.TRGCOND = TriggerCondition; /* Set the trigger condition */
000026  4611              MOV      r1,r2
000028  6a09              LDR      r1,[r1,#0x20]
00002a  22c0              MOVS     r2,#0xc0
00002c  4391              BICS     r1,r1,r2
00002e  0182              LSLS     r2,r0,#6
000030  23c0              MOVS     r3,#0xc0
000032  401a              ANDS     r2,r2,r3
000034  4311              ORRS     r1,r1,r2
000036  4a05              LDR      r2,|L18.76|
000038  6211              STR      r1,[r2,#0x20]
;;;450        ADC->ADCR.TRGEN = 1;                  /* Enable the trigger source of STADC pin */
00003a  4611              MOV      r1,r2
00003c  6a09              LDR      r1,[r1,#0x20]
00003e  1592              ASRS     r2,r2,#22
000040  4391              BICS     r1,r1,r2
000042  1889              ADDS     r1,r1,r2
000044  4a01              LDR      r2,|L18.76|
000046  6211              STR      r1,[r2,#0x20]
;;;451    }
000048  4770              BX       lr
;;;452    
                          ENDP

00004a  0000              DCW      0x0000
                  |L18.76|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnablePDMA||, CODE, READONLY, ALIGN=2

                  DrvADC_EnablePDMA PROC
;;;574    /*---------------------------------------------------------------------------------------------------------*/
;;;575    void DrvADC_EnablePDMA(void)
000000  4806              LDR      r0,|L19.28|
;;;576    {
;;;577        ADC->ADCR.ADIE = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4904              LDR      r1,|L19.28|
00000a  6208              STR      r0,[r1,#0x20]
;;;578        ADC->ADCR.PTEN = 1;
00000c  4608              MOV      r0,r1
00000e  6a00              LDR      r0,[r0,#0x20]
000010  1549              ASRS     r1,r1,#21
000012  4388              BICS     r0,r0,r1
000014  1840              ADDS     r0,r0,r1
000016  4901              LDR      r1,|L19.28|
000018  6208              STR      r0,[r1,#0x20]
;;;579    }
00001a  4770              BX       lr
;;;580    
                          ENDP

                  |L19.28|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_EnableSelfCalibration||, CODE, READONLY, ALIGN=2

                  DrvADC_EnableSelfCalibration PROC
;;;769    /*---------------------------------------------------------------------------------------------------------*/
;;;770    void DrvADC_EnableSelfCalibration(void)
000000  4803              LDR      r0,|L20.16|
;;;771    {
;;;772        ADC->ADCALR.CALEN = 1;
000002  6b40              LDR      r0,[r0,#0x34]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  1c40              ADDS     r0,r0,#1
00000a  4901              LDR      r1,|L20.16|
00000c  6348              STR      r0,[r1,#0x34]
;;;773    }
00000e  4770              BX       lr
;;;774    
                          ENDP

                  |L20.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_GetConversionData||, CODE, READONLY, ALIGN=2

                  DrvADC_GetConversionData PROC
;;;540    /*---------------------------------------------------------------------------------------------------------*/
;;;541    int32_t DrvADC_GetConversionData(uint8_t u8ChannelNum)
000000  4601              MOV      r1,r0
;;;542    {
;;;543        if(ADC->ADCR.DIFFEN==0)       /* Single-end input mode */
000002  4812              LDR      r0,|L21.76|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0540              LSLS     r0,r0,#21
000008  0fc0              LSRS     r0,r0,#31
00000a  d106              BNE      |L21.26|
;;;544        {
;;;545            return ((int32_t)(ADC->ADDR[u8ChannelNum].RSLT & 0xFFF));
00000c  0088              LSLS     r0,r1,#2
00000e  4a0f              LDR      r2,|L21.76|
000010  1880              ADDS     r0,r0,r2
000012  6800              LDR      r0,[r0,#0]
000014  0500              LSLS     r0,r0,#20
000016  0d00              LSRS     r0,r0,#20
                  |L21.24|
;;;546        }
;;;547        else                          /* Differential input mode */
;;;548        {
;;;549            if(ADC->ADCR.DMOF==0)     /* unsigned format */
;;;550                return (ADC->ADDR[u8ChannelNum].RSLT);
;;;551            else                      /* 2's complement */
;;;552            {
;;;553                uint16_t u16AdcData = ADC->ADDR[u8ChannelNum].RSLT;
;;;554                if( u16AdcData&0x8000 )
;;;555                    return (0xFFFF0000|u16AdcData);
;;;556                else
;;;557                    return (int32_t)u16AdcData;
;;;558            }
;;;559        }
;;;560    }
000018  4770              BX       lr
                  |L21.26|
00001a  480c              LDR      r0,|L21.76|
00001c  6a00              LDR      r0,[r0,#0x20]         ;549
00001e  0fc0              LSRS     r0,r0,#31             ;549
000020  d105              BNE      |L21.46|
000022  0088              LSLS     r0,r1,#2              ;550
000024  4a09              LDR      r2,|L21.76|
000026  1880              ADDS     r0,r0,r2              ;550
000028  6800              LDR      r0,[r0,#0]            ;550
00002a  b280              UXTH     r0,r0                 ;550
00002c  e7f4              B        |L21.24|
                  |L21.46|
00002e  0088              LSLS     r0,r1,#2              ;553
000030  4b06              LDR      r3,|L21.76|
000032  18c0              ADDS     r0,r0,r3              ;553
000034  6800              LDR      r0,[r0,#0]            ;553
000036  b282              UXTH     r2,r0                 ;553
000038  2001              MOVS     r0,#1                 ;554
00003a  03c0              LSLS     r0,r0,#15             ;554
00003c  4202              TST      r2,r0                 ;554
00003e  d003              BEQ      |L21.72|
000040  4610              MOV      r0,r2                 ;555
000042  4b03              LDR      r3,|L21.80|
000044  4318              ORRS     r0,r0,r3              ;555
000046  e7e7              B        |L21.24|
                  |L21.72|
000048  4610              MOV      r0,r2                 ;557
00004a  e7e5              B        |L21.24|
;;;561    
                          ENDP

                  |L21.76|
                          DCD      0x400e0000
                  |L21.80|
                          DCD      0xffff0000

                          AREA ||i.DrvADC_GetConversionRate||, CODE, READONLY, ALIGN=2

                  DrvADC_GetConversionRate PROC
;;;407    /*---------------------------------------------------------------------------------------------------------*/
;;;408    uint32_t DrvADC_GetConversionRate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;409    {
;;;410        if( SYSCLK->CLKSEL1.ADC_S == EXTERNAL_12MHZ )         /* external 4~24MHz crystal clock */
000002  4825              LDR      r0,|L22.152|
000004  6940              LDR      r0,[r0,#0x14]
000006  0700              LSLS     r0,r0,#28
000008  0f80              LSRS     r0,r0,#30
00000a  d10c              BNE      |L22.38|
;;;411        {
;;;412            return (__XTAL/(SYSCLK->CLKDIV.ADC_N + 1)/27);
00000c  4822              LDR      r0,|L22.152|
00000e  6980              LDR      r0,[r0,#0x18]
000010  0200              LSLS     r0,r0,#8
000012  0e00              LSRS     r0,r0,#24
000014  1c41              ADDS     r1,r0,#1
000016  4821              LDR      r0,|L22.156|
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  4604              MOV      r4,r0
00001e  211b              MOVS     r1,#0x1b
000020  f7fffffe          BL       __aeabi_uidivmod
                  |L22.36|
;;;413        }
;;;414        else if( SYSCLK->CLKSEL1.ADC_S == INTERNAL_PLL )      /* PLL clock */
;;;415        {
;;;416            return ( DrvSYS_GetPLLClockFreq()/(SYSCLK->CLKDIV.ADC_N + 1)/27);
;;;417        }
;;;418        else if( SYSCLK->CLKSEL1.ADC_S == INTERNAL_HCLK )     /* HCLK */
;;;419        {
;;;420            return ( DrvSYS_GetHCLKFreq()/(SYSCLK->CLKDIV.ADC_N + 1)/23);
;;;421        }
;;;422        else                                                  /* internal 22.1184MHz RC oscillator clock */
;;;423        {
;;;424            return (__IRC22M/(SYSCLK->CLKDIV.ADC_N + 1)/27);
;;;425        }
;;;426    }
000024  bd70              POP      {r4-r6,pc}
                  |L22.38|
000026  481c              LDR      r0,|L22.152|
000028  6940              LDR      r0,[r0,#0x14]         ;414
00002a  0700              LSLS     r0,r0,#28             ;414
00002c  0f80              LSRS     r0,r0,#30             ;414
00002e  2801              CMP      r0,#1                 ;414
000030  d10f              BNE      |L22.82|
000032  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000036  4605              MOV      r5,r0                 ;416
000038  4817              LDR      r0,|L22.152|
00003a  6980              LDR      r0,[r0,#0x18]         ;416
00003c  0200              LSLS     r0,r0,#8              ;416
00003e  0e00              LSRS     r0,r0,#24             ;416
000040  1c41              ADDS     r1,r0,#1              ;416
000042  4628              MOV      r0,r5                 ;416
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4604              MOV      r4,r0                 ;416
00004a  211b              MOVS     r1,#0x1b              ;416
00004c  f7fffffe          BL       __aeabi_uidivmod
000050  e7e8              B        |L22.36|
                  |L22.82|
000052  4811              LDR      r0,|L22.152|
000054  6940              LDR      r0,[r0,#0x14]         ;418
000056  0700              LSLS     r0,r0,#28             ;418
000058  0f80              LSRS     r0,r0,#30             ;418
00005a  2802              CMP      r0,#2                 ;418
00005c  d10f              BNE      |L22.126|
00005e  f7fffffe          BL       DrvSYS_GetHCLKFreq
000062  4605              MOV      r5,r0                 ;420
000064  480c              LDR      r0,|L22.152|
000066  6980              LDR      r0,[r0,#0x18]         ;420
000068  0200              LSLS     r0,r0,#8              ;420
00006a  0e00              LSRS     r0,r0,#24             ;420
00006c  1c41              ADDS     r1,r0,#1              ;420
00006e  4628              MOV      r0,r5                 ;420
000070  f7fffffe          BL       __aeabi_uidivmod
000074  4604              MOV      r4,r0                 ;420
000076  2117              MOVS     r1,#0x17              ;420
000078  f7fffffe          BL       __aeabi_uidivmod
00007c  e7d2              B        |L22.36|
                  |L22.126|
00007e  4806              LDR      r0,|L22.152|
000080  6980              LDR      r0,[r0,#0x18]         ;424
000082  0200              LSLS     r0,r0,#8              ;424
000084  0e00              LSRS     r0,r0,#24             ;424
000086  1c41              ADDS     r1,r0,#1              ;424
000088  4805              LDR      r0,|L22.160|
00008a  f7fffffe          BL       __aeabi_uidivmod
00008e  4604              MOV      r4,r0                 ;424
000090  211b              MOVS     r1,#0x1b              ;424
000092  f7fffffe          BL       __aeabi_uidivmod
000096  e7c5              B        |L22.36|
;;;427    
                          ENDP

                  |L22.152|
                          DCD      0x50000200
                  |L22.156|
                          DCD      0x00b71b00
                  |L22.160|
                          DCD      0x01518000

                          AREA ||i.DrvADC_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvADC_GetVersion PROC
;;;843    /*---------------------------------------------------------------------------------------------------------*/
;;;844    uint32_t DrvADC_GetVersion (void)
000000  4800              LDR      r0,|L23.4|
;;;845    {
;;;846        return DRVADC_VERSION_NUM;
;;;847    }
000002  4770              BX       lr
;;;848    
                          ENDP

                  |L23.4|
                          DCD      0x00010302

                          AREA ||i.DrvADC_IsCalibrationDone||, CODE, READONLY, ALIGN=2

                  DrvADC_IsCalibrationDone PROC
;;;787    /*---------------------------------------------------------------------------------------------------------*/
;;;788    uint32_t DrvADC_IsCalibrationDone(void)
000000  4804              LDR      r0,|L24.20|
;;;789    {
;;;790        if(ADC->ADCALR.CALDONE == 1)
000002  6b40              LDR      r0,[r0,#0x34]
000004  0780              LSLS     r0,r0,#30
000006  0fc0              LSRS     r0,r0,#31
000008  d001              BEQ      |L24.14|
;;;791            return TRUE;
00000a  2001              MOVS     r0,#1
                  |L24.12|
;;;792        else
;;;793            return FALSE;
;;;794    }
00000c  4770              BX       lr
                  |L24.14|
00000e  2000              MOVS     r0,#0                 ;793
000010  e7fc              B        |L24.12|
;;;795    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsConversionDone||, CODE, READONLY, ALIGN=2

                  DrvADC_IsConversionDone PROC
;;;519    /*---------------------------------------------------------------------------------------------------------*/
;;;520    uint32_t DrvADC_IsConversionDone(void)
000000  4803              LDR      r0,|L25.16|
;;;521    {
;;;522        if(ADC->ADSR.ADF==0)
000002  6b00              LDR      r0,[r0,#0x30]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  d100              BNE      |L25.12|
                  |L25.10|
;;;523            return FALSE;
;;;524        else
;;;525            return TRUE;
;;;526    }
00000a  4770              BX       lr
                  |L25.12|
00000c  2001              MOVS     r0,#1                 ;525
00000e  e7fc              B        |L25.10|
;;;527    
                          ENDP

                  |L25.16|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsDataOverrun||, CODE, READONLY, ALIGN=2

                  DrvADC_IsDataOverrun PROC
;;;635    /*---------------------------------------------------------------------------------------------------------*/
;;;636    uint32_t DrvADC_IsDataOverrun(uint8_t u8ChannelNum)
000000  b50c              PUSH     {r2,r3,lr}
;;;637    {
000002  4601              MOV      r1,r0
;;;638        volatile uint8_t u8ChannelSelBitwise[8]={ 1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80 };
000004  a209              ADR      r2,|L26.44|
000006  ca05              LDM      r2,{r0,r2}
000008  9000              STR      r0,[sp,#0]
00000a  9201              STR      r2,[sp,#4]
;;;639        
;;;640        if(u8ChannelNum>7)
00000c  2907              CMP      r1,#7
00000e  dd01              BLE      |L26.20|
;;;641            return FALSE;
000010  2000              MOVS     r0,#0
                  |L26.18|
;;;642        if( ADC->ADSR.OVERRUN & u8ChannelSelBitwise[u8ChannelNum] )
;;;643            return TRUE;
;;;644        else
;;;645            return FALSE;
;;;646    }
000012  bd0c              POP      {r2,r3,pc}
                  |L26.20|
000014  4807              LDR      r0,|L26.52|
000016  6b00              LDR      r0,[r0,#0x30]         ;642
000018  0200              LSLS     r0,r0,#8              ;642
00001a  0e00              LSRS     r0,r0,#24             ;642
00001c  466a              MOV      r2,sp                 ;642
00001e  5c52              LDRB     r2,[r2,r1]            ;642
000020  4210              TST      r0,r2                 ;642
000022  d001              BEQ      |L26.40|
000024  2001              MOVS     r0,#1                 ;643
000026  e7f4              B        |L26.18|
                  |L26.40|
000028  2000              MOVS     r0,#0                 ;645
00002a  e7f2              B        |L26.18|
;;;647    
                          ENDP

                  |L26.44|
00002c  01020408          DCB      1,2,4,"\b",16," @",128
000030  10204080
                  |L26.52|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_IsDataValid||, CODE, READONLY, ALIGN=2

                  DrvADC_IsDataValid PROC
;;;610    /*---------------------------------------------------------------------------------------------------------*/
;;;611    uint32_t DrvADC_IsDataValid(uint8_t u8ChannelNum)
000000  b50c              PUSH     {r2,r3,lr}
;;;612    {
000002  4601              MOV      r1,r0
;;;613        volatile uint8_t u8ChannelSelBitwise[8]={ 1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80 };
000004  a209              ADR      r2,|L27.44|
000006  ca05              LDM      r2,{r0,r2}
000008  9000              STR      r0,[sp,#0]
00000a  9201              STR      r2,[sp,#4]
;;;614        
;;;615        if(u8ChannelNum>7)
00000c  2907              CMP      r1,#7
00000e  dd01              BLE      |L27.20|
;;;616            return FALSE;
000010  2000              MOVS     r0,#0
                  |L27.18|
;;;617        if( ADC->ADSR.VALID & u8ChannelSelBitwise[u8ChannelNum] )
;;;618            return TRUE;
;;;619        else
;;;620            return FALSE;
;;;621    }
000012  bd0c              POP      {r2,r3,pc}
                  |L27.20|
000014  4807              LDR      r0,|L27.52|
000016  6b00              LDR      r0,[r0,#0x30]         ;617
000018  0400              LSLS     r0,r0,#16             ;617
00001a  0e00              LSRS     r0,r0,#24             ;617
00001c  466a              MOV      r2,sp                 ;617
00001e  5c52              LDRB     r2,[r2,r1]            ;617
000020  4210              TST      r0,r2                 ;617
000022  d001              BEQ      |L27.40|
000024  2001              MOVS     r0,#1                 ;618
000026  e7f4              B        |L27.18|
                  |L27.40|
000028  2000              MOVS     r0,#0                 ;620
00002a  e7f2              B        |L27.18|
;;;622    
                          ENDP

                  |L27.44|
00002c  01020408          DCB      1,2,4,"\b",16," @",128
000030  10204080
                  |L27.52|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_Open||, CODE, READONLY, ALIGN=2

                  DrvADC_Open PROC
;;;48     /*---------------------------------------------------------------------------------------------------------*/
;;;49     void DrvADC_Open(E_ADC_INPUT_MODE InputMode, E_ADC_OPERATION_MODE OpMode, uint8_t u8ChannelSelBitwise, E_ADC_CLK_SRC ClockSrc, uint8_t u8AdcDivisor)
000000  b5f0              PUSH     {r4-r7,lr}
;;;50     {
000002  9c05              LDR      r4,[sp,#0x14]
;;;51         /* reset ADC */
;;;52         SYS->IPRSTC2.ADC_RST = 1;
000004  2505              MOVS     r5,#5
000006  072d              LSLS     r5,r5,#28
000008  68ed              LDR      r5,[r5,#0xc]
00000a  2601              MOVS     r6,#1
00000c  0736              LSLS     r6,r6,#28
00000e  43b5              BICS     r5,r5,r6
000010  19ad              ADDS     r5,r5,r6
000012  2605              MOVS     r6,#5
000014  0736              LSLS     r6,r6,#28
000016  60f5              STR      r5,[r6,#0xc]
;;;53         SYS->IPRSTC2.ADC_RST = 0;
000018  4635              MOV      r5,r6
00001a  68ed              LDR      r5,[r5,#0xc]
00001c  2601              MOVS     r6,#1
00001e  0736              LSLS     r6,r6,#28
000020  43b5              BICS     r5,r5,r6
000022  2605              MOVS     r6,#5
000024  0736              LSLS     r6,r6,#28
000026  60f5              STR      r5,[r6,#0xc]
;;;54         
;;;55         /* ADC clock source */
;;;56         SYSCLK->CLKSEL1.ADC_S = ClockSrc;
000028  4d2b              LDR      r5,|L28.216|
00002a  696d              LDR      r5,[r5,#0x14]
00002c  260c              MOVS     r6,#0xc
00002e  43b5              BICS     r5,r5,r6
000030  009e              LSLS     r6,r3,#2
000032  270c              MOVS     r7,#0xc
000034  403e              ANDS     r6,r6,r7
000036  4335              ORRS     r5,r5,r6
000038  4e27              LDR      r6,|L28.216|
00003a  6175              STR      r5,[r6,#0x14]
;;;57         
;;;58         /* Set ADC divisor */
;;;59         SYSCLK->CLKDIV.ADC_N = u8AdcDivisor;
00003c  4635              MOV      r5,r6
00003e  69ad              LDR      r5,[r5,#0x18]
000040  26ff              MOVS     r6,#0xff
000042  0436              LSLS     r6,r6,#16
000044  43b5              BICS     r5,r5,r6
000046  0426              LSLS     r6,r4,#16
000048  27ff              MOVS     r7,#0xff
00004a  043f              LSLS     r7,r7,#16
00004c  403e              ANDS     r6,r6,r7
00004e  4335              ORRS     r5,r5,r6
000050  4e21              LDR      r6,|L28.216|
000052  61b5              STR      r5,[r6,#0x18]
;;;60         /* ADC engine clock enable */
;;;61         SYSCLK->APBCLK.ADC_EN = 1;
000054  4635              MOV      r5,r6
000056  68ad              LDR      r5,[r5,#8]
000058  04f6              LSLS     r6,r6,#19
00005a  43b5              BICS     r5,r5,r6
00005c  19ad              ADDS     r5,r5,r6
00005e  4e1e              LDR      r6,|L28.216|
000060  60b5              STR      r5,[r6,#8]
;;;62         /* ADC enable */
;;;63         ADC->ADCR.ADEN = 1;
000062  4d1e              LDR      r5,|L28.220|
000064  6a2d              LDR      r5,[r5,#0x20]
000066  086d              LSRS     r5,r5,#1
000068  006d              LSLS     r5,r5,#1
00006a  1c6d              ADDS     r5,r5,#1
00006c  4e1b              LDR      r6,|L28.220|
00006e  6235              STR      r5,[r6,#0x20]
;;;64         
;;;65         if( InputMode == ADC_SINGLE_END )
000070  2800              CMP      r0,#0
000072  d106              BNE      |L28.130|
;;;66             ADC->ADCR.DIFFEN = 0;     /* single end input */
000074  4635              MOV      r5,r6
000076  6a2d              LDR      r5,[r5,#0x20]
000078  1536              ASRS     r6,r6,#20
00007a  43b5              BICS     r5,r5,r6
00007c  4e17              LDR      r6,|L28.220|
00007e  6235              STR      r5,[r6,#0x20]
000080  e007              B        |L28.146|
                  |L28.130|
;;;67         else
;;;68             ADC->ADCR.DIFFEN = 1;     /* differential input */
000082  4d16              LDR      r5,|L28.220|
000084  6a2d              LDR      r5,[r5,#0x20]
000086  2601              MOVS     r6,#1
000088  02b6              LSLS     r6,r6,#10
00008a  43b5              BICS     r5,r5,r6
00008c  19ad              ADDS     r5,r5,r6
00008e  4e13              LDR      r6,|L28.220|
000090  6235              STR      r5,[r6,#0x20]
                  |L28.146|
;;;69         
;;;70         if( OpMode == ADC_SINGLE_OP )
000092  2900              CMP      r1,#0
000094  d106              BNE      |L28.164|
;;;71             ADC->ADCR.ADMD = 0;     /* single mode */
000096  4d11              LDR      r5,|L28.220|
000098  6a2d              LDR      r5,[r5,#0x20]
00009a  260c              MOVS     r6,#0xc
00009c  43b5              BICS     r5,r5,r6
00009e  4e0f              LDR      r6,|L28.220|
0000a0  6235              STR      r5,[r6,#0x20]
0000a2  e010              B        |L28.198|
                  |L28.164|
;;;72         else if( OpMode == ADC_SINGLE_CYCLE_OP )
0000a4  2901              CMP      r1,#1
0000a6  d107              BNE      |L28.184|
;;;73             ADC->ADCR.ADMD = 2;     /* single-cycle scan mode */
0000a8  4d0c              LDR      r5,|L28.220|
0000aa  6a2d              LDR      r5,[r5,#0x20]
0000ac  260c              MOVS     r6,#0xc
0000ae  43b5              BICS     r5,r5,r6
0000b0  3508              ADDS     r5,r5,#8
0000b2  4e0a              LDR      r6,|L28.220|
0000b4  6235              STR      r5,[r6,#0x20]
0000b6  e006              B        |L28.198|
                  |L28.184|
;;;74         else
;;;75             ADC->ADCR.ADMD = 3;     /* continuous scan mode */
0000b8  4d08              LDR      r5,|L28.220|
0000ba  6a2d              LDR      r5,[r5,#0x20]
0000bc  260c              MOVS     r6,#0xc
0000be  43b5              BICS     r5,r5,r6
0000c0  350c              ADDS     r5,r5,#0xc
0000c2  4e06              LDR      r6,|L28.220|
0000c4  6235              STR      r5,[r6,#0x20]
                  |L28.198|
;;;76         
;;;77         ADC->ADCHER.CHEN = u8ChannelSelBitwise;
0000c6  4d05              LDR      r5,|L28.220|
0000c8  6a6d              LDR      r5,[r5,#0x24]
0000ca  0a2d              LSRS     r5,r5,#8
0000cc  022d              LSLS     r5,r5,#8
0000ce  b2d6              UXTB     r6,r2
0000d0  4335              ORRS     r5,r5,r6
0000d2  4e02              LDR      r6,|L28.220|
0000d4  6275              STR      r5,[r6,#0x24]
;;;78     }
0000d6  bdf0              POP      {r4-r7,pc}
;;;79     
                          ENDP

                  |L28.216|
                          DCD      0x50000200
                  |L28.220|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_SetADCChannel||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCChannel PROC
;;;117    /*---------------------------------------------------------------------------------------------------------*/
;;;118    void DrvADC_SetADCChannel(uint8_t u8ChannelSelBitwise)
000000  4904              LDR      r1,|L29.20|
;;;119    {     
;;;120        ADC->ADCHER.CHEN = u8ChannelSelBitwise;
000002  6a49              LDR      r1,[r1,#0x24]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  b2c2              UXTB     r2,r0
00000a  4311              ORRS     r1,r1,r2
00000c  4a01              LDR      r2,|L29.20|
00000e  6251              STR      r1,[r2,#0x24]
;;;121    }
000010  4770              BX       lr
;;;122    
                          ENDP

000012  0000              DCW      0x0000
                  |L29.20|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_SetADCClkSrc||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCClkSrc PROC
;;;203    /*---------------------------------------------------------------------------------------------------------*/
;;;204    void DrvADC_SetADCClkSrc(E_ADC_CLK_SRC ClockSrc)
000000  4905              LDR      r1,|L30.24|
;;;205    {
;;;206        SYSCLK->CLKSEL1.ADC_S = ClockSrc; /* ADC clock source */
000002  6949              LDR      r1,[r1,#0x14]
000004  220c              MOVS     r2,#0xc
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  230c              MOVS     r3,#0xc
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L30.24|
000012  6151              STR      r1,[r2,#0x14]
;;;207    }
000014  4770              BX       lr
;;;208    
                          ENDP

000016  0000              DCW      0x0000
                  |L30.24|
                          DCD      0x50000200

                          AREA ||i.DrvADC_SetADCDivisor||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCDivisor PROC
;;;221    /*---------------------------------------------------------------------------------------------------------*/
;;;222    void DrvADC_SetADCDivisor(uint8_t u8AdcDivisor)
000000  4906              LDR      r1,|L31.28|
;;;223    {
;;;224        SYSCLK->CLKDIV.ADC_N = u8AdcDivisor;
000002  6989              LDR      r1,[r1,#0x18]
000004  22ff              MOVS     r2,#0xff
000006  0412              LSLS     r2,r2,#16
000008  4391              BICS     r1,r1,r2
00000a  0402              LSLS     r2,r0,#16
00000c  23ff              MOVS     r3,#0xff
00000e  041b              LSLS     r3,r3,#16
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L31.28|
000016  6191              STR      r1,[r2,#0x18]
;;;225    }
000018  4770              BX       lr
;;;226    
                          ENDP

00001a  0000              DCW      0x0000
                  |L31.28|
                          DCD      0x50000200

                          AREA ||i.DrvADC_SetADCInputMode||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCInputMode PROC
;;;159    /*---------------------------------------------------------------------------------------------------------*/
;;;160    void DrvADC_SetADCInputMode(E_ADC_INPUT_MODE InputMode)
000000  2800              CMP      r0,#0
;;;161    {
;;;162        if( InputMode == ADC_SINGLE_END )
000002  d107              BNE      |L32.20|
;;;163            ADC->ADCR.DIFFEN = 0;     /* single end input */
000004  4908              LDR      r1,|L32.40|
000006  6a09              LDR      r1,[r1,#0x20]
000008  2201              MOVS     r2,#1
00000a  0292              LSLS     r2,r2,#10
00000c  4391              BICS     r1,r1,r2
00000e  4a06              LDR      r2,|L32.40|
000010  6211              STR      r1,[r2,#0x20]
000012  e007              B        |L32.36|
                  |L32.20|
;;;164        else
;;;165            ADC->ADCR.DIFFEN = 1;     /* differential input */
000014  4904              LDR      r1,|L32.40|
000016  6a09              LDR      r1,[r1,#0x20]
000018  2201              MOVS     r2,#1
00001a  0292              LSLS     r2,r2,#10
00001c  4391              BICS     r1,r1,r2
00001e  1889              ADDS     r1,r1,r2
000020  4a01              LDR      r2,|L32.40|
000022  6211              STR      r1,[r2,#0x20]
                  |L32.36|
;;;166    }
000024  4770              BX       lr
;;;167    
                          ENDP

000026  0000              DCW      0x0000
                  |L32.40|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_SetADCOperationMode||, CODE, READONLY, ALIGN=2

                  DrvADC_SetADCOperationMode PROC
;;;180    /*---------------------------------------------------------------------------------------------------------*/
;;;181    void DrvADC_SetADCOperationMode(E_ADC_OPERATION_MODE OpMode)
000000  2800              CMP      r0,#0
;;;182    {
;;;183        if( OpMode == ADC_SINGLE_OP )
000002  d106              BNE      |L33.18|
;;;184            ADC->ADCR.ADMD = 0;         /* single mode */
000004  490c              LDR      r1,|L33.56|
000006  6a09              LDR      r1,[r1,#0x20]
000008  220c              MOVS     r2,#0xc
00000a  4391              BICS     r1,r1,r2
00000c  4a0a              LDR      r2,|L33.56|
00000e  6211              STR      r1,[r2,#0x20]
000010  e010              B        |L33.52|
                  |L33.18|
;;;185        else if( OpMode == ADC_SINGLE_CYCLE_OP )
000012  2801              CMP      r0,#1
000014  d107              BNE      |L33.38|
;;;186            ADC->ADCR.ADMD = 2;         /* single-cycle scan mode */
000016  4908              LDR      r1,|L33.56|
000018  6a09              LDR      r1,[r1,#0x20]
00001a  220c              MOVS     r2,#0xc
00001c  4391              BICS     r1,r1,r2
00001e  3108              ADDS     r1,r1,#8
000020  4a05              LDR      r2,|L33.56|
000022  6211              STR      r1,[r2,#0x20]
000024  e006              B        |L33.52|
                  |L33.38|
;;;187        else
;;;188            ADC->ADCR.ADMD = 3;         /* continuous scan mode */
000026  4904              LDR      r1,|L33.56|
000028  6a09              LDR      r1,[r1,#0x20]
00002a  220c              MOVS     r2,#0xc
00002c  4391              BICS     r1,r1,r2
00002e  310c              ADDS     r1,r1,#0xc
000030  4a01              LDR      r2,|L33.56|
000032  6211              STR      r1,[r2,#0x20]
                  |L33.52|
;;;189    }
000034  4770              BX       lr
;;;190    
                          ENDP

000036  0000              DCW      0x0000
                  |L33.56|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_StartConvert||, CODE, READONLY, ALIGN=2

                  DrvADC_StartConvert PROC
;;;481    /*---------------------------------------------------------------------------------------------------------*/
;;;482    void DrvADC_StartConvert(void)
000000  4807              LDR      r0,|L34.32|
;;;483    {
;;;484        /* clear the A/D conversion interrupt flag (ADF) */
;;;485        /* "ADC->ADSR.ADF = 1;" is not recommended. It may clear CMPF0 and CMPF1 */
;;;486        outpw(ADC_ADSR, (inpw(ADC_ADSR)&(~0x7))|0x1);
000002  6b00              LDR      r0,[r0,#0x30]
000004  08c0              LSRS     r0,r0,#3
000006  00c0              LSLS     r0,r0,#3
000008  1c40              ADDS     r0,r0,#1
00000a  4905              LDR      r1,|L34.32|
00000c  6308              STR      r0,[r1,#0x30]
;;;487        ADC->ADCR.ADST = 1;
00000e  4608              MOV      r0,r1
000010  6a00              LDR      r0,[r0,#0x20]
000012  2101              MOVS     r1,#1
000014  02c9              LSLS     r1,r1,#11
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4901              LDR      r1,|L34.32|
00001c  6208              STR      r0,[r1,#0x20]
;;;488    }
00001e  4770              BX       lr
;;;489    
                          ENDP

                  |L34.32|
                          DCD      0x400e0000

                          AREA ||i.DrvADC_StopConvert||, CODE, READONLY, ALIGN=2

                  DrvADC_StopConvert PROC
;;;501    /*---------------------------------------------------------------------------------------------------------*/
;;;502    void DrvADC_StopConvert(void)
000000  4803              LDR      r0,|L35.16|
;;;503    {
;;;504        ADC->ADCR.ADST = 0;
000002  6a00              LDR      r0,[r0,#0x20]
000004  2101              MOVS     r1,#1
000006  02c9              LSLS     r1,r1,#11
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L35.16|
00000c  6208              STR      r0,[r1,#0x20]
;;;505    }
00000e  4770              BX       lr
;;;506    
                          ENDP

                  |L35.16|
                          DCD      0x400e0000

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L36.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L37.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L37.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L37.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L37.108|
                  |L37.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L37.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L37.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L37.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L37.112|
                          DCD      0xe000ed1c
                  |L37.116|
                          DCD      0xe000e100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pu32UserData
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  g_ptADCCallBack
                          DCD      0x00000000
                  g_ptADCMP0CallBack
                          DCD      0x00000000
                  g_ptADCMP1CallBack
                          DCD      0x00000000
