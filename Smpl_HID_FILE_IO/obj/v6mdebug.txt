; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\v6mdebug.o --depend=.\obj\v6mdebug.d --feedback=.\obj\Smpl_HID_FILE_IO.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\obj\v6mdebug.crf V6MDebug.c]
                          THUMB

                          AREA ||i.V6M_ProcessCommand||, CODE, READONLY, ALIGN=2

                  V6M_ProcessCommand PROC
;;;25     
;;;26     void V6M_ProcessCommand(const uint8_t *pu8Buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
000002  4605              MOV      r5,r0
;;;28         static uint8_t au8RetBuffer[64], au8DataBuffer[56]; //, au8SPIDataBuffer[56];
;;;29     	static uint8_t au8SPIWriteDataBuffer[256], au8SPIReadDataBuffer[256];
;;;30     	uint32_t i;
;;;31     	uint32_t u32Cmd;
;;;32     	_DRVUSB_DISABLE_USB_INT();
000004  48df              LDR      r0,|L1.900|
000006  6800              LDR      r0,[r0,#0]
000008  2102              MOVS     r1,#2
00000a  4388              BICS     r0,r0,r1
00000c  49dd              LDR      r1,|L1.900|
00000e  6008              STR      r0,[r1,#0]
;;;33         u32Cmd = (uint32_t)pu8Buffer[0] + (uint32_t)(pu8Buffer[1] << 8) + (uint32_t)(pu8Buffer[2] << 16) + (uint32_t)(pu8Buffer[3] << 24);
000010  7828              LDRB     r0,[r5,#0]
000012  7869              LDRB     r1,[r5,#1]
000014  0209              LSLS     r1,r1,#8
000016  1840              ADDS     r0,r0,r1
000018  78a9              LDRB     r1,[r5,#2]
00001a  0409              LSLS     r1,r1,#16
00001c  1840              ADDS     r0,r0,r1
00001e  78e9              LDRB     r1,[r5,#3]
000020  0609              LSLS     r1,r1,#24
000022  1846              ADDS     r6,r0,r1
;;;34         u32PackNum = (uint32_t)pu8Buffer[4] + (uint32_t)(pu8Buffer[5] << 8) + (uint32_t)(pu8Buffer[6] << 16) + (uint32_t)(pu8Buffer[7] << 24);
000024  7928              LDRB     r0,[r5,#4]
000026  7969              LDRB     r1,[r5,#5]
000028  0209              LSLS     r1,r1,#8
00002a  1840              ADDS     r0,r0,r1
00002c  79a9              LDRB     r1,[r5,#6]
00002e  0409              LSLS     r1,r1,#16
000030  1840              ADDS     r0,r0,r1
000032  79e9              LDRB     r1,[r5,#7]
000034  0609              LSLS     r1,r1,#24
000036  1840              ADDS     r0,r0,r1
000038  49d3              LDR      r1,|L1.904|
00003a  6008              STR      r0,[r1,#0]  ; u32PackNum
;;;35     
;;;36         for (i = 0;i < 64;i++)
00003c  2400              MOVS     r4,#0
00003e  e003              B        |L1.72|
                  |L1.64|
;;;37             au8RetBuffer[i] = 0x00; // Clear return buffer
000040  2000              MOVS     r0,#0
000042  49d2              LDR      r1,|L1.908|
000044  5508              STRB     r0,[r1,r4]
000046  1c64              ADDS     r4,r4,#1              ;36
                  |L1.72|
000048  2c40              CMP      r4,#0x40              ;36
00004a  d3f9              BCC      |L1.64|
;;;38     
;;;39         for (i = 0;i < 56;i++)
00004c  2400              MOVS     r4,#0
00004e  e003              B        |L1.88|
                  |L1.80|
;;;40     	{
;;;41             au8DataBuffer[i] = 0x00; // Clear data buffer
000050  2000              MOVS     r0,#0
000052  49cf              LDR      r1,|L1.912|
000054  5508              STRB     r0,[r1,r4]
000056  1c64              ADDS     r4,r4,#1              ;39
                  |L1.88|
000058  2c38              CMP      r4,#0x38              ;39
00005a  d3f9              BCC      |L1.80|
;;;42     	}
;;;43     
;;;44         for (i = 0;i < 256;i++)
00005c  2400              MOVS     r4,#0
00005e  e005              B        |L1.108|
                  |L1.96|
;;;45     	{
;;;46             au8SPIWriteDataBuffer[i] = 0x00; // Clear data buffer
000060  2000              MOVS     r0,#0
000062  49cc              LDR      r1,|L1.916|
000064  5508              STRB     r0,[r1,r4]
;;;47     		au8SPIReadDataBuffer[i] = 0x00; // Clear data buffer
000066  49cc              LDR      r1,|L1.920|
000068  5508              STRB     r0,[r1,r4]
00006a  1c64              ADDS     r4,r4,#1              ;44
                  |L1.108|
00006c  2cff              CMP      r4,#0xff              ;44
00006e  d9f7              BLS      |L1.96|
;;;48     	}
;;;49     
;;;50         if (u32Cmd == V6M_CMD_PROGRAM)
000070  2ea0              CMP      r6,#0xa0
000072  d171              BNE      |L1.344|
;;;51         {
;;;52             //CMD (4 bytes) + Packet Number (4 bytes) + Start Address (4 bytes) + Total Length (4 bytes) + Data (48 bytes)
;;;53             u32Checksum = 0; // fixed checksum issue.
000074  2000              MOVS     r0,#0
000076  49c9              LDR      r1,|L1.924|
000078  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;54     		u32TotalLen = 0;
00007a  49c9              LDR      r1,|L1.928|
00007c  6008              STR      r0,[r1,#0]  ; u32TotalLen
;;;55     		u32StartAddr = 0;
00007e  49c9              LDR      r1,|L1.932|
000080  6008              STR      r0,[r1,#0]  ; u32StartAddr
;;;56     
;;;57             u32StartAddr = (uint32_t)pu8Buffer[8] + (uint32_t)(pu8Buffer[9] << 8) + (uint32_t)(pu8Buffer[10] << 16) + (uint32_t)(pu8Buffer[11] << 24);
000082  7a28              LDRB     r0,[r5,#8]
000084  7a69              LDRB     r1,[r5,#9]
000086  0209              LSLS     r1,r1,#8
000088  1840              ADDS     r0,r0,r1
00008a  7aa9              LDRB     r1,[r5,#0xa]
00008c  0409              LSLS     r1,r1,#16
00008e  1840              ADDS     r0,r0,r1
000090  7ae9              LDRB     r1,[r5,#0xb]
000092  0609              LSLS     r1,r1,#24
000094  1840              ADDS     r0,r0,r1
000096  49c3              LDR      r1,|L1.932|
000098  6008              STR      r0,[r1,#0]  ; u32StartAddr
;;;58             u32TotalLen = (uint32_t)pu8Buffer[12] + (uint32_t)(pu8Buffer[13] << 8) + (uint32_t)(pu8Buffer[14] << 16) + (uint32_t)(pu8Buffer[15] << 24);
00009a  7b28              LDRB     r0,[r5,#0xc]
00009c  7b69              LDRB     r1,[r5,#0xd]
00009e  0209              LSLS     r1,r1,#8
0000a0  1840              ADDS     r0,r0,r1
0000a2  7ba9              LDRB     r1,[r5,#0xe]
0000a4  0409              LSLS     r1,r1,#16
0000a6  1840              ADDS     r0,r0,r1
0000a8  7be9              LDRB     r1,[r5,#0xf]
0000aa  0609              LSLS     r1,r1,#24
0000ac  1840              ADDS     r0,r0,r1
0000ae  49bc              LDR      r1,|L1.928|
0000b0  6008              STR      r0,[r1,#0]  ; u32TotalLen
;;;59     	   	//1. Checksum & Data
;;;60     		if (u32TotalLen > 48)
0000b2  4608              MOV      r0,r1
0000b4  6800              LDR      r0,[r0,#0]  ; u32TotalLen
0000b6  2830              CMP      r0,#0x30
0000b8  d912              BLS      |L1.224|
;;;61     		{
;;;62     	        for (i = 0;i < 48; i++)
0000ba  2400              MOVS     r4,#0
0000bc  e00d              B        |L1.218|
                  |L1.190|
;;;63     	        {
;;;64     	            u32Checksum += pu8Buffer[i+16];
0000be  4620              MOV      r0,r4
0000c0  3010              ADDS     r0,r0,#0x10
0000c2  5c28              LDRB     r0,[r5,r0]
0000c4  49b5              LDR      r1,|L1.924|
0000c6  6809              LDR      r1,[r1,#0]  ; u32Checksum
0000c8  1840              ADDS     r0,r0,r1
0000ca  49b4              LDR      r1,|L1.924|
0000cc  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;65     	            au8DataBuffer[i] = pu8Buffer[i+16];
0000ce  4620              MOV      r0,r4
0000d0  3010              ADDS     r0,r0,#0x10
0000d2  5c28              LDRB     r0,[r5,r0]
0000d4  49ae              LDR      r1,|L1.912|
0000d6  5508              STRB     r0,[r1,r4]
0000d8  1c64              ADDS     r4,r4,#1              ;62
                  |L1.218|
0000da  2c30              CMP      r4,#0x30              ;62
0000dc  d3ef              BCC      |L1.190|
0000de  e013              B        |L1.264|
                  |L1.224|
;;;66     	        }
;;;67     		}
;;;68     		else
;;;69     		{
;;;70     	        for (i = 0;i < u32TotalLen; i++)
0000e0  2400              MOVS     r4,#0
0000e2  e00d              B        |L1.256|
                  |L1.228|
;;;71     	        {
;;;72     	            u32Checksum += pu8Buffer[i+16];
0000e4  4620              MOV      r0,r4
0000e6  3010              ADDS     r0,r0,#0x10
0000e8  5c28              LDRB     r0,[r5,r0]
0000ea  49ac              LDR      r1,|L1.924|
0000ec  6809              LDR      r1,[r1,#0]  ; u32Checksum
0000ee  1840              ADDS     r0,r0,r1
0000f0  49aa              LDR      r1,|L1.924|
0000f2  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;73     	            au8DataBuffer[i] = pu8Buffer[i+16];
0000f4  4620              MOV      r0,r4
0000f6  3010              ADDS     r0,r0,#0x10
0000f8  5c28              LDRB     r0,[r5,r0]
0000fa  49a5              LDR      r1,|L1.912|
0000fc  5508              STRB     r0,[r1,r4]
0000fe  1c64              ADDS     r4,r4,#1              ;70
                  |L1.256|
000100  48a7              LDR      r0,|L1.928|
000102  6800              LDR      r0,[r0,#0]            ;70  ; u32TotalLen
000104  4284              CMP      r4,r0                 ;70
000106  d3ed              BCC      |L1.228|
                  |L1.264|
;;;74     	        }
;;;75     		}
;;;76     
;;;77             //2. Packet Number
;;;78             if (u32TotalLen > 48)
000108  48a5              LDR      r0,|L1.928|
00010a  6800              LDR      r0,[r0,#0]  ; u32TotalLen
00010c  2830              CMP      r0,#0x30
00010e  d91e              BLS      |L1.334|
;;;79             {
;;;80                 if (((u32TotalLen - 48) % 56) == 0)
000110  49a3              LDR      r1,|L1.928|
000112  6809              LDR      r1,[r1,#0]  ; u32TotalLen
000114  4608              MOV      r0,r1
000116  3830              SUBS     r0,r0,#0x30
000118  2138              MOVS     r1,#0x38
00011a  f7fffffe          BL       __aeabi_uidivmod
00011e  2900              CMP      r1,#0
000120  d10a              BNE      |L1.312|
;;;81                     LastPackNum = (u32TotalLen - 48) / 56 + 1;
000122  499f              LDR      r1,|L1.928|
000124  6809              LDR      r1,[r1,#0]  ; u32TotalLen
000126  4608              MOV      r0,r1
000128  3830              SUBS     r0,r0,#0x30
00012a  2138              MOVS     r1,#0x38
00012c  f7fffffe          BL       __aeabi_uidivmod
000130  1c40              ADDS     r0,r0,#1
000132  499d              LDR      r1,|L1.936|
000134  6008              STR      r0,[r1,#0]  ; LastPackNum
000136  e05d              B        |L1.500|
                  |L1.312|
;;;82                 else
;;;83                     LastPackNum = (u32TotalLen - 48) / 56 + 2;
000138  4999              LDR      r1,|L1.928|
00013a  6809              LDR      r1,[r1,#0]  ; u32TotalLen
00013c  4608              MOV      r0,r1
00013e  3830              SUBS     r0,r0,#0x30
000140  2138              MOVS     r1,#0x38
000142  f7fffffe          BL       __aeabi_uidivmod
000146  1c80              ADDS     r0,r0,#2
000148  4997              LDR      r1,|L1.936|
00014a  6008              STR      r0,[r1,#0]  ; LastPackNum
00014c  e052              B        |L1.500|
                  |L1.334|
;;;84             }
;;;85             else
;;;86                 LastPackNum = 1;
00014e  2001              MOVS     r0,#1
000150  4995              LDR      r1,|L1.936|
000152  6008              STR      r0,[r1,#0]  ; LastPackNum
000154  e04e              B        |L1.500|
000156  e7ff              B        |L1.344|
                  |L1.344|
;;;87         }
;;;88         else
;;;89         {
;;;90             //0x00000000 (4 bytes) + Packet Number (4 bytes) + Data (56 bytes)
;;;91     
;;;92     		//1. Checksum & Data
;;;93     		if (((u32TotalLen - 48) % 56) == 0)
000158  4991              LDR      r1,|L1.928|
00015a  6809              LDR      r1,[r1,#0]  ; u32TotalLen
00015c  4608              MOV      r0,r1
00015e  3830              SUBS     r0,r0,#0x30
000160  2138              MOVS     r1,#0x38
000162  f7fffffe          BL       __aeabi_uidivmod
000166  2900              CMP      r1,#0
000168  d112              BNE      |L1.400|
;;;94     		{
;;;95     	        for (i = 0;i < 56;i++)
00016a  2400              MOVS     r4,#0
00016c  e00d              B        |L1.394|
                  |L1.366|
;;;96     	        {
;;;97     	            u32Checksum += pu8Buffer[i+8];
00016e  4620              MOV      r0,r4
000170  3008              ADDS     r0,r0,#8
000172  5c28              LDRB     r0,[r5,r0]
000174  4989              LDR      r1,|L1.924|
000176  6809              LDR      r1,[r1,#0]  ; u32Checksum
000178  1840              ADDS     r0,r0,r1
00017a  4988              LDR      r1,|L1.924|
00017c  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;98     	            au8DataBuffer[i] = pu8Buffer[i+8];
00017e  4620              MOV      r0,r4
000180  3008              ADDS     r0,r0,#8
000182  5c28              LDRB     r0,[r5,r0]
000184  4982              LDR      r1,|L1.912|
000186  5508              STRB     r0,[r1,r4]
000188  1c64              ADDS     r4,r4,#1              ;95
                  |L1.394|
00018a  2c38              CMP      r4,#0x38              ;95
00018c  d3ef              BCC      |L1.366|
00018e  e031              B        |L1.500|
                  |L1.400|
;;;99     	        }
;;;100    		}
;;;101    		else
;;;102    		{
;;;103    			if (u32PackNum != LastPackNum) // Finish
000190  487d              LDR      r0,|L1.904|
000192  6800              LDR      r0,[r0,#0]  ; u32PackNum
000194  4984              LDR      r1,|L1.936|
000196  6809              LDR      r1,[r1,#0]  ; LastPackNum
000198  4288              CMP      r0,r1
00019a  d012              BEQ      |L1.450|
;;;104    			{
;;;105    		        for (i = 0;i < 56;i++)
00019c  2400              MOVS     r4,#0
00019e  e00d              B        |L1.444|
                  |L1.416|
;;;106    		        {
;;;107    		            u32Checksum += pu8Buffer[i+8];
0001a0  4620              MOV      r0,r4
0001a2  3008              ADDS     r0,r0,#8
0001a4  5c28              LDRB     r0,[r5,r0]
0001a6  497d              LDR      r1,|L1.924|
0001a8  6809              LDR      r1,[r1,#0]  ; u32Checksum
0001aa  1840              ADDS     r0,r0,r1
0001ac  497b              LDR      r1,|L1.924|
0001ae  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;108    		            au8DataBuffer[i] = pu8Buffer[i+8];
0001b0  4620              MOV      r0,r4
0001b2  3008              ADDS     r0,r0,#8
0001b4  5c28              LDRB     r0,[r5,r0]
0001b6  4976              LDR      r1,|L1.912|
0001b8  5508              STRB     r0,[r1,r4]
0001ba  1c64              ADDS     r4,r4,#1              ;105
                  |L1.444|
0001bc  2c38              CMP      r4,#0x38              ;105
0001be  d3ef              BCC      |L1.416|
0001c0  e018              B        |L1.500|
                  |L1.450|
;;;109    				}
;;;110    			}
;;;111    			else
;;;112    			{
;;;113    		        for (i = 0;i < ((u32TotalLen - 48) % 56);i++)
0001c2  2400              MOVS     r4,#0
0001c4  e00d              B        |L1.482|
                  |L1.454|
;;;114    		        {
;;;115    		            u32Checksum += pu8Buffer[i+8];
0001c6  4620              MOV      r0,r4
0001c8  3008              ADDS     r0,r0,#8
0001ca  5c28              LDRB     r0,[r5,r0]
0001cc  4973              LDR      r1,|L1.924|
0001ce  6809              LDR      r1,[r1,#0]  ; u32Checksum
0001d0  1840              ADDS     r0,r0,r1
0001d2  4972              LDR      r1,|L1.924|
0001d4  6008              STR      r0,[r1,#0]  ; u32Checksum
;;;116    		            au8DataBuffer[i] = pu8Buffer[i+8];
0001d6  4620              MOV      r0,r4
0001d8  3008              ADDS     r0,r0,#8
0001da  5c28              LDRB     r0,[r5,r0]
0001dc  496c              LDR      r1,|L1.912|
0001de  5508              STRB     r0,[r1,r4]
0001e0  1c64              ADDS     r4,r4,#1              ;113
                  |L1.482|
0001e2  496f              LDR      r1,|L1.928|
0001e4  6809              LDR      r1,[r1,#0]            ;113  ; u32TotalLen
0001e6  4608              MOV      r0,r1                 ;113
0001e8  3830              SUBS     r0,r0,#0x30           ;113
0001ea  2138              MOVS     r1,#0x38              ;113
0001ec  f7fffffe          BL       __aeabi_uidivmod
0001f0  42a1              CMP      r1,r4                 ;113
0001f2  d8e8              BHI      |L1.454|
                  |L1.500|
;;;117    				}
;;;118    			}
;;;119    		}
;;;120        }
;;;121    
;;;122        if (u32PackNum == LastPackNum) // Finish
0001f4  4864              LDR      r0,|L1.904|
0001f6  6800              LDR      r0,[r0,#0]  ; u32PackNum
0001f8  496b              LDR      r1,|L1.936|
0001fa  6809              LDR      r1,[r1,#0]  ; LastPackNum
0001fc  4288              CMP      r0,r1
0001fe  d122              BNE      |L1.582|
;;;123        {
;;;124    		// Checksum	(4 bytes) + Packet Number (4 bytes)
;;;125            au8RetBuffer[0] = (uint8_t)(u32Checksum);
000200  4866              LDR      r0,|L1.924|
000202  6800              LDR      r0,[r0,#0]  ; u32Checksum
000204  4961              LDR      r1,|L1.908|
000206  7008              STRB     r0,[r1,#0]
;;;126            au8RetBuffer[1] = (uint8_t)(u32Checksum >> 8);
000208  4864              LDR      r0,|L1.924|
00020a  6800              LDR      r0,[r0,#0]  ; u32Checksum
00020c  0400              LSLS     r0,r0,#16
00020e  0e00              LSRS     r0,r0,#24
000210  7048              STRB     r0,[r1,#1]
;;;127            au8RetBuffer[2] = (uint8_t)(u32Checksum >> 16);
000212  4862              LDR      r0,|L1.924|
000214  6800              LDR      r0,[r0,#0]  ; u32Checksum
000216  0200              LSLS     r0,r0,#8
000218  0e00              LSRS     r0,r0,#24
00021a  7088              STRB     r0,[r1,#2]
;;;128            au8RetBuffer[3] = (uint8_t)(u32Checksum >> 24);
00021c  485f              LDR      r0,|L1.924|
00021e  6800              LDR      r0,[r0,#0]  ; u32Checksum
000220  0e00              LSRS     r0,r0,#24
000222  70c8              STRB     r0,[r1,#3]
;;;129    
;;;130            au8RetBuffer[4] = (uint8_t)(u32PackNum);
000224  4858              LDR      r0,|L1.904|
000226  6800              LDR      r0,[r0,#0]  ; u32PackNum
000228  7108              STRB     r0,[r1,#4]
;;;131            au8RetBuffer[5] = (uint8_t)(u32PackNum >> 8);
00022a  4857              LDR      r0,|L1.904|
00022c  6800              LDR      r0,[r0,#0]  ; u32PackNum
00022e  0400              LSLS     r0,r0,#16
000230  0e00              LSRS     r0,r0,#24
000232  7148              STRB     r0,[r1,#5]
;;;132            au8RetBuffer[6] = (uint8_t)(u32PackNum >> 16);
000234  4854              LDR      r0,|L1.904|
000236  6800              LDR      r0,[r0,#0]  ; u32PackNum
000238  0200              LSLS     r0,r0,#8
00023a  0e00              LSRS     r0,r0,#24
00023c  7188              STRB     r0,[r1,#6]
;;;133            au8RetBuffer[7] = (uint8_t)(u32PackNum >> 24);
00023e  4852              LDR      r0,|L1.904|
000240  6800              LDR      r0,[r0,#0]  ; u32PackNum
000242  0e00              LSRS     r0,r0,#24
000244  71c8              STRB     r0,[r1,#7]
                  |L1.582|
;;;134        }
;;;135    
;;;136    	/*================== SPI FLASH =======================*/
;;;137    	if (u32Cmd == V6M_CMD_PROGRAM)
000246  2ea0              CMP      r6,#0xa0
000248  d143              BNE      |L1.722|
;;;138    	{
;;;139    		if (u32TotalLen > 48)
00024a  4855              LDR      r0,|L1.928|
00024c  6800              LDR      r0,[r0,#0]  ; u32TotalLen
00024e  2830              CMP      r0,#0x30
000250  d91f              BLS      |L1.658|
;;;140    		{    
;;;141    			for (i = 0; i < 48; i++)
000252  2400              MOVS     r4,#0
000254  e004              B        |L1.608|
                  |L1.598|
;;;142    				au8SPIWriteDataBuffer[i] = au8DataBuffer[i];
000256  484e              LDR      r0,|L1.912|
000258  5d00              LDRB     r0,[r0,r4]
00025a  494e              LDR      r1,|L1.916|
00025c  5508              STRB     r0,[r1,r4]
00025e  1c64              ADDS     r4,r4,#1              ;141
                  |L1.608|
000260  2c30              CMP      r4,#0x30              ;141
000262  d3f8              BCC      |L1.598|
;;;143    
;;;144                SpiFlash_PageProgram(au8SPIWriteDataBuffer, u32StartAddr, 256);
000264  22ff              MOVS     r2,#0xff
000266  3201              ADDS     r2,#1
000268  484e              LDR      r0,|L1.932|
00026a  6801              LDR      r1,[r0,#0]  ; u32StartAddr
00026c  4849              LDR      r0,|L1.916|
00026e  f7fffffe          BL       SpiFlash_PageProgram
;;;145                SpiFlash_WaitReady();
000272  f7fffffe          BL       SpiFlash_WaitReady
;;;146                SpiFlash_ReadData(au8SPIReadDataBuffer, u32StartAddr, 256);
000276  22ff              MOVS     r2,#0xff
000278  3201              ADDS     r2,#1
00027a  484a              LDR      r0,|L1.932|
00027c  6801              LDR      r1,[r0,#0]  ; u32StartAddr
00027e  4846              LDR      r0,|L1.920|
000280  f7fffffe          BL       SpiFlash_ReadData
;;;147    #ifdef DEBUG            
;;;148    			for (i = 0; i < 48; i++)
;;;149                {
;;;150                    if (au8SPIReadDataBuffer[i] != au8DataBuffer[i])
;;;151                    {
;;;152    
;;;153                        printf("Verify Error!\n");
;;;154                        while (1);
;;;155                    }
;;;156                    printf("u32PackNum %2x au8SPIDataBuffer %2x \n", u32PackNum, au8SPIReadDataBuffer[i]);
;;;157                }
;;;158    #endif
;;;159                u32StartAddr += 256;
000284  4847              LDR      r0,|L1.932|
000286  6800              LDR      r0,[r0,#0]  ; u32StartAddr
000288  30ff              ADDS     r0,r0,#0xff
00028a  3001              ADDS     r0,#1
00028c  4945              LDR      r1,|L1.932|
00028e  6008              STR      r0,[r1,#0]  ; u32StartAddr
000290  e06b              B        |L1.874|
                  |L1.658|
;;;160    		}
;;;161    		else //Finish
;;;162    		{
;;;163    			for (i = 0; i < 48; i++)
000292  2400              MOVS     r4,#0
000294  e004              B        |L1.672|
                  |L1.662|
;;;164    				au8SPIWriteDataBuffer[i] = au8DataBuffer[i];
000296  483e              LDR      r0,|L1.912|
000298  5d00              LDRB     r0,[r0,r4]
00029a  493e              LDR      r1,|L1.916|
00029c  5508              STRB     r0,[r1,r4]
00029e  1c64              ADDS     r4,r4,#1              ;163
                  |L1.672|
0002a0  2c30              CMP      r4,#0x30              ;163
0002a2  d3f8              BCC      |L1.662|
;;;165    
;;;166                SpiFlash_PageProgram(au8SPIWriteDataBuffer, u32StartAddr, 256);
0002a4  22ff              MOVS     r2,#0xff
0002a6  3201              ADDS     r2,#1
0002a8  483e              LDR      r0,|L1.932|
0002aa  6801              LDR      r1,[r0,#0]  ; u32StartAddr
0002ac  4839              LDR      r0,|L1.916|
0002ae  f7fffffe          BL       SpiFlash_PageProgram
;;;167                SpiFlash_WaitReady();
0002b2  f7fffffe          BL       SpiFlash_WaitReady
;;;168                SpiFlash_ReadData(au8SPIReadDataBuffer, u32StartAddr, 256);
0002b6  22ff              MOVS     r2,#0xff
0002b8  3201              ADDS     r2,#1
0002ba  483a              LDR      r0,|L1.932|
0002bc  6801              LDR      r1,[r0,#0]  ; u32StartAddr
0002be  4836              LDR      r0,|L1.920|
0002c0  f7fffffe          BL       SpiFlash_ReadData
;;;169    #ifdef DEBUG            
;;;170    			for (i = 0; i < (u32TotalLen % 48); i++)
;;;171                {
;;;172                    if (au8SPIReadDataBuffer[i] != au8DataBuffer[i])
;;;173                    {
;;;174    
;;;175                        printf("Verify Error!\n");
;;;176                        while (1);
;;;177                    }
;;;178                    printf("u32PackNum %2x au8SPIDataBuffer %2x \n", u32PackNum, au8SPIReadDataBuffer[i]);
;;;179                }
;;;180    #endif
;;;181                u32StartAddr += 256;
0002c4  4837              LDR      r0,|L1.932|
0002c6  6800              LDR      r0,[r0,#0]  ; u32StartAddr
0002c8  30ff              ADDS     r0,r0,#0xff
0002ca  3001              ADDS     r0,#1
0002cc  4935              LDR      r1,|L1.932|
0002ce  6008              STR      r0,[r1,#0]  ; u32StartAddr
0002d0  e04b              B        |L1.874|
                  |L1.722|
;;;182    		}
;;;183    	}
;;;184    	else
;;;185    	{
;;;186    		if (u32PackNum != LastPackNum)
0002d2  482d              LDR      r0,|L1.904|
0002d4  6800              LDR      r0,[r0,#0]  ; u32PackNum
0002d6  4934              LDR      r1,|L1.936|
0002d8  6809              LDR      r1,[r1,#0]  ; LastPackNum
0002da  4288              CMP      r0,r1
0002dc  d01f              BEQ      |L1.798|
;;;187    		{
;;;188    			for (i = 0; i < 56; i++)
0002de  2400              MOVS     r4,#0
0002e0  e004              B        |L1.748|
                  |L1.738|
;;;189    				au8SPIWriteDataBuffer[i] = au8DataBuffer[i];
0002e2  482b              LDR      r0,|L1.912|
0002e4  5d00              LDRB     r0,[r0,r4]
0002e6  492b              LDR      r1,|L1.916|
0002e8  5508              STRB     r0,[r1,r4]
0002ea  1c64              ADDS     r4,r4,#1              ;188
                  |L1.748|
0002ec  2c38              CMP      r4,#0x38              ;188
0002ee  d3f8              BCC      |L1.738|
;;;190    
;;;191                SpiFlash_PageProgram(au8SPIWriteDataBuffer, u32StartAddr, 256);
0002f0  22ff              MOVS     r2,#0xff
0002f2  3201              ADDS     r2,#1
0002f4  482b              LDR      r0,|L1.932|
0002f6  6801              LDR      r1,[r0,#0]  ; u32StartAddr
0002f8  4826              LDR      r0,|L1.916|
0002fa  f7fffffe          BL       SpiFlash_PageProgram
;;;192                SpiFlash_WaitReady();
0002fe  f7fffffe          BL       SpiFlash_WaitReady
;;;193                SpiFlash_ReadData(au8SPIReadDataBuffer, u32StartAddr, 256);
000302  22ff              MOVS     r2,#0xff
000304  3201              ADDS     r2,#1
000306  4827              LDR      r0,|L1.932|
000308  6801              LDR      r1,[r0,#0]  ; u32StartAddr
00030a  4823              LDR      r0,|L1.920|
00030c  f7fffffe          BL       SpiFlash_ReadData
;;;194    #ifdef DEBUG            
;;;195    			for (i = 0; i < 56; i++)
;;;196                {
;;;197                    if (au8SPIReadDataBuffer[i] != au8DataBuffer[i])
;;;198                    {
;;;199                        printf("Verify Error!\n");
;;;200                        while (1);
;;;201                    }
;;;202                    printf("u32PackNum %2x au8SPIDataBuffer %2x \n", u32PackNum, au8SPIReadDataBuffer[i]);
;;;203                }
;;;204    #endif
;;;205                u32StartAddr += 256;
000310  4824              LDR      r0,|L1.932|
000312  6800              LDR      r0,[r0,#0]  ; u32StartAddr
000314  30ff              ADDS     r0,r0,#0xff
000316  3001              ADDS     r0,#1
000318  4922              LDR      r1,|L1.932|
00031a  6008              STR      r0,[r1,#0]  ; u32StartAddr
00031c  e025              B        |L1.874|
                  |L1.798|
;;;206    		}
;;;207    		else
;;;208    		{
;;;209    			for (i = 0; i < ((u32TotalLen - 48) % 56); i++)
00031e  2400              MOVS     r4,#0
000320  e004              B        |L1.812|
                  |L1.802|
;;;210    				au8SPIWriteDataBuffer[i] = au8DataBuffer[i];
000322  481b              LDR      r0,|L1.912|
000324  5d00              LDRB     r0,[r0,r4]
000326  491b              LDR      r1,|L1.916|
000328  5508              STRB     r0,[r1,r4]
00032a  1c64              ADDS     r4,r4,#1              ;209
                  |L1.812|
00032c  491c              LDR      r1,|L1.928|
00032e  6809              LDR      r1,[r1,#0]            ;209  ; u32TotalLen
000330  4608              MOV      r0,r1                 ;209
000332  3830              SUBS     r0,r0,#0x30           ;209
000334  2138              MOVS     r1,#0x38              ;209
000336  f7fffffe          BL       __aeabi_uidivmod
00033a  42a1              CMP      r1,r4                 ;209
00033c  d8f1              BHI      |L1.802|
;;;211    
;;;212                SpiFlash_PageProgram(au8SPIWriteDataBuffer, u32StartAddr, 256);
00033e  22ff              MOVS     r2,#0xff
000340  3201              ADDS     r2,#1
000342  4818              LDR      r0,|L1.932|
000344  6801              LDR      r1,[r0,#0]  ; u32StartAddr
000346  4813              LDR      r0,|L1.916|
000348  f7fffffe          BL       SpiFlash_PageProgram
;;;213                SpiFlash_WaitReady();
00034c  f7fffffe          BL       SpiFlash_WaitReady
;;;214                SpiFlash_ReadData(au8SPIReadDataBuffer, u32StartAddr, 256);
000350  22ff              MOVS     r2,#0xff
000352  3201              ADDS     r2,#1
000354  4813              LDR      r0,|L1.932|
000356  6801              LDR      r1,[r0,#0]  ; u32StartAddr
000358  480f              LDR      r0,|L1.920|
00035a  f7fffffe          BL       SpiFlash_ReadData
;;;215    #ifdef DEBUG            
;;;216    			for (i = 0; i < ((u32TotalLen - 48) % 56);i++)
;;;217                {
;;;218                    if (au8SPIReadDataBuffer[i] != au8DataBuffer[i])
;;;219                    {
;;;220                        printf("Verify Error!\n");
;;;221                        while (1);
;;;222                    }
;;;223                    printf("u32PackNum %2x au8SPIDataBuffer %2x \n", u32PackNum, au8SPIReadDataBuffer[i]);
;;;224                }
;;;225    #endif
;;;226                u32StartAddr += 256;
00035e  4811              LDR      r0,|L1.932|
000360  6800              LDR      r0,[r0,#0]  ; u32StartAddr
000362  30ff              ADDS     r0,r0,#0xff
000364  3001              ADDS     r0,#1
000366  490f              LDR      r1,|L1.932|
000368  6008              STR      r0,[r1,#0]  ; u32StartAddr
                  |L1.874|
;;;227    		}
;;;228    
;;;229    	}
;;;230    
;;;231        VCMD_AckCommand((const uint8_t *)&au8RetBuffer, 64);
00036a  2140              MOVS     r1,#0x40
00036c  4807              LDR      r0,|L1.908|
00036e  f7fffffe          BL       VCMD_AckCommand
;;;232    	_DRVUSB_ENABLE_USB_INT();
000372  4804              LDR      r0,|L1.900|
000374  6800              LDR      r0,[r0,#0]
000376  2102              MOVS     r1,#2
000378  4388              BICS     r0,r0,r1
00037a  1c80              ADDS     r0,r0,#2
00037c  4901              LDR      r1,|L1.900|
00037e  6008              STR      r0,[r1,#0]
;;;233    }
000380  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

000382  0000              DCW      0x0000
                  |L1.900|
                          DCD      0x40060000
                  |L1.904|
                          DCD      u32PackNum
                  |L1.908|
                          DCD      au8RetBuffer
                  |L1.912|
                          DCD      au8DataBuffer
                  |L1.916|
                          DCD      au8SPIWriteDataBuffer
                  |L1.920|
                          DCD      au8SPIReadDataBuffer
                  |L1.924|
                          DCD      u32Checksum
                  |L1.928|
                          DCD      u32TotalLen
                  |L1.932|
                          DCD      u32StartAddr
                  |L1.936|
                          DCD      LastPackNum

                          AREA ||i.VCMD_AckCommand||, CODE, READONLY, ALIGN=1

                  VCMD_AckCommand PROC
;;;18     
;;;19     static void VCMD_AckCommand(const uint8_t *pu8Buffer, uint32_t u32Len)
000000  b570              PUSH     {r4-r6,lr}
;;;20     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;21         USB_SendBackData(pu8Buffer, u32Len);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USB_SendBackData
;;;22     }
00000e  bd70              POP      {r4-r6,pc}
;;;23     
                          ENDP


                          AREA ||i._HID_CLR_CTRL_READY||, CODE, READONLY, ALIGN=2

                  _HID_CLR_CTRL_READY PROC
;;;94     
;;;95         static void _HID_CLR_CTRL_READY()
000000  4806              LDR      r0,|L3.28|
;;;96         {
;;;97             _DRVUSB_CLEAR_EP_READY(0);
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2101              MOVS     r1,#1
000006  4308              ORRS     r0,r0,r1
000008  4904              LDR      r1,|L3.28|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;98             _DRVUSB_CLEAR_EP_READY(1);
00000c  4608              MOV      r0,r1
00000e  6bc0              LDR      r0,[r0,#0x3c]
000010  2101              MOVS     r1,#1
000012  4308              ORRS     r0,r0,r1
000014  4901              LDR      r1,|L3.28|
000016  63c8              STR      r0,[r1,#0x3c]
;;;99         }
000018  4770              BX       lr
;;;100    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40060000

                          AREA ||i._HID_CLR_CTRL_READY_AND_TRIG_STALL||, CODE, READONLY, ALIGN=2

                  _HID_CLR_CTRL_READY_AND_TRIG_STALL PROC
;;;88     
;;;89         static void _HID_CLR_CTRL_READY_AND_TRIG_STALL()
000000  4806              LDR      r0,|L4.28|
;;;90         {
;;;91             _DRVUSB_CLEAR_EP_READY_AND_TRIG_STALL(0);
000002  6ac0              LDR      r0,[r0,#0x2c]
000004  2103              MOVS     r1,#3
000006  4308              ORRS     r0,r0,r1
000008  4904              LDR      r1,|L4.28|
00000a  62c8              STR      r0,[r1,#0x2c]
;;;92             _DRVUSB_CLEAR_EP_READY_AND_TRIG_STALL(1);
00000c  4608              MOV      r0,r1
00000e  6bc0              LDR      r0,[r0,#0x3c]
000010  2103              MOVS     r1,#3
000012  4308              ORRS     r0,r0,r1
000014  4901              LDR      r1,|L4.28|
000016  63c8              STR      r0,[r1,#0x3c]
;;;93         }
000018  4770              BX       lr
;;;94     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40060000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  au8RetBuffer
                          %        64
                  au8DataBuffer
                          %        56
                  au8SPIWriteDataBuffer
                          %        256
                  au8SPIReadDataBuffer
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  u32Checksum
                          DCD      0x00000000
                  u32PackNum
                          DCD      0x00000000
                  u32StartAddr
                          DCD      0x00000000
                  u32TotalLen
                          DCD      0x00000000
                  LastPackNum
                          DCD      0x00000000
