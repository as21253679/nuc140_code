; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\spi_flash.o --depend=.\obj\spi_flash.d --feedback=.\obj\Smpl_HID_FILE_IO.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -I..\..\..\Include\NUC1xx-LB_002 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\obj\spi_flash.crf SPI_FLASH.c]
                          THUMB

                          AREA ||i.DelayCount||, CODE, READONLY, ALIGN=1

                  DelayCount PROC
;;;23     
;;;24     void DelayCount(uint32_t delayCnt)
000000  e001              B        |L1.6|
                  |L1.2|
;;;25     {
;;;26         while (delayCnt--)
;;;27         {
;;;28             __NOP();
000002  bf00              NOP      
;;;29             __NOP();
000004  bf00              NOP      
                  |L1.6|
000006  4601              MOV      r1,r0                 ;26
000008  1e40              SUBS     r0,r0,#1              ;26
00000a  2900              CMP      r1,#0                 ;26
00000c  d1f9              BNE      |L1.2|
;;;30         }
;;;31     }
00000e  4770              BX       lr
;;;32     
                          ENDP


                          AREA ||i.SpiFlash_ChipErase||, CODE, READONLY, ALIGN=1

                  SpiFlash_ChipErase PROC
;;;86     // **************************************
;;;87     void SpiFlash_ChipErase(void)
000000  b508              PUSH     {r3,lr}
;;;88     {
;;;89     
;;;90         uint32_t au32SourceData;
;;;91     
;;;92         // configure transaction length as 8 bits
;;;93         DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
000002  2108              MOVS     r1,#8
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       DrvSPI_SetBitLength
;;;94     
;;;95         // /CS: active
;;;96         DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       DrvSPI_SetSS
;;;97     
;;;98         // send Command: 0x06, Write enable
;;;99         au32SourceData = 0x06;
000012  2006              MOVS     r0,#6
000014  9000              STR      r0,[sp,#0]
;;;100        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000016  4669              MOV      r1,sp
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       DrvSPI_SingleWrite
;;;101    
;;;102        // wait
;;;103        while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
00001e  bf00              NOP      
                  |L2.32|
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       DrvSPI_IsBusy
000026  2800              CMP      r0,#0
000028  d1fa              BNE      |L2.32|
;;;104    
;;;105        // /CS: de-active
;;;106        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00002a  2101              MOVS     r1,#1
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       DrvSPI_ClrSS
;;;107    
;;;108        // /CS: active
;;;109        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000032  2101              MOVS     r1,#1
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       DrvSPI_SetSS
;;;110    
;;;111        // send Command: 0xC7, Chip Erase
;;;112        au32SourceData = 0xc7;
00003a  20c7              MOVS     r0,#0xc7
00003c  9000              STR      r0,[sp,#0]
;;;113        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
00003e  4669              MOV      r1,sp
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       DrvSPI_SingleWrite
;;;114    
;;;115        // wait
;;;116        while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
000046  bf00              NOP      
                  |L2.72|
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       DrvSPI_IsBusy
00004e  2800              CMP      r0,#0
000050  d1fa              BNE      |L2.72|
;;;117    
;;;118        // /CS: de-active
;;;119        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000052  2101              MOVS     r1,#1
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       DrvSPI_ClrSS
;;;120    }
00005a  bd08              POP      {r3,pc}
;;;121    
                          ENDP


                          AREA ||i.SpiFlash_PageProgram||, CODE, READONLY, ALIGN=1

                  SpiFlash_PageProgram PROC
;;;192    // **************************************
;;;193    void SpiFlash_PageProgram(uint8_t *DataBuffer, uint32_t StartAddress, uint32_t ByteCount)
000000  b5f8              PUSH     {r3-r7,lr}
;;;194    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;195        uint32_t au32SourceData;
;;;196        uint32_t Counter;
;;;197    
;;;198        // configure transaction length as 8 bits
;;;199        DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
000008  2108              MOVS     r1,#8
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       DrvSPI_SetBitLength
;;;200    
;;;201        // /CS: active
;;;202        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000010  2101              MOVS     r1,#1
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       DrvSPI_SetSS
;;;203    
;;;204        // send Command: 0x06, Write enable
;;;205        au32SourceData = 0x06;
000018  2006              MOVS     r0,#6
00001a  9000              STR      r0,[sp,#0]
;;;206        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
00001c  4669              MOV      r1,sp
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       DrvSPI_SingleWrite
;;;207    
;;;208        // wait
;;;209        while (DrvSPI_IsBusy(eDRVSPI_PORT2));
000024  bf00              NOP      
                  |L3.38|
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       DrvSPI_IsBusy
00002c  2800              CMP      r0,#0
00002e  d1fa              BNE      |L3.38|
;;;210    
;;;211        // /CS: de-active
;;;212        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000030  2101              MOVS     r1,#1
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       DrvSPI_ClrSS
;;;213    
;;;214        // /CS: active
;;;215        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000038  2101              MOVS     r1,#1
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       DrvSPI_SetSS
;;;216    
;;;217        // send Command: 0x02, Page program
;;;218        au32SourceData = 0x02;
000040  2002              MOVS     r0,#2
000042  9000              STR      r0,[sp,#0]
;;;219        DrvSPI_SingleWrite(eDRVSPI_PORT2    , &au32SourceData);
000044  4669              MOV      r1,sp
000046  f7fffffe          BL       DrvSPI_SingleWrite
;;;220    
;;;221        // wait
;;;222        while (DrvSPI_IsBusy(eDRVSPI_PORT2));
00004a  bf00              NOP      
                  |L3.76|
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       DrvSPI_IsBusy
000052  2800              CMP      r0,#0
000054  d1fa              BNE      |L3.76|
;;;223    
;;;224        // configure transaction length as 24 bits
;;;225        DrvSPI_SetBitLength(eDRVSPI_PORT2, 24);
000056  2118              MOVS     r1,#0x18
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       DrvSPI_SetBitLength
;;;226    
;;;227        // send 24-bit start address
;;;228        au32SourceData = StartAddress;
00005e  9600              STR      r6,[sp,#0]
;;;229        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000060  4669              MOV      r1,sp
000062  2002              MOVS     r0,#2
000064  f7fffffe          BL       DrvSPI_SingleWrite
;;;230    
;;;231        // wait
;;;232        while (DrvSPI_IsBusy(eDRVSPI_PORT2));
000068  bf00              NOP      
                  |L3.106|
00006a  2002              MOVS     r0,#2
00006c  f7fffffe          BL       DrvSPI_IsBusy
000070  2800              CMP      r0,#0
000072  d1fa              BNE      |L3.106|
;;;233    
;;;234        // configure transaction length as 8 bits
;;;235        DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
000074  2108              MOVS     r1,#8
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       DrvSPI_SetBitLength
;;;236    
;;;237        for (Counter = 0; Counter < ByteCount; Counter++)
00007c  2400              MOVS     r4,#0
00007e  e00c              B        |L3.154|
                  |L3.128|
;;;238        {
;;;239            // send data to program
;;;240            au32SourceData = DataBuffer[Counter];
000080  5d28              LDRB     r0,[r5,r4]
000082  9000              STR      r0,[sp,#0]
;;;241            DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000084  4669              MOV      r1,sp
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       DrvSPI_SingleWrite
;;;242    
;;;243            // wait
;;;244            while (DrvSPI_IsBusy(eDRVSPI_PORT2));
00008c  bf00              NOP      
                  |L3.142|
00008e  2002              MOVS     r0,#2
000090  f7fffffe          BL       DrvSPI_IsBusy
000094  2800              CMP      r0,#0
000096  d1fa              BNE      |L3.142|
000098  1c64              ADDS     r4,r4,#1              ;237
                  |L3.154|
00009a  42bc              CMP      r4,r7                 ;237
00009c  d3f0              BCC      |L3.128|
;;;245        }
;;;246    
;;;247        // /CS: de-active
;;;248        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00009e  2101              MOVS     r1,#1
0000a0  2002              MOVS     r0,#2
0000a2  f7fffffe          BL       DrvSPI_ClrSS
;;;249    }
0000a6  bdf8              POP      {r3-r7,pc}
;;;250    // **************************************
                          ENDP


                          AREA ||i.SpiFlash_ReadData||, CODE, READONLY, ALIGN=1

                  SpiFlash_ReadData PROC
;;;250    // **************************************
;;;251    void SpiFlash_ReadData(uint8_t *DataBuffer0, uint32_t StartAddress, uint32_t ByteCount)
000000  b5fe              PUSH     {r1-r7,lr}
;;;252    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;253        uint32_t au32SourceData;
;;;254        uint32_t au32DestinationData;
;;;255        uint32_t Counter;
;;;256    
;;;257        // configure transaction length as 8 bits
;;;258        DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
000008  2108              MOVS     r1,#8
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       DrvSPI_SetBitLength
;;;259    
;;;260        // /CS: active
;;;261        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000010  2101              MOVS     r1,#1
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       DrvSPI_SetSS
;;;262    
;;;263        // send Command: 0x03, Read data
;;;264        au32SourceData = 0x03;
000018  2003              MOVS     r0,#3
00001a  9001              STR      r0,[sp,#4]
;;;265        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
00001c  a901              ADD      r1,sp,#4
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       DrvSPI_SingleWrite
;;;266    
;;;267        // wait
;;;268        while (DrvSPI_IsBusy(eDRVSPI_PORT2));
000024  bf00              NOP      
                  |L4.38|
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       DrvSPI_IsBusy
00002c  2800              CMP      r0,#0
00002e  d1fa              BNE      |L4.38|
;;;269    
;;;270        // configure transaction length as 24 bits
;;;271        DrvSPI_SetBitLength(eDRVSPI_PORT2, 24);
000030  2118              MOVS     r1,#0x18
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       DrvSPI_SetBitLength
;;;272    
;;;273        // send 24-bit start address
;;;274        au32SourceData = StartAddress;
000038  9601              STR      r6,[sp,#4]
;;;275        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
00003a  a901              ADD      r1,sp,#4
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       DrvSPI_SingleWrite
;;;276    
;;;277        // wait
;;;278        while (DrvSPI_IsBusy(eDRVSPI_PORT2));
000042  bf00              NOP      
                  |L4.68|
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       DrvSPI_IsBusy
00004a  2800              CMP      r0,#0
00004c  d1fa              BNE      |L4.68|
;;;279    
;;;280        // configure transaction length as 8 bits
;;;281        DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
00004e  2108              MOVS     r1,#8
000050  2002              MOVS     r0,#2
000052  f7fffffe          BL       DrvSPI_SetBitLength
;;;282    
;;;283        for (Counter = 0; Counter < ByteCount; Counter++)
000056  2400              MOVS     r4,#0
000058  e013              B        |L4.130|
                  |L4.90|
;;;284        {
;;;285            // receive
;;;286            au32SourceData = 0x0;
00005a  2000              MOVS     r0,#0
00005c  9001              STR      r0,[sp,#4]
;;;287            DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
00005e  a901              ADD      r1,sp,#4
000060  2002              MOVS     r0,#2
000062  f7fffffe          BL       DrvSPI_SingleWrite
;;;288    
;;;289            // wait
;;;290            while (DrvSPI_IsBusy(eDRVSPI_PORT2));
000066  bf00              NOP      
                  |L4.104|
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       DrvSPI_IsBusy
00006e  2800              CMP      r0,#0
000070  d1fa              BNE      |L4.104|
;;;291    
;;;292            // dump Rx register
;;;293            DrvSPI_DumpRxRegister(eDRVSPI_PORT2, &au32DestinationData, 1);
000072  2201              MOVS     r2,#1
000074  4669              MOV      r1,sp
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;294            DataBuffer0[Counter] = (uint8_t) au32DestinationData;
00007c  9800              LDR      r0,[sp,#0]
00007e  5528              STRB     r0,[r5,r4]
000080  1c64              ADDS     r4,r4,#1              ;283
                  |L4.130|
000082  42bc              CMP      r4,r7                 ;283
000084  d3e9              BCC      |L4.90|
;;;295        }
;;;296    
;;;297        // /CS: de-active
;;;298        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
000086  2101              MOVS     r1,#1
000088  2002              MOVS     r0,#2
00008a  f7fffffe          BL       DrvSPI_ClrSS
;;;299    }
00008e  bdfe              POP      {r1-r7,pc}
                          ENDP


                          AREA ||i.SpiFlash_ReadMidDid||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadMidDid PROC
;;;35     // For W26X16, Manufacturer ID: 0xEF; Device ID: 0x14
;;;36     void SpiFlash_ReadMidDid(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;37     {
;;;38         uint32_t au32SourceData;
;;;39         uint32_t au32DestinationData;
;;;40     
;;;41         // configure transaction length as 8 bits
;;;42         DrvSPI_SetBitLength(eDRVSPI_PORT2, 8);
000002  2108              MOVS     r1,#8
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       DrvSPI_SetBitLength
;;;43     
;;;44         // /CS: active
;;;45         DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       DrvSPI_SetSS
;;;46     
;;;47         // send Command: 0x90, Read Manufacturer/Device ID
;;;48         au32SourceData = 0x90;
000012  2090              MOVS     r0,#0x90
000014  9001              STR      r0,[sp,#4]
;;;49         DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000016  a901              ADD      r1,sp,#4
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       DrvSPI_SingleWrite
;;;50     
;;;51         // wait
;;;52         while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
00001e  bf00              NOP      
                  |L5.32|
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       DrvSPI_IsBusy
000026  2800              CMP      r0,#0
000028  d1fa              BNE      |L5.32|
;;;53     
;;;54         // configure transaction length as 24 bits
;;;55         DrvSPI_SetBitLength(eDRVSPI_PORT2, 24);
00002a  2118              MOVS     r1,#0x18
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       DrvSPI_SetBitLength
;;;56     
;;;57         // send 24-bit '0', dummy
;;;58         au32SourceData = 0x0;
000032  2000              MOVS     r0,#0
000034  9001              STR      r0,[sp,#4]
;;;59         DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000036  a901              ADD      r1,sp,#4
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       DrvSPI_SingleWrite
;;;60     
;;;61         // wait
;;;62         while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
00003e  bf00              NOP      
                  |L5.64|
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       DrvSPI_IsBusy
000046  2800              CMP      r0,#0
000048  d1fa              BNE      |L5.64|
;;;63     
;;;64         // configure transaction length as 16 bits
;;;65         DrvSPI_SetBitLength(eDRVSPI_PORT2, 16);
00004a  2110              MOVS     r1,#0x10
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       DrvSPI_SetBitLength
;;;66     
;;;67         // receive
;;;68         au32SourceData = 0x0;
000052  2000              MOVS     r0,#0
000054  9001              STR      r0,[sp,#4]
;;;69         DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000056  a901              ADD      r1,sp,#4
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       DrvSPI_SingleWrite
;;;70     
;;;71         // wait
;;;72         while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
00005e  bf00              NOP      
                  |L5.96|
000060  2002              MOVS     r0,#2
000062  f7fffffe          BL       DrvSPI_IsBusy
000066  2800              CMP      r0,#0
000068  d1fa              BNE      |L5.96|
;;;73     
;;;74         // /CS: de-active
;;;75         DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00006a  2101              MOVS     r1,#1
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       DrvSPI_ClrSS
;;;76     
;;;77         DrvSPI_DumpRxRegister(eDRVSPI_PORT2, &au32DestinationData, 1);
000072  2201              MOVS     r2,#1
000074  4669              MOV      r1,sp
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;78     
;;;79         if ((au32DestinationData & 0xffff) == 0xEF14)
00007c  9800              LDR      r0,[sp,#0]
00007e  b280              UXTH     r0,r0
000080  4906              LDR      r1,|L5.156|
000082  4288              CMP      r0,r1
000084  d104              BNE      |L5.144|
;;;80             print_lcd(3, "MID & DID=0xEF14");
000086  a106              ADR      r1,|L5.160|
000088  2003              MOVS     r0,#3
00008a  f7fffffe          BL       print_lcd
00008e  e003              B        |L5.152|
                  |L5.144|
;;;81         else
;;;82             print_lcd(3, "MID & DID Error!");
000090  a108              ADR      r1,|L5.180|
000092  2003              MOVS     r0,#3
000094  f7fffffe          BL       print_lcd
                  |L5.152|
;;;83     
;;;84     }
000098  bd1c              POP      {r2-r4,pc}
;;;85     
                          ENDP

00009a  0000              DCW      0x0000
                  |L5.156|
                          DCD      0x0000ef14
                  |L5.160|
0000a0  4d494420          DCB      "MID & DID=0xEF14",0
0000a4  26204449
0000a8  443d3078
0000ac  45463134
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L5.180|
0000b4  4d494420          DCB      "MID & DID Error!",0
0000b8  26204449
0000bc  44204572
0000c0  726f7221
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.SpiFlash_ReadStatusReg1||, CODE, READONLY, ALIGN=1

                  SpiFlash_ReadStatusReg1 PROC
;;;122    // **************************************
;;;123    uint32_t SpiFlash_ReadStatusReg1(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;124    {
;;;125        uint32_t au32SourceData;
;;;126        uint32_t au32DestinationData;
;;;127    
;;;128        // configure transaction length as 16 bits
;;;129        DrvSPI_SetBitLength(eDRVSPI_PORT2, 16);
000002  2110              MOVS     r1,#0x10
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       DrvSPI_SetBitLength
;;;130    
;;;131        // /CS: active
;;;132        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       DrvSPI_SetSS
;;;133    
;;;134        // send Command: 0x05, Read status register 1
;;;135        au32SourceData = 0x0500;
000012  2005              MOVS     r0,#5
000014  0200              LSLS     r0,r0,#8
000016  9001              STR      r0,[sp,#4]
;;;136        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000018  a901              ADD      r1,sp,#4
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       DrvSPI_SingleWrite
;;;137    
;;;138        // wait
;;;139        while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
000020  bf00              NOP      
                  |L6.34|
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       DrvSPI_IsBusy
000028  2800              CMP      r0,#0
00002a  d1fa              BNE      |L6.34|
;;;140    
;;;141        // /CS: de-active
;;;142        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00002c  2101              MOVS     r1,#1
00002e  2002              MOVS     r0,#2
000030  f7fffffe          BL       DrvSPI_ClrSS
;;;143    
;;;144        // dump Rx register
;;;145        DrvSPI_DumpRxRegister(eDRVSPI_PORT2, &au32DestinationData, 1);
000034  2201              MOVS     r2,#1
000036  4669              MOV      r1,sp
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;146    
;;;147        return (au32DestinationData & 0xFF);
00003e  9800              LDR      r0,[sp,#0]
000040  b2c0              UXTB     r0,r0
;;;148    }
000042  bd1c              POP      {r2-r4,pc}
;;;149    
                          ENDP


                          AREA ||i.SpiFlash_ReadStatusReg2||, CODE, READONLY, ALIGN=1

                  SpiFlash_ReadStatusReg2 PROC
;;;150    // **************************************
;;;151    uint32_t SpiFlash_ReadStatusReg2(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;152    {
;;;153        uint32_t au32SourceData;
;;;154        uint32_t au32DestinationData;
;;;155    
;;;156        // configure transaction length as 16 bits
;;;157        DrvSPI_SetBitLength(eDRVSPI_PORT2, 16);
000002  2110              MOVS     r1,#0x10
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       DrvSPI_SetBitLength
;;;158    
;;;159        // /CS: active
;;;160        DrvSPI_SetSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       DrvSPI_SetSS
;;;161    
;;;162        // send Command: 0x35, Read status register 2
;;;163        au32SourceData = 0x3500;
000012  2035              MOVS     r0,#0x35
000014  0200              LSLS     r0,r0,#8
000016  9001              STR      r0,[sp,#4]
;;;164        DrvSPI_SingleWrite(eDRVSPI_PORT2, &au32SourceData);
000018  a901              ADD      r1,sp,#4
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       DrvSPI_SingleWrite
;;;165    
;;;166        // wait
;;;167        while (DrvSPI_IsBusy(eDRVSPI_PORT2)) {}
000020  bf00              NOP      
                  |L7.34|
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       DrvSPI_IsBusy
000028  2800              CMP      r0,#0
00002a  d1fa              BNE      |L7.34|
;;;168    
;;;169        // /CS: de-active
;;;170        DrvSPI_ClrSS(eDRVSPI_PORT2, eDRVSPI_SS0);
00002c  2101              MOVS     r1,#1
00002e  2002              MOVS     r0,#2
000030  f7fffffe          BL       DrvSPI_ClrSS
;;;171    
;;;172        // dump Rx register
;;;173        DrvSPI_DumpRxRegister(eDRVSPI_PORT2, &au32DestinationData, 1);
000034  2201              MOVS     r2,#1
000036  4669              MOV      r1,sp
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;174    
;;;175        return (au32DestinationData & 0xFF);
00003e  9800              LDR      r0,[sp,#0]
000040  b2c0              UXTB     r0,r0
;;;176    }
000042  bd1c              POP      {r2-r4,pc}
;;;177    
                          ENDP


                          AREA ||i.SpiFlash_WaitReady||, CODE, READONLY, ALIGN=1

                  SpiFlash_WaitReady PROC
;;;178    // **************************************
;;;179    void SpiFlash_WaitReady(void)
000000  b510              PUSH     {r4,lr}
;;;180    {
;;;181        uint32_t ReturnValue;
;;;182    
;;;183        do
000002  bf00              NOP      
                  |L8.4|
;;;184        {
;;;185            ReturnValue = SpiFlash_ReadStatusReg1();
000004  f7fffffe          BL       SpiFlash_ReadStatusReg1
000008  4604              MOV      r4,r0
;;;186            ReturnValue = ReturnValue & 1;
00000a  07e4              LSLS     r4,r4,#31
00000c  0fe4              LSRS     r4,r4,#31
;;;187        }
;;;188        while (ReturnValue != 0); // check the BUSY bit
00000e  2c00              CMP      r4,#0
000010  d1f8              BNE      |L8.4|
;;;189    
;;;190    }
000012  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;17     
;;;18     void delay(void)
000000  2000              MOVS     r0,#0
;;;19     {
;;;20         int j;
;;;21         for (j = 0; j < 1000; j++);
000002  e000              B        |L9.6|
                  |L9.4|
000004  1c40              ADDS     r0,r0,#1
                  |L9.6|
000006  217d              MOVS     r1,#0x7d
000008  00c9              LSLS     r1,r1,#3
00000a  4288              CMP      r0,r1
00000c  dbfa              BLT      |L9.4|
;;;22     }
00000e  4770              BX       lr
;;;23     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  PDMA0_INT_Flag
                          DCD      0x00000000
                  PDMA1_INT_Flag
                          DCD      0x00000000
